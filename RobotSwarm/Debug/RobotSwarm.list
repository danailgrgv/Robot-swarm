
RobotSwarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000393c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b0c  08003b0c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b0c  08003b0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08003b24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003b24  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000807e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001417  00000000  00000000  000280be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  000294d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f867  00000000  00000000  0002a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006603  00000000  00000000  00049a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0126  00000000  00000000  0005004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c64  00000000  00000000  001101ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003abc 	.word	0x08003abc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003abc 	.word	0x08003abc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <main>:

static enum carStates currentState = DRIVING;
static enum carStates prevState = STOPPED;

int main(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
  HAL_Init();
 8000baa:	f000 fd57 	bl	800165c <HAL_Init>
  SystemClock_Config();
 8000bae:	f000 fb8f 	bl	80012d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000bb2:	f000 fc1b 	bl	80013ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb6:	f000 fbe9 	bl	800138c <MX_USART2_UART_Init>

  pinSetup();
 8000bba:	f000 f88c 	bl	8000cd6 <pinSetup>
  timerSetup();
 8000bbe:	f000 f8b9 	bl	8000d34 <timerSetup>
  timerOutputSetup();
 8000bc2:	f000 f9c1 	bl	8000f48 <timerOutputSetup>
  timer4Setup();
 8000bc6:	f000 f8d1 	bl	8000d6c <timer4Setup>
  TIM3_C1_Init();
 8000bca:	f000 fab1 	bl	8001130 <TIM3_C1_Init>
  while (1)
  {
	  double distance = timespan / 58;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <main+0xec>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a30      	ldr	r2, [pc, #192]	; (8000c94 <main+0xf0>)
 8000bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd8:	441a      	add	r2, r3
 8000bda:	1152      	asrs	r2, r2, #5
 8000bdc:	17db      	asrs	r3, r3, #31
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc4b 	bl	800047c <__aeabi_i2d>
 8000be6:	4603      	mov	r3, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	e9c7 3400 	strd	r3, r4, [r7]
	  switch(currentState)
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <main+0xf4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d009      	beq.n	8000c0a <main+0x66>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d024      	beq.n	8000c44 <main+0xa0>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <main+0x5c>
			  rotateVehicle(30);
			  HAL_Delay(1000);
		  }
		  break;
	  default:
		  break;
 8000bfe:	e046      	b.n	8000c8e <main+0xea>
		  drive(0);
 8000c00:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000c9c <main+0xf8>
 8000c04:	f000 f852 	bl	8000cac <drive>
		  break;
 8000c08:	e041      	b.n	8000c8e <main+0xea>
		  if(distance < 10)
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <main+0xfc>)
 8000c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c14:	f7ff ff0e 	bl	8000a34 <__aeabi_dcmplt>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <main+0x82>
			  currentState = TURNING;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <main+0xf4>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
		  break;
 8000c24:	e032      	b.n	8000c8c <main+0xe8>
		  } else if(prevState != currentState)
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <main+0x100>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <main+0xf4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d02c      	beq.n	8000c8c <main+0xe8>
			  drive(0.4);
 8000c32:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000ca8 <main+0x104>
 8000c36:	f000 f839 	bl	8000cac <drive>
			  prevState = currentState;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <main+0xf4>)
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <main+0x100>)
 8000c40:	701a      	strb	r2, [r3, #0]
		  break;
 8000c42:	e023      	b.n	8000c8c <main+0xe8>
		  if(prevState != currentState)
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <main+0x100>)
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <main+0xf4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d007      	beq.n	8000c60 <main+0xbc>
			  drive(0);
 8000c50:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000c9c <main+0xf8>
 8000c54:	f000 f82a 	bl	8000cac <drive>
			  prevState = currentState;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <main+0xf4>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <main+0x100>)
 8000c5e:	701a      	strb	r2, [r3, #0]
		  if(distance > 10)
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <main+0xfc>)
 8000c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c6a:	f7ff ff01 	bl	8000a70 <__aeabi_dcmpgt>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <main+0xd8>
			  currentState = DRIVING;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <main+0xf4>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
		  break;
 8000c7a:	e008      	b.n	8000c8e <main+0xea>
			  rotateVehicle(30);
 8000c7c:	201e      	movs	r0, #30
 8000c7e:	f000 f9eb 	bl	8001058 <rotateVehicle>
			  HAL_Delay(1000);
 8000c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c86:	f000 fd4f 	bl	8001728 <HAL_Delay>
		  break;
 8000c8a:	e000      	b.n	8000c8e <main+0xea>
		  break;
 8000c8c:	bf00      	nop
  {
 8000c8e:	e79e      	b.n	8000bce <main+0x2a>
 8000c90:	2000002c 	.word	0x2000002c
 8000c94:	8d3dcb09 	.word	0x8d3dcb09
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	00000000 	.word	0x00000000
 8000ca0:	40240000 	.word	0x40240000
 8000ca4:	20000038 	.word	0x20000038
 8000ca8:	3ecccccd 	.word	0x3ecccccd

08000cac <drive>:
	  }
  }
}

static void drive(float power)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	ed87 0a01 	vstr	s0, [r7, #4]
	setDutyCycleChannel1(-power);
 8000cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cba:	eef1 7a67 	vneg.f32	s15, s15
 8000cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc2:	f000 f8b1 	bl	8000e28 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 8000cc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000cca:	f000 f8f5 	bl	8000eb8 <setDutyCycleChannel2>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <pinSetup>:

static void pinSetup(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER1_1 | GPIO_MODER_MODER2_1;
 8000cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce4:	f443 6302 	orr.w	r3, r3, #2080	; 0x820
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0);
 8000cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf8:	f423 6382 	bic.w	r3, r3, #1040	; 0x410
 8000cfc:	f023 0304 	bic.w	r3, r3, #4
 8000d00:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL5_Msk | GPIO_AFRL_AFRL1_Msk | GPIO_AFRL_AFRL2_Msk);
 8000d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0c:	f023 13f0 	bic.w	r3, r3, #15728880	; 0xf000f0
 8000d10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d14:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL5_Pos) | (1 << GPIO_AFRL_AFRL1_Pos) | (1 << GPIO_AFRL_AFRL2_Pos);
 8000d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d20:	f043 1310 	orr.w	r3, r3, #1048592	; 0x100010
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	6213      	str	r3, [r2, #32]

}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <timerSetup>:

static void timerSetup(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <timerSetup+0x34>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <timerSetup+0x34>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 72 - 1;
 8000d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d48:	2247      	movs	r2, #71	; 0x47
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR_VALUE - 1;
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <timer4Setup>:

static void timer4Setup(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <timer4Setup+0xac>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <timer4Setup+0xac>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = 72 - 1;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <timer4Setup+0xb0>)
 8000d7e:	2247      	movs	r2, #71	; 0x47
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 50 - 1;
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <timer4Setup+0xb0>)
 8000d84:	2231      	movs	r2, #49	; 0x31
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CNT = 0;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <timer4Setup+0xb0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <timer4Setup+0xb0>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <timer4Setup+0xb0>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000d9c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <timer4Setup+0xb0>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <timer4Setup+0xb0>)
 8000da4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000da8:	6193      	str	r3, [r2, #24]
	TIM4->CCR1 |= 0;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <timer4Setup+0xb0>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <timer4Setup+0xb0>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCER |= TIM_CCER_CC1E_Msk;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <timer4Setup+0xb0>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <timer4Setup+0xb0>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1P_Msk;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <timer4Setup+0xb0>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <timer4Setup+0xb0>)
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <timer4Setup+0xb4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <timer4Setup+0xb4>)
 8000dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6_0);
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <timer4Setup+0xb4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <timer4Setup+0xb4>)
 8000ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000de0:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL6_Msk);
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <timer4Setup+0xb4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <timer4Setup+0xb4>)
 8000de8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000dec:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL6_Pos);
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <timer4Setup+0xb4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <timer4Setup+0xb4>)
 8000df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df8:	6213      	str	r3, [r2, #32]

	TIM4->CCR1 = 10 - 1;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <timer4Setup+0xb0>)
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34

	TIM4->CR1 |= TIM_CR1_CEN;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <timer4Setup+0xb0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <timer4Setup+0xb0>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40000800 	.word	0x40000800
 8000e20:	48000400 	.word	0x48000400
 8000e24:	00000000 	.word	0x00000000

08000e28 <setDutyCycleChannel1>:

static void setDutyCycleChannel1(float power)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	dd03      	ble.n	8000e4c <setDutyCycleChannel1+0x24>
 8000e44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e00a      	b.n	8000e62 <setDutyCycleChannel1+0x3a>
	else if(power < -1) power = -1;
 8000e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5c:	d501      	bpl.n	8000e62 <setDutyCycleChannel1+0x3a>
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <setDutyCycleChannel1+0x88>)
 8000e60:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb1c 	bl	80004a0 <__aeabi_f2d>
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <setDutyCycleChannel1+0x8c>)
 8000e6e:	f7ff fb6f 	bl	8000550 <__aeabi_dmul>
 8000e72:	4603      	mov	r3, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	4618      	mov	r0, r3
 8000e78:	4621      	mov	r1, r4
 8000e7a:	a30b      	add	r3, pc, #44	; (adr r3, 8000ea8 <setDutyCycleChannel1+0x80>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff f9b0 	bl	80001e4 <__adddf3>
 8000e84:	4603      	mov	r3, r0
 8000e86:	460c      	mov	r4, r1
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fe1e 	bl	8000ad4 <__aeabi_d2uiz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	40977000 	.word	0x40977000
 8000eb0:	bf800000 	.word	0xbf800000
 8000eb4:	406b8000 	.word	0x406b8000

08000eb8 <setDutyCycleChannel2>:

static void setDutyCycleChannel2(float power)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	dd03      	ble.n	8000edc <setDutyCycleChannel2+0x24>
 8000ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e00a      	b.n	8000ef2 <setDutyCycleChannel2+0x3a>
	else if(power < -1) power = -1;
 8000edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d501      	bpl.n	8000ef2 <setDutyCycleChannel2+0x3a>
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <setDutyCycleChannel2+0x88>)
 8000ef0:	607b      	str	r3, [r7, #4]
	TIM2->CCR2 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fad4 	bl	80004a0 <__aeabi_f2d>
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <setDutyCycleChannel2+0x8c>)
 8000efe:	f7ff fb27 	bl	8000550 <__aeabi_dmul>
 8000f02:	4603      	mov	r3, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	4618      	mov	r0, r3
 8000f08:	4621      	mov	r1, r4
 8000f0a:	a30b      	add	r3, pc, #44	; (adr r3, 8000f38 <setDutyCycleChannel2+0x80>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff f968 	bl	80001e4 <__adddf3>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fdd6 	bl	8000ad4 <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	f3af 8000 	nop.w
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	40977000 	.word	0x40977000
 8000f40:	bf800000 	.word	0xbf800000
 8000f44:	406b8000 	.word	0x406b8000

08000f48 <timerOutputSetup>:

static void timerOutputSetup(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	//Configure channel 1
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000f5e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f6e:	6193      	str	r3, [r2, #24]
	TIM2->CCR1 |= 0;
 8000f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E_Msk;
 8000f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	6213      	str	r3, [r2, #32]

	//Configure channel 2
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S_Msk | TIM_CCMR1_OC2M_Msk | TIM_CCMR1_OC2PE_Msk) ;
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000faa:	f423 43f6 	bic.w	r3, r3, #31488	; 0x7b00
 8000fae:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8000fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fba:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000fbe:	6193      	str	r3, [r2, #24]
	TIM2->CCR2 |= 0;
 8000fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E_Msk;
 8000fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2P_Msk;
 8000fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	f023 0320 	bic.w	r3, r3, #32
 8000fea:	6213      	str	r3, [r2, #32]

	//Configure channel 3
	TIM2->CCMR2 &= ~(TIM_CCMR2_CC3S_Msk | TIM_CCMR2_OC3M_Msk | TIM_CCMR2_OC3PE_Msk);
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000ffe:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 8001000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800100e:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 |= 0;
 8001010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->CCER |= TIM_CCER_CC3E_Msk;
 800101c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC3P_Msk;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800103a:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 800103c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <rotateVehicle>:

static void rotateVehicle(int rotationDegrees)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	if(rotationDegrees == 0) return;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d051      	beq.n	800110a <rotateVehicle+0xb2>
	int delay;
	float power;
	if(rotationDegrees < 0)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	da1e      	bge.n	80010aa <rotateVehicle+0x52>
	{
		delay = -(20 + 13.67 * rotationDegrees);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fa05 	bl	800047c <__aeabi_i2d>
 8001072:	a329      	add	r3, pc, #164	; (adr r3, 8001118 <rotateVehicle+0xc0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fa6a 	bl	8000550 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <rotateVehicle+0xc8>)
 800108a:	f7ff f8ab 	bl	80001e4 <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4614      	mov	r4, r2
 8001094:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff fcf2 	bl	8000a84 <__aeabi_d2iz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
		power = -0.3;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <rotateVehicle+0xcc>)
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	e01a      	b.n	80010e0 <rotateVehicle+0x88>
	} else
	{
		delay = 20 + 13.67 * rotationDegrees;
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f9e6 	bl	800047c <__aeabi_i2d>
 80010b0:	a319      	add	r3, pc, #100	; (adr r3, 8001118 <rotateVehicle+0xc0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa4b 	bl	8000550 <__aeabi_dmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <rotateVehicle+0xc8>)
 80010c8:	f7ff f88c 	bl	80001e4 <__adddf3>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fcd6 	bl	8000a84 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
		power = 0.3;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <rotateVehicle+0xd0>)
 80010de:	60bb      	str	r3, [r7, #8]
	}
	setDutyCycleChannel1(power);
 80010e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80010e4:	f7ff fea0 	bl	8000e28 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 80010e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ec:	f7ff fee4 	bl	8000eb8 <setDutyCycleChannel2>
	HAL_Delay(delay);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb18 	bl	8001728 <HAL_Delay>
	setDutyCycleChannel1(0);
 80010f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800112c <rotateVehicle+0xd4>
 80010fc:	f7ff fe94 	bl	8000e28 <setDutyCycleChannel1>
	setDutyCycleChannel2(0);
 8001100:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800112c <rotateVehicle+0xd4>
 8001104:	f7ff fed8 	bl	8000eb8 <setDutyCycleChannel2>
 8001108:	e000      	b.n	800110c <rotateVehicle+0xb4>
	if(rotationDegrees == 0) return;
 800110a:	bf00      	nop
}
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bdb0      	pop	{r4, r5, r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	3d70a3d7 	.word	0x3d70a3d7
 800111c:	402b570a 	.word	0x402b570a
 8001120:	40340000 	.word	0x40340000
 8001124:	be99999a 	.word	0xbe99999a
 8001128:	3e99999a 	.word	0x3e99999a
 800112c:	00000000 	.word	0x00000000

08001130 <TIM3_C1_Init>:

// CONFIGURE TIM4 FOR RECEIVING INPUT SIGNAL
void TIM3_C1_Init(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    //Pin setup rewrite
    GPIOB->MODER |= GPIO_MODER_MODER4_1;
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <TIM3_C1_Init+0xf0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a39      	ldr	r2, [pc, #228]	; (8001220 <TIM3_C1_Init+0xf0>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER4_0;
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <TIM3_C1_Init+0xf0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a36      	ldr	r2, [pc, #216]	; (8001220 <TIM3_C1_Init+0xf0>)
 8001146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR4_Msk;
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <TIM3_C1_Init+0xf0>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a33      	ldr	r2, [pc, #204]	; (8001220 <TIM3_C1_Init+0xf0>)
 8001152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001156:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL4_Msk;
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <TIM3_C1_Init+0xf0>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <TIM3_C1_Init+0xf0>)
 800115e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001162:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL4_Pos);
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <TIM3_C1_Init+0xf0>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a2d      	ldr	r2, [pc, #180]	; (8001220 <TIM3_C1_Init+0xf0>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6213      	str	r3, [r2, #32]

    //Timer rewrite
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <TIM3_C1_Init+0xf4>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <TIM3_C1_Init+0xf4>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 72 - 1;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <TIM3_C1_Init+0xf8>)
 800117e:	2247      	movs	r2, #71	; 0x47
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 1000 - 1;
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <TIM3_C1_Init+0xf8>)
 8001184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <TIM3_C1_Init+0xf8>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a26      	ldr	r2, [pc, #152]	; (8001228 <TIM3_C1_Init+0xf8>)
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <TIM3_C1_Init+0xf8>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <TIM3_C1_Init+0xf8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1F;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a20      	ldr	r2, [pc, #128]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ac:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011b4:	f023 030c 	bic.w	r3, r3, #12
 80011b8:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1NP;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011c0:	f043 030a 	orr.w	r3, r3, #10
 80011c4:	6213      	str	r3, [r2, #32]
    TIM3->CCER |= TIM_CCER_CC1E;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
    TIM3->DIER |= TIM_DIER_CC1IE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_CC1DE;	//DMA request
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e8:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_UIE;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 &= ~TIM_CR1_DIR;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <TIM3_C1_Init+0xf8>)
 80011fc:	f023 0310 	bic.w	r3, r3, #16
 8001200:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <TIM3_C1_Init+0xf8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <TIM3_C1_Init+0xf8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 1);
 800120e:	2101      	movs	r1, #1
 8001210:	201d      	movs	r0, #29
 8001212:	f7ff fc9d 	bl	8000b50 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8001216:	201d      	movs	r0, #29
 8001218:	f7ff fc7c 	bl	8000b14 <__NVIC_EnableIRQ>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48000400 	.word	0x48000400
 8001224:	40021000 	.word	0x40021000
 8001228:	40000400 	.word	0x40000400

0800122c <TIM3_IRQHandler>:
    TIM2->CCR3 &= ~(TIM_CCR3_CCR3);                     // Clear CCR3 (Channel 3)
    TIM2->CCR3 |= 0x1;                                            // Load the register
    TIM2->CR1 |= TIM_CR1_CEN;                           // Enable the counter
}

void TIM3_IRQHandler(void){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	static int lineHigh = 0;
	// Check the update event flag
    if ((TIM3->SR & TIM_SR_UIF) != 0)
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00a      	beq.n	8001252 <TIM3_IRQHandler+0x26>
    {
        overflow++;                        // if UIF = 1, increment overflow counter
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <TIM3_IRQHandler+0x90>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <TIM3_IRQHandler+0x90>)
 8001244:	6013      	str	r3, [r2, #0]
        TIM3->SR &= ~TIM_SR_UIF;           // clear UIF
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6113      	str	r3, [r2, #16]
    }

    // Check capture event flag
    if ((TIM3->SR & TIM_SR_CC1IF) != 0)
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d021      	beq.n	80012a2 <TIM3_IRQHandler+0x76>
    {
        if(lineHigh)
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <TIM3_IRQHandler+0x94>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d012      	beq.n	800128c <TIM3_IRQHandler+0x60>
        {
        	timespan = TIM3->SR - newcounter + 1000 * overflow;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <TIM3_IRQHandler+0x98>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <TIM3_IRQHandler+0x90>)
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001278:	fb01 f202 	mul.w	r2, r1, r2
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <TIM3_IRQHandler+0x9c>)
 8001282:	601a      	str	r2, [r3, #0]
        	lineHigh = 0;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <TIM3_IRQHandler+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e00a      	b.n	80012a2 <TIM3_IRQHandler+0x76>
        } else
        {
        	newcounter = TIM3->CCR1;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <TIM3_IRQHandler+0x8c>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	461a      	mov	r2, r3
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <TIM3_IRQHandler+0x98>)
 8001294:	601a      	str	r2, [r3, #0]
        	overflow = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <TIM3_IRQHandler+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        	lineHigh = 1;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <TIM3_IRQHandler+0x94>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
        }
    }
    EXTI->PR |= EXTI_PR_PIF4;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <TIM3_IRQHandler+0xa0>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <TIM3_IRQHandler+0xa0>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6153      	str	r3, [r2, #20]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40000400 	.word	0x40000400
 80012bc:	20000034 	.word	0x20000034
 80012c0:	2000003c 	.word	0x2000003c
 80012c4:	20000030 	.word	0x20000030
 80012c8:	2000002c 	.word	0x2000002c
 80012cc:	40010400 	.word	0x40010400

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a6      	sub	sp, #152	; 0x98
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fbe4 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2258      	movs	r2, #88	; 0x58
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fbd6 	bl	8003aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fca4 	bl	8001c7c <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800133a:	f000 f8bf 	bl	80014bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fba4 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001366:	f000 f8a9 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800136a:	2302      	movs	r3, #2
 800136c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fdcd 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001380:	f000 f89c 	bl	80014bc <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3798      	adds	r7, #152	; 0x98
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f001 ffbe 	bl	8003350 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f86f 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000040 	.word	0x20000040
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a2a      	ldr	r2, [pc, #168]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <MX_GPIO_Init+0xc4>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_GPIO_Init+0xc4>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f000 fbef 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_GPIO_Init+0xcc>)
 8001484:	f000 fa58 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001488:	2320      	movs	r3, #32
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f000 fa49 	bl	8001938 <HAL_GPIO_Init>

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	10210000 	.word	0x10210000
 80014b8:	48000800 	.word	0x48000800

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <Error_Handler+0x6>

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x44>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x44>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014fa:	2007      	movs	r0, #7
 80014fc:	f000 f9e8 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x7c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d128      	bne.n	8001580 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_UART_MspInit+0x80>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_UART_MspInit+0x80>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_UART_MspInit+0x80>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_MspInit+0x80>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_UART_MspInit+0x80>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_UART_MspInit+0x80>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 f9dc 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	40021000 	.word	0x40021000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015dc:	f000 f884 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f002 fa15 	bl	8003a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fab3 	bl	8000ba4 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001640:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800164c:	08003b14 	.word	0x08003b14
  ldr r2, =_sbss
 8001650:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001654:	200000c8 	.word	0x200000c8

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f92f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff ff24 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f939 	bl	800191e <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f90f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000004 	.word	0x20000004
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000000c 	.word	0x2000000c
 800170c:	200000c4 	.word	0x200000c4

08001710 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;  
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200000c4 	.word	0x200000c4

08001728 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_Delay+0x40>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000000c 	.word	0x2000000c

0800176c <__NVIC_SetPriorityGrouping>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff47 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff5c 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffb0 	bl	800188c <SysTick_Config>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	e160      	b.n	8001c0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8152 	beq.w	8001c04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d00b      	beq.n	8001980 <HAL_GPIO_Init+0x48>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001974:	2b11      	cmp	r3, #17
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b12      	cmp	r3, #18
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0xea>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d123      	bne.n	8001a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0203 	and.w	r2, r3, #3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80ac 	beq.w	8001c04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ac4:	4a59      	ldr	r2, [pc, #356]	; (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aee:	d025      	beq.n	8001b3c <HAL_GPIO_Init+0x204>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_GPIO_Init+0x2f8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d01f      	beq.n	8001b38 <HAL_GPIO_Init+0x200>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1fc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1f8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1f4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x308>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1f0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x30c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b20:	2306      	movs	r3, #6
 8001b22:	e00c      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e00a      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b28:	2305      	movs	r3, #5
 8001b2a:	e008      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b30:	2303      	movs	r3, #3
 8001b32:	e004      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4e:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b80:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001baa:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f ae97 	bne.w	8001948 <HAL_GPIO_Init+0x10>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	48000800 	.word	0x48000800
 8001c38:	48000c00 	.word	0x48000c00
 8001c3c:	48001000 	.word	0x48001000
 8001c40:	48001400 	.word	0x48001400
 8001c44:	48001800 	.word	0x48001800
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f000 bf01 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8160 	beq.w	8001f66 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca6:	4bae      	ldr	r3, [pc, #696]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb2:	4bab      	ldr	r3, [pc, #684]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d159      	bne.n	8001d72 <HAL_RCC_OscConfig+0xf6>
 8001cbe:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d152      	bne.n	8001d72 <HAL_RCC_OscConfig+0xf6>
 8001ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ce0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x82>
 8001cf8:	4b99      	ldr	r3, [pc, #612]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0xae>
 8001cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d1a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d26:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d2e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d32:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d3e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8102 	beq.w	8001f64 <HAL_RCC_OscConfig+0x2e8>
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80fc 	bne.w	8001f64 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f000 be93 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x110>
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e030      	b.n	8001dee <HAL_RCC_OscConfig+0x172>
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x134>
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01e      	b.n	8001dee <HAL_RCC_OscConfig+0x172>
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x15a>
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a64      	ldr	r2, [pc, #400]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x172>
 8001dd6:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a61      	ldr	r2, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d059      	beq.n	8001eac <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fc8a 	bl	8001710 <HAL_GetTick>
 8001dfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e02:	f7ff fc85 	bl	8001710 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d902      	bls.n	8001e18 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f000 be40 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8001e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e2c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1ce>
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x1fa>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e7e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e82:	fa92 f2a2 	rbit	r2, r2
 8001e86:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e8e:	fab2 f282 	clz	r2, r2
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f042 0220 	orr.w	r2, r2, #32
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f002 021f 	and.w	r2, r2, #31
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ab      	beq.n	8001e02 <HAL_RCC_OscConfig+0x186>
 8001eaa:	e05c      	b.n	8001f66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc30 	bl	8001710 <HAL_GetTick>
 8001eb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fc2b 	bl	8001710 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bde6 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8001ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ee0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_OscConfig+0x282>
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ae>
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCC_OscConfig+0x2e4>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f32:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f36:	fa92 f2a2 	rbit	r2, r2
 8001f3a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f042 0220 	orr.w	r2, r2, #32
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ab      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x23a>
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_OscConfig+0x2ea>
 8001f60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8170 	beq.w	8002256 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f76:	4bd0      	ldr	r3, [pc, #832]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f82:	4bcd      	ldr	r3, [pc, #820]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d16d      	bne.n	800206a <HAL_RCC_OscConfig+0x3ee>
 8001f8e:	4bca      	ldr	r3, [pc, #808]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9a:	d166      	bne.n	800206a <HAL_RCC_OscConfig+0x3ee>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001fae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_OscConfig+0x350>
 8001fc6:	4bbc      	ldr	r3, [pc, #752]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x378>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fe4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ff0:	4bb1      	ldr	r3, [pc, #708]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ffa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002006:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_RCC_OscConfig+0x3ba>
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d002      	beq.n	8002036 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f000 bd31 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4ba0      	ldr	r3, [pc, #640]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	21f8      	movs	r1, #248	; 0xf8
 8002046:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800204e:	fa91 f1a1 	rbit	r1, r1
 8002052:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002056:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800205a:	fab1 f181 	clz	r1, r1
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	408b      	lsls	r3, r1
 8002062:	4995      	ldr	r1, [pc, #596]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002068:	e0f5      	b.n	8002256 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8085 	beq.w	8002180 <HAL_RCC_OscConfig+0x504>
 8002076:	2301      	movs	r3, #1
 8002078:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002088:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002096:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fb35 	bl	8001710 <HAL_GetTick>
 80020a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fb30 	bl	8001710 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bceb 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80020d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x476>
 80020ec:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0x49e>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800210a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002116:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002120:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800212c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0af      	beq.n	80020ac <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	21f8      	movs	r1, #248	; 0xf8
 800215c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002164:	fa91 f1a1 	rbit	r1, r1
 8002168:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800216c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002170:	fab1 f181 	clz	r1, r1
 8002174:	b2c9      	uxtb	r1, r1
 8002176:	408b      	lsls	r3, r1
 8002178:	494f      	ldr	r1, [pc, #316]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
 800217e:	e06a      	b.n	8002256 <HAL_RCC_OscConfig+0x5da>
 8002180:	2301      	movs	r3, #1
 8002182:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fab0 	bl	8001710 <HAL_GetTick>
 80021b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff faab 	bl	8001710 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d902      	bls.n	80021cc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	f000 bc66 	b.w	8002a98 <HAL_RCC_OscConfig+0xe1c>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80021de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_OscConfig+0x580>
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	e013      	b.n	8002224 <HAL_RCC_OscConfig+0x5a8>
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002214:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x63c>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2202      	movs	r2, #2
 8002226:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800222a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002236:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f002 021f 	and.w	r2, r2, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1af      	bne.n	80021b6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80da 	beq.w	800241a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d069      	beq.n	8002344 <HAL_RCC_OscConfig+0x6c8>
 8002270:	2301      	movs	r3, #1
 8002272:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002282:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x640>)
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7ff fa39 	bl	8001710 <HAL_GetTick>
 800229e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e00d      	b.n	80022c0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff fa34 	bl	8001710 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d905      	bls.n	80022c0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e3ef      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	10908120 	.word	0x10908120
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002302:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	4ba4      	ldr	r3, [pc, #656]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002308:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800230c:	2102      	movs	r1, #2
 800230e:	6019      	str	r1, [r3, #0]
 8002310:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f1a3 	rbit	r1, r3
 800231a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800231e:	6019      	str	r1, [r3, #0]
  return result;
 8002320:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0b0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x628>
 8002342:	e06a      	b.n	800241a <HAL_RCC_OscConfig+0x79e>
 8002344:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800235a:	601a      	str	r2, [r3, #0]
  return result;
 800235c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002360:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x920>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff f9cb 	bl	8001710 <HAL_GetTick>
 800237a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e009      	b.n	8002394 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff f9c6 	bl	8001710 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e381      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8002394:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80023de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e4:	2102      	movs	r1, #2
 80023e6:	6019      	str	r1, [r3, #0]
 80023e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f1a3 	rbit	r1, r3
 80023f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023f6:	6019      	str	r1, [r3, #0]
  return result;
 80023f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1b2      	bne.n	8002380 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8157 	beq.w	80026d8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCC_OscConfig+0x924>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_OscConfig+0x924>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x924>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff f949 	bl	8001710 <HAL_GetTick>
 800247e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	e009      	b.n	8002498 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7ff f944 	bl	8001710 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e2ff      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_OscConfig+0x924>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ef      	beq.n	8002484 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x840>
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a39      	ldr	r2, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	e02f      	b.n	800251c <HAL_RCC_OscConfig+0x8a0>
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x864>
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a30      	ldr	r2, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0x8a0>
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x888>
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0x8a0>
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002516:	f023 0304 	bic.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06a      	beq.n	80025fc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff f8f3 	bl	8001710 <HAL_GetTick>
 800252a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7ff f8ee 	bl	8001710 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e2a7      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8002548:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800257c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x928>
 8002592:	4b01      	ldr	r3, [pc, #4]	; (8002598 <HAL_RCC_OscConfig+0x91c>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x944>
 8002598:	40021000 	.word	0x40021000
 800259c:	10908120 	.word	0x10908120
 80025a0:	40007000 	.word	0x40007000
 80025a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025a8:	2202      	movs	r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	4bc0      	ldr	r3, [pc, #768]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025c4:	2102      	movs	r1, #2
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	fa92 f1a2 	rbit	r1, r2
 80025d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025d6:	6011      	str	r1, [r2, #0]
  return result;
 80025d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d09a      	beq.n	8002530 <HAL_RCC_OscConfig+0x8b4>
 80025fa:	e063      	b.n	80026c4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff f888 	bl	8001710 <HAL_GetTick>
 8002600:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	e00b      	b.n	800261e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7ff f883 	bl	8001710 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e23c      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 800261e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002622:	2202      	movs	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800264c:	601a      	str	r2, [r3, #0]
  return result;
 800264e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0x9f2>
 8002668:	4b95      	ldr	r3, [pc, #596]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	e00d      	b.n	800268a <HAL_RCC_OscConfig+0xa0e>
 800266e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800268e:	2102      	movs	r1, #2
 8002690:	6011      	str	r1, [r2, #0]
 8002692:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fa92 f1a2 	rbit	r1, r2
 800269c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026a0:	6011      	str	r1, [r2, #0]
  return result;
 80026a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f002 021f 	and.w	r2, r2, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1a0      	bne.n	8002606 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026c4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4b7c      	ldr	r3, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a7b      	ldr	r2, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 81d9 	beq.w	8002a96 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	f000 81a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 811e 	bne.w	800293a <HAL_RCC_OscConfig+0xcbe>
 80026fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002702:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800271c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	461a      	mov	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe ffec 	bl	8001710 <HAL_GetTick>
 8002738:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273c:	e009      	b.n	8002752 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe ffe7 	bl	8001710 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1a2      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8002752:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0xb10>
 8002786:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e01b      	b.n	80027c4 <HAL_RCC_OscConfig+0xb48>
 800278c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	fa92 f1a2 	rbit	r1, r2
 80027d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027dc:	6011      	str	r1, [r2, #0]
  return result;
 80027de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f002 021f 	and.w	r2, r2, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d19e      	bne.n	800273e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f023 020f 	bic.w	r2, r3, #15
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	492c      	ldr	r1, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 8002810:	4313      	orrs	r3, r2
 8002812:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a19      	ldr	r1, [r3, #32]
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	430b      	orrs	r3, r1
 800282a:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002848:	601a      	str	r2, [r3, #0]
  return result;
 800284a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800284e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800285a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	461a      	mov	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe ff53 	bl	8001710 <HAL_GetTick>
 800286a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286e:	e009      	b.n	8002884 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe ff4e 	bl	8001710 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e109      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 8002884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800288c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	fa93 f2a3 	rbit	r2, r3
 8002898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800289c:	601a      	str	r2, [r3, #0]
  return result;
 800289e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0xc48>
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <HAL_RCC_OscConfig+0xc44>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	e01e      	b.n	80028fc <HAL_RCC_OscConfig+0xc80>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0xe28>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002914:	6011      	str	r1, [r2, #0]
  return result;
 8002916:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d09b      	beq.n	8002870 <HAL_RCC_OscConfig+0xbf4>
 8002938:	e0ad      	b.n	8002a96 <HAL_RCC_OscConfig+0xe1a>
 800293a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800293e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002952:	601a      	str	r2, [r3, #0]
  return result;
 8002954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002958:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	461a      	mov	r2, r3
 800296c:	2300      	movs	r3, #0
 800296e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fece 	bl	8001710 <HAL_GetTick>
 8002974:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	e009      	b.n	800298e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fec9 	bl	8001710 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e084      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
 800298e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029a6:	601a      	str	r2, [r3, #0]
  return result;
 80029a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_OscConfig+0xd4c>
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_RCC_OscConfig+0xe28>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd84>
 80029c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f107 0320 	add.w	r3, r7, #32
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f107 0318 	add.w	r3, r7, #24
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0xe28>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f107 0214 	add.w	r2, r7, #20
 8002a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a08:	6011      	str	r1, [r2, #0]
 8002a0a:	f107 0214 	add.w	r2, r7, #20
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	fa92 f1a2 	rbit	r1, r2
 8002a14:	f107 0210 	add.w	r2, r7, #16
 8002a18:	6011      	str	r1, [r2, #0]
  return result;
 8002a1a:	f107 0210 	add.w	r2, r7, #16
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f042 0220 	orr.w	r2, r2, #32
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f002 021f 	and.w	r2, r2, #31
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d19e      	bne.n	800297a <HAL_RCC_OscConfig+0xcfe>
 8002a3c:	e02b      	b.n	8002a96 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e025      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0xe28>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_OscConfig+0xe28>)
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a60:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d111      	bne.n	8002a92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d108      	bne.n	8002a92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b09e      	sub	sp, #120	; 0x78
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e162      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b90      	ldr	r3, [pc, #576]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b8d      	ldr	r3, [pc, #564]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	498b      	ldr	r1, [pc, #556]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e14a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b82      	ldr	r3, [pc, #520]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	497f      	ldr	r1, [pc, #508]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80dc 	beq.w	8002cd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d13c      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xf6>
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xa6>
 8002b48:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	e00f      	b.n	8002b6e <HAL_RCC_ClockConfig+0xc6>
 8002b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	663b      	str	r3, [r7, #96]	; 0x60
 8002b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b72:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d17b      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0f3      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d13c      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x178>
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x128>
 8002bca:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e00f      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
 8002bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
 8002be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf8:	fa92 f2a2 	rbit	r2, r2
 8002bfc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d13a      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b2      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
 8002c20:	2302      	movs	r3, #2
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e00d      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1bc>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2202      	movs	r2, #2
 8002c66:	61ba      	str	r2, [r7, #24]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	617a      	str	r2, [r7, #20]
  return result;
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e079      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	491a      	ldr	r1, [pc, #104]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fd34 	bl	8001710 <HAL_GetTick>
 8002ca8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fd30 	bl	8001710 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e061      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d214      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4906      	ldr	r1, [pc, #24]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_ClockConfig+0x2de>
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	491a      	ldr	r1, [pc, #104]	; (8002d90 <HAL_RCC_ClockConfig+0x2e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x2e8>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4912      	ldr	r1, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x2e8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d4a:	f000 f829 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4601      	mov	r1, r0
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_ClockConfig+0x2e8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d58:	22f0      	movs	r2, #240	; 0xf0
 8002d5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	fa92 f2a2 	rbit	r2, r2
 8002d62:	60fa      	str	r2, [r7, #12]
  return result;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	40d3      	lsrs	r3, r2
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x2ec>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	fa21 f303 	lsr.w	r3, r1, r3
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <HAL_RCC_ClockConfig+0x2f0>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCC_ClockConfig+0x2f4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fc82 	bl	8001688 <HAL_InitTick>
  
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3778      	adds	r7, #120	; 0x78
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08003ad4 	.word	0x08003ad4
 8002d98:	20000004 	.word	0x20000004
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b08b      	sub	sp, #44	; 0x2c
 8002da4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dce:	e03f      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dd2:	623b      	str	r3, [r7, #32]
      break;
 8002dd4:	e03f      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ddc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002de0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	fa92 f2a2 	rbit	r2, r2
 8002de8:	607a      	str	r2, [r7, #4]
  return result;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	40d3      	lsrs	r3, r2
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	220f      	movs	r2, #15
 8002e04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	fa92 f2a2 	rbit	r2, r2
 8002e0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	40d3      	lsrs	r3, r2
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e28:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e007      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	623b      	str	r3, [r7, #32]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e52:	623b      	str	r3, [r7, #32]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	372c      	adds	r7, #44	; 0x2c
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40021000 	.word	0x40021000
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	08003aec 	.word	0x08003aec
 8002e70:	08003afc 	.word	0x08003afc

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e92:	f7ff ffef 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e96:	4601      	mov	r1, r0
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ea4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	fa92 f2a2 	rbit	r2, r2
 8002eac:	603a      	str	r2, [r7, #0]
  return result;
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	40d3      	lsrs	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08003ae4 	.word	0x08003ae4

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ed6:	f7ff ffcd 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002eda:	4601      	mov	r1, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ee4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ee8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	603a      	str	r2, [r7, #0]
  return result;
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	40d3      	lsrs	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08003ae4 	.word	0x08003ae4

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b092      	sub	sp, #72	; 0x48
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80d4 	beq.w	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f38:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10e      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b45      	ldr	r3, [pc, #276]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a41      	ldr	r2, [pc, #260]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fbc9 	bl	8001710 <HAL_GetTick>
 8002f7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fbc5 	bl	8001710 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1d6      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8084 	beq.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d07c      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	461a      	mov	r2, r3
 800300e:	2300      	movs	r3, #0
 8003010:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04b      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fb75 	bl	8001710 <HAL_GetTick>
 8003026:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fb71 	bl	8001710 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e180      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003040:	2302      	movs	r3, #2
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
 800304c:	2302      	movs	r3, #2
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	61fb      	str	r3, [r7, #28]
  return result;
 8003058:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d108      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800306e:	4b01      	ldr	r3, [pc, #4]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	e00d      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	10908100 	.word	0x10908100
 8003080:	2302      	movs	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	4ba0      	ldr	r3, [pc, #640]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2202      	movs	r2, #2
 8003092:	613a      	str	r2, [r7, #16]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	fa92 f2a2 	rbit	r2, r2
 800309a:	60fa      	str	r2, [r7, #12]
  return result;
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	fab2 f282 	clz	r2, r2
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f002 021f 	and.w	r2, r2, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0b7      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030ba:	4b95      	ldr	r3, [pc, #596]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4992      	ldr	r1, [pc, #584]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4a8d      	ldr	r2, [pc, #564]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4985      	ldr	r1, [pc, #532]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	497e      	ldr	r1, [pc, #504]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003128:	4b79      	ldr	r3, [pc, #484]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4976      	ldr	r1, [pc, #472]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f023 0210 	bic.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	496f      	ldr	r1, [pc, #444]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	4967      	ldr	r1, [pc, #412]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f023 0220 	bic.w	r2, r3, #32
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4960      	ldr	r1, [pc, #384]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4958      	ldr	r1, [pc, #352]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4951      	ldr	r1, [pc, #324]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4949      	ldr	r1, [pc, #292]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4942      	ldr	r1, [pc, #264]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	493a      	ldr	r1, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4933      	ldr	r1, [pc, #204]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	492b      	ldr	r1, [pc, #172]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003272:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4924      	ldr	r1, [pc, #144]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	491c      	ldr	r1, [pc, #112]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	4915      	ldr	r1, [pc, #84]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	490d      	ldr	r1, [pc, #52]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	4906      	ldr	r1, [pc, #24]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331c:	490b      	ldr	r1, [pc, #44]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800331e:	4313      	orrs	r3, r2
 8003320:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800333c:	4313      	orrs	r3, r2
 800333e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3748      	adds	r7, #72	; 0x48
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e040      	b.n	80033e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe f8ca 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f82c 	bl	80033ec <UART_SetConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e022      	b.n	80033e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9f4 	bl	8003794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa7b 	bl	80038d8 <UART_CheckIdleState>
 80033e2:	4603      	mov	r3, r0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4baa      	ldr	r3, [pc, #680]	; (80036c0 <UART_SetConfig+0x2d4>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	430b      	orrs	r3, r1
 8003422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a98      	ldr	r2, [pc, #608]	; (80036c4 <UART_SetConfig+0x2d8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d121      	bne.n	80034ac <UART_SetConfig+0xc0>
 8003468:	4b97      	ldr	r3, [pc, #604]	; (80036c8 <UART_SetConfig+0x2dc>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d817      	bhi.n	80034a4 <UART_SetConfig+0xb8>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0x90>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003499 	.word	0x08003499
 8003484:	0800349f 	.word	0x0800349f
 8003488:	08003493 	.word	0x08003493
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e0b2      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003492:	2302      	movs	r3, #2
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e0af      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003498:	2304      	movs	r3, #4
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0ac      	b.n	80035f8 <UART_SetConfig+0x20c>
 800349e:	2308      	movs	r3, #8
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e0a9      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034a4:	2310      	movs	r3, #16
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	bf00      	nop
 80034aa:	e0a5      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a86      	ldr	r2, [pc, #536]	; (80036cc <UART_SetConfig+0x2e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d123      	bne.n	80034fe <UART_SetConfig+0x112>
 80034b6:	4b84      	ldr	r3, [pc, #528]	; (80036c8 <UART_SetConfig+0x2dc>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d012      	beq.n	80034ea <UART_SetConfig+0xfe>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d802      	bhi.n	80034d0 <UART_SetConfig+0xe4>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <UART_SetConfig+0xf2>
 80034ce:	e012      	b.n	80034f6 <UART_SetConfig+0x10a>
 80034d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d4:	d00c      	beq.n	80034f0 <UART_SetConfig+0x104>
 80034d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034da:	d003      	beq.n	80034e4 <UART_SetConfig+0xf8>
 80034dc:	e00b      	b.n	80034f6 <UART_SetConfig+0x10a>
 80034de:	2300      	movs	r3, #0
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e089      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e086      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034ea:	2304      	movs	r3, #4
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e083      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034f0:	2308      	movs	r3, #8
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e080      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034f6:	2310      	movs	r3, #16
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	bf00      	nop
 80034fc:	e07c      	b.n	80035f8 <UART_SetConfig+0x20c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a73      	ldr	r2, [pc, #460]	; (80036d0 <UART_SetConfig+0x2e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d123      	bne.n	8003550 <UART_SetConfig+0x164>
 8003508:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <UART_SetConfig+0x2dc>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003514:	d012      	beq.n	800353c <UART_SetConfig+0x150>
 8003516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351a:	d802      	bhi.n	8003522 <UART_SetConfig+0x136>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <UART_SetConfig+0x144>
 8003520:	e012      	b.n	8003548 <UART_SetConfig+0x15c>
 8003522:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003526:	d00c      	beq.n	8003542 <UART_SetConfig+0x156>
 8003528:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800352c:	d003      	beq.n	8003536 <UART_SetConfig+0x14a>
 800352e:	e00b      	b.n	8003548 <UART_SetConfig+0x15c>
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e060      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e05d      	b.n	80035f8 <UART_SetConfig+0x20c>
 800353c:	2304      	movs	r3, #4
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e05a      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003542:	2308      	movs	r3, #8
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e057      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	bf00      	nop
 800354e:	e053      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a5f      	ldr	r2, [pc, #380]	; (80036d4 <UART_SetConfig+0x2e8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d123      	bne.n	80035a2 <UART_SetConfig+0x1b6>
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <UART_SetConfig+0x2dc>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003566:	d012      	beq.n	800358e <UART_SetConfig+0x1a2>
 8003568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356c:	d802      	bhi.n	8003574 <UART_SetConfig+0x188>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <UART_SetConfig+0x196>
 8003572:	e012      	b.n	800359a <UART_SetConfig+0x1ae>
 8003574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003578:	d00c      	beq.n	8003594 <UART_SetConfig+0x1a8>
 800357a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800357e:	d003      	beq.n	8003588 <UART_SetConfig+0x19c>
 8003580:	e00b      	b.n	800359a <UART_SetConfig+0x1ae>
 8003582:	2300      	movs	r3, #0
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e037      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003588:	2302      	movs	r3, #2
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e034      	b.n	80035f8 <UART_SetConfig+0x20c>
 800358e:	2304      	movs	r3, #4
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e031      	b.n	80035f8 <UART_SetConfig+0x20c>
 8003594:	2308      	movs	r3, #8
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e02e      	b.n	80035f8 <UART_SetConfig+0x20c>
 800359a:	2310      	movs	r3, #16
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	bf00      	nop
 80035a0:	e02a      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <UART_SetConfig+0x2ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d123      	bne.n	80035f4 <UART_SetConfig+0x208>
 80035ac:	4b46      	ldr	r3, [pc, #280]	; (80036c8 <UART_SetConfig+0x2dc>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b8:	d012      	beq.n	80035e0 <UART_SetConfig+0x1f4>
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035be:	d802      	bhi.n	80035c6 <UART_SetConfig+0x1da>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <UART_SetConfig+0x1e8>
 80035c4:	e012      	b.n	80035ec <UART_SetConfig+0x200>
 80035c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ca:	d00c      	beq.n	80035e6 <UART_SetConfig+0x1fa>
 80035cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d0:	d003      	beq.n	80035da <UART_SetConfig+0x1ee>
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x200>
 80035d4:	2300      	movs	r3, #0
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e00e      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e00b      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035e0:	2304      	movs	r3, #4
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e008      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035e6:	2308      	movs	r3, #8
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e005      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035ec:	2310      	movs	r3, #16
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	bf00      	nop
 80035f2:	e001      	b.n	80035f8 <UART_SetConfig+0x20c>
 80035f4:	2310      	movs	r3, #16
 80035f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003600:	d16e      	bne.n	80036e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d828      	bhi.n	800365a <UART_SetConfig+0x26e>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x224>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003635 	.word	0x08003635
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003645 	.word	0x08003645
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800364b 	.word	0x0800364b
 8003624:	0800365b 	.word	0x0800365b
 8003628:	0800365b 	.word	0x0800365b
 800362c:	0800365b 	.word	0x0800365b
 8003630:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7ff fc2a 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8003638:	61b8      	str	r0, [r7, #24]
        break;
 800363a:	e013      	b.n	8003664 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7ff fc48 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003640:	61b8      	str	r0, [r7, #24]
        break;
 8003642:	e00f      	b.n	8003664 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <UART_SetConfig+0x2f0>)
 8003646:	61bb      	str	r3, [r7, #24]
        break;
 8003648:	e00c      	b.n	8003664 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7ff fba9 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 800364e:	61b8      	str	r0, [r7, #24]
        break;
 8003650:	e008      	b.n	8003664 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003656:	61bb      	str	r3, [r7, #24]
        break;
 8003658:	e004      	b.n	8003664 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	77bb      	strb	r3, [r7, #30]
        break;
 8003662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8086 	beq.w	8003778 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	005a      	lsls	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	b29b      	uxth	r3, r3
 8003682:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d916      	bls.n	80036b8 <UART_SetConfig+0x2cc>
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d212      	bcs.n	80036b8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	89fa      	ldrh	r2, [r7, #14]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e05f      	b.n	8003778 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	77bb      	strb	r3, [r7, #30]
 80036bc:	e05c      	b.n	8003778 <UART_SetConfig+0x38c>
 80036be:	bf00      	nop
 80036c0:	efff69f3 	.word	0xefff69f3
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40004400 	.word	0x40004400
 80036d0:	40004800 	.word	0x40004800
 80036d4:	40004c00 	.word	0x40004c00
 80036d8:	40005000 	.word	0x40005000
 80036dc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d827      	bhi.n	8003736 <UART_SetConfig+0x34a>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x300>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003737 	.word	0x08003737
 80036fc:	08003727 	.word	0x08003727
 8003700:	08003737 	.word	0x08003737
 8003704:	08003737 	.word	0x08003737
 8003708:	08003737 	.word	0x08003737
 800370c:	0800372f 	.word	0x0800372f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7ff fbbc 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8003714:	61b8      	str	r0, [r7, #24]
        break;
 8003716:	e013      	b.n	8003740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7ff fbda 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 800371c:	61b8      	str	r0, [r7, #24]
        break;
 800371e:	e00f      	b.n	8003740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <UART_SetConfig+0x3a4>)
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e00c      	b.n	8003740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003726:	f7ff fb3b 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 800372a:	61b8      	str	r0, [r7, #24]
        break;
 800372c:	e008      	b.n	8003740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e004      	b.n	8003740 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77bb      	strb	r3, [r7, #30]
        break;
 800373e:	bf00      	nop
    }

    if (pclk != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	085a      	lsrs	r2, r3, #1
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	441a      	add	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	b29b      	uxth	r3, r3
 800375a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	d908      	bls.n	8003774 <UART_SetConfig+0x388>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d204      	bcs.n	8003774 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e001      	b.n	8003778 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003784:	7fbb      	ldrb	r3, [r7, #30]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	007a1200 	.word	0x007a1200

08003794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d10a      	bne.n	80038aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fd ff12 	bl	8001710 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d10e      	bne.n	800391a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f82d 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e023      	b.n	8003962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d10e      	bne.n	8003946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f817 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00d      	b.n	8003962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	e05e      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d05a      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fd fec4 	bl	8001710 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <UART_WaitOnFlagUntilTimeout+0x30>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11b      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e043      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02c      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d124      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e00f      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d091      	beq.n	800397c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <__libc_init_array>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	4e0d      	ldr	r6, [pc, #52]	; (8003a9c <__libc_init_array+0x38>)
 8003a68:	4c0d      	ldr	r4, [pc, #52]	; (8003aa0 <__libc_init_array+0x3c>)
 8003a6a:	1ba4      	subs	r4, r4, r6
 8003a6c:	10a4      	asrs	r4, r4, #2
 8003a6e:	2500      	movs	r5, #0
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d109      	bne.n	8003a88 <__libc_init_array+0x24>
 8003a74:	4e0b      	ldr	r6, [pc, #44]	; (8003aa4 <__libc_init_array+0x40>)
 8003a76:	4c0c      	ldr	r4, [pc, #48]	; (8003aa8 <__libc_init_array+0x44>)
 8003a78:	f000 f820 	bl	8003abc <_init>
 8003a7c:	1ba4      	subs	r4, r4, r6
 8003a7e:	10a4      	asrs	r4, r4, #2
 8003a80:	2500      	movs	r5, #0
 8003a82:	42a5      	cmp	r5, r4
 8003a84:	d105      	bne.n	8003a92 <__libc_init_array+0x2e>
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8c:	4798      	blx	r3
 8003a8e:	3501      	adds	r5, #1
 8003a90:	e7ee      	b.n	8003a70 <__libc_init_array+0xc>
 8003a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a96:	4798      	blx	r3
 8003a98:	3501      	adds	r5, #1
 8003a9a:	e7f2      	b.n	8003a82 <__libc_init_array+0x1e>
 8003a9c:	08003b0c 	.word	0x08003b0c
 8003aa0:	08003b0c 	.word	0x08003b0c
 8003aa4:	08003b0c 	.word	0x08003b0c
 8003aa8:	08003b10 	.word	0x08003b10

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <_init>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr

08003ac8 <_fini>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr
