
RobotSwarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e0  080049e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080049e0  080049e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e0  080049e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08004a5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004a5c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab41  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001812  00000000  00000000  0002abe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d86  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008145  00000000  00000000  0004e2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4f4  00000000  00000000  000563fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001218ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  0012196c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004954 	.word	0x08004954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004954 	.word	0x08004954

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <main>:

static enum carStates currentState = DRIVING;
static enum carStates prevState = STOPPED;

int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b52:	f000 ff83 	bl	8001a5c <HAL_Init>
  SystemClock_Config();
 8000b56:	f000 fcc9 	bl	80014ec <SystemClock_Config>
  MX_GPIO_Init();
 8000b5a:	f000 fd93 	bl	8001684 <MX_GPIO_Init>

  pinSetup();
 8000b5e:	f000 f8a6 	bl	8000cae <pinSetup>
  timer2Setup();
 8000b62:	f000 f8cf 	bl	8000d04 <timer2Setup>
  timer2ChannelSetup();
 8000b66:	f000 fa9b 	bl	80010a0 <timer2ChannelSetup>
  timer4Setup();
 8000b6a:	f000 f8e7 	bl	8000d3c <timer4Setup>
  MX_TIM15_Init();
 8000b6e:	f000 f941 	bl	8000df4 <MX_TIM15_Init>
  TIM3_C1_Init();
 8000b72:	f000 fb53 	bl	800121c <TIM3_C1_Init>

  //uartSetPins();
  MX_SPI2_Init();
 8000b76:	f000 fd47 	bl	8001608 <MX_SPI2_Init>



  MX_USART2_UART_Init();
 8000b7a:	f000 fd15 	bl	80015a8 <MX_USART2_UART_Init>
  while (1)
  {
	  int distance = timespan / 58;
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <main+0x114>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a38      	ldr	r2, [pc, #224]	; (8000c64 <main+0x118>)
 8000b84:	fb82 1203 	smull	r1, r2, r2, r3
 8000b88:	441a      	add	r2, r3
 8000b8a:	1152      	asrs	r2, r2, #5
 8000b8c:	17db      	asrs	r3, r3, #31
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	  static int printCounter = 0;
	  if(HAL_GetTick() > 1000 * printCounter)
 8000b92:	f000 ffbd 	bl	8001b10 <HAL_GetTick>
 8000b96:	4601      	mov	r1, r0
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <main+0x11c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d915      	bls.n	8000bd4 <main+0x88>
	  {
		  char buffer[50];
		  sprintf(buffer, "%d\r\n", distance);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bac:	492f      	ldr	r1, [pc, #188]	; (8000c6c <main+0x120>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 faca 	bl	8004148 <siprintf>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
		  //sprintf(buffer, "%d\r\n", dutyCycleW1);
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb12 	bl	80001e0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	1d39      	adds	r1, r7, #4
 8000bc2:	2364      	movs	r3, #100	; 0x64
 8000bc4:	482a      	ldr	r0, [pc, #168]	; (8000c70 <main+0x124>)
 8000bc6:	f002 febc 	bl	8003942 <HAL_UART_Transmit>
		  printCounter++;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <main+0x11c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <main+0x11c>)
 8000bd2:	6013      	str	r3, [r2, #0]
	  }
	  switch(currentState)
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <main+0x128>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d009      	beq.n	8000bf0 <main+0xa4>
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d01d      	beq.n	8000c1c <main+0xd0>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d000      	beq.n	8000be6 <main+0x9a>
			  rotateVehicle(90);
			  //HAL_Delay(200);
		  }
		  break;
	  default:
		  break;
 8000be4:	e03a      	b.n	8000c5c <main+0x110>
		  drive(0);
 8000be6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8000c78 <main+0x12c>
 8000bea:	f000 f84b 	bl	8000c84 <drive>
		  break;
 8000bee:	e035      	b.n	8000c5c <main+0x110>
		  if(distance < 10)
 8000bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf2:	2b09      	cmp	r3, #9
 8000bf4:	dc03      	bgt.n	8000bfe <main+0xb2>
			  currentState = TURNING;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <main+0x128>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
		  break;
 8000bfc:	e02d      	b.n	8000c5a <main+0x10e>
		  } else if(prevState != currentState)
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <main+0x130>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <main+0x128>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d027      	beq.n	8000c5a <main+0x10e>
			  drive(0.4);
 8000c0a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000c80 <main+0x134>
 8000c0e:	f000 f839 	bl	8000c84 <drive>
			  prevState = currentState;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <main+0x128>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <main+0x130>)
 8000c18:	701a      	strb	r2, [r3, #0]
		  break;
 8000c1a:	e01e      	b.n	8000c5a <main+0x10e>
		  if(prevState != currentState)
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <main+0x130>)
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <main+0x128>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d00d      	beq.n	8000c44 <main+0xf8>
			  drive(0);
 8000c28:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000c78 <main+0x12c>
 8000c2c:	f000 f82a 	bl	8000c84 <drive>
			  int direction = HAL_GetTick() % 2;
 8000c30:	f000 ff6e 	bl	8001b10 <HAL_GetTick>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
			  prevState = currentState;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <main+0x128>)
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <main+0x130>)
 8000c42:	701a      	strb	r2, [r3, #0]
		  if(distance > 10)
 8000c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	dd03      	ble.n	8000c52 <main+0x106>
			  currentState = DRIVING;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <main+0x128>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		  break;
 8000c50:	e004      	b.n	8000c5c <main+0x110>
			  rotateVehicle(90);
 8000c52:	205a      	movs	r0, #90	; 0x5a
 8000c54:	f000 fa84 	bl	8001160 <rotateVehicle>
		  break;
 8000c58:	e000      	b.n	8000c5c <main+0x110>
		  break;
 8000c5a:	bf00      	nop
  {
 8000c5c:	e78f      	b.n	8000b7e <main+0x32>
 8000c5e:	bf00      	nop
 8000c60:	20000090 	.word	0x20000090
 8000c64:	8d3dcb09 	.word	0x8d3dcb09
 8000c68:	20000098 	.word	0x20000098
 8000c6c:	0800496c 	.word	0x0800496c
 8000c70:	20000134 	.word	0x20000134
 8000c74:	20000000 	.word	0x20000000
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	20000094 	.word	0x20000094
 8000c80:	3ecccccd 	.word	0x3ecccccd

08000c84 <drive>:
	  }
  }
}

static void drive(float power)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	setDutyCycleChannel1(-power);
 8000c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c92:	eef1 7a67 	vneg.f32	s15, s15
 8000c96:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9a:	f000 f971 	bl	8000f80 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 8000c9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ca2:	f000 f9b5 	bl	8001010 <setDutyCycleChannel2>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <pinSetup>:

static void pinSetup(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER1_1;
 8000cb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_0 | GPIO_MODER_MODER1_0);
 8000cc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cd4:	f023 0304 	bic.w	r3, r3, #4
 8000cd8:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL5_Msk | GPIO_AFRL_AFRL1_Msk);
 8000cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce4:	f023 13f0 	bic.w	r3, r3, #15728880	; 0xf000f0
 8000ce8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL5_Pos) | (1 << GPIO_AFRL_AFRL1_Pos);
 8000cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf4:	f043 1310 	orr.w	r3, r3, #1048592	; 0x100010
 8000cf8:	6213      	str	r3, [r2, #32]

}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <timer2Setup>:

static void timer2Setup(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <timer2Setup+0x34>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <timer2Setup+0x34>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 72 - 1;
 8000d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d18:	2247      	movs	r2, #71	; 0x47
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR_VALUE - 1;
 8000d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d20:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <timer4Setup>:

static void timer4Setup(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <timer4Setup+0xac>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <timer4Setup+0xac>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = 72 - 1;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <timer4Setup+0xb0>)
 8000d4e:	2247      	movs	r2, #71	; 0x47
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 50 - 1;
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <timer4Setup+0xb0>)
 8000d54:	2231      	movs	r2, #49	; 0x31
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CNT = 0;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <timer4Setup+0xb0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <timer4Setup+0xb0>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <timer4Setup+0xb0>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000d6c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <timer4Setup+0xb0>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <timer4Setup+0xb0>)
 8000d74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d78:	6193      	str	r3, [r2, #24]
	TIM4->CCR1 |= 0;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <timer4Setup+0xb0>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <timer4Setup+0xb0>)
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCER |= TIM_CCER_CC1E_Msk;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <timer4Setup+0xb0>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4a19      	ldr	r2, [pc, #100]	; (8000dec <timer4Setup+0xb0>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1P_Msk;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <timer4Setup+0xb0>)
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <timer4Setup+0xb0>)
 8000d94:	f023 0302 	bic.w	r3, r3, #2
 8000d98:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <timer4Setup+0xb4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <timer4Setup+0xb4>)
 8000da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6_0);
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <timer4Setup+0xb4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <timer4Setup+0xb4>)
 8000dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000db0:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL6_Msk);
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <timer4Setup+0xb4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <timer4Setup+0xb4>)
 8000db8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000dbc:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL6_Pos);
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <timer4Setup+0xb4>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <timer4Setup+0xb4>)
 8000dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	6213      	str	r3, [r2, #32]

	TIM4->CCR1 = 10 - 1;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <timer4Setup+0xb0>)
 8000dcc:	2209      	movs	r2, #9
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34

	TIM4->CR1 |= TIM_CR1_CEN;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <timer4Setup+0xb0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <timer4Setup+0xb0>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40000800 	.word	0x40000800
 8000df0:	48000400 	.word	0x48000400

08000df4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    //Pin setup rewrite
    GPIOB->MODER |= GPIO_MODER_MODER14_1;
 8000df8:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a5d      	ldr	r2, [pc, #372]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e02:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER14_0;
 8000e04:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a5a      	ldr	r2, [pc, #360]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR14_Msk;
 8000e10:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4a57      	ldr	r2, [pc, #348]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e16:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000e1a:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~GPIO_AFRH_AFRH6_Msk;
 8000e1c:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	4a54      	ldr	r2, [pc, #336]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e22:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e26:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (0x1 << GPIO_AFRH_AFRH6_Pos);
 8000e28:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4a51      	ldr	r2, [pc, #324]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e32:	6253      	str	r3, [r2, #36]	; 0x24

    GPIOB->MODER |= GPIO_MODER_MODER15_1;
 8000e34:	4b4f      	ldr	r3, [pc, #316]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a4e      	ldr	r2, [pc, #312]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER15_0;
 8000e40:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000e4a:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR15_Msk;
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e52:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e56:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~GPIO_AFRH_AFRH7_Msk;
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e62:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (0x1 << GPIO_AFRH_AFRH7_Pos);
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	4a42      	ldr	r2, [pc, #264]	; (8000f74 <MX_TIM15_Init+0x180>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	6253      	str	r3, [r2, #36]	; 0x24

    //Timer rewrite
    RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <MX_TIM15_Init+0x184>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <MX_TIM15_Init+0x184>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6193      	str	r3, [r2, #24]

    TIM15->PSC = 72 - 1;
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e7e:	2247      	movs	r2, #71	; 0x47
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
    TIM15->ARR = 1099 - 1;
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e84:	f240 424a 	movw	r2, #1098	; 0x44a
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM15->CCMR1 &= ~TIM_CCMR1_CC1S;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a3b      	ldr	r2, [pc, #236]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e90:	f023 0303 	bic.w	r3, r3, #3
 8000e94:	6193      	str	r3, [r2, #24]
    TIM15->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
    TIM15->CCMR1 &= ~TIM_CCMR1_IC1F;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a35      	ldr	r2, [pc, #212]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eac:	6193      	str	r3, [r2, #24]
    TIM15->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000eb4:	f023 030c 	bic.w	r3, r3, #12
 8000eb8:	6193      	str	r3, [r2, #24]
    TIM15->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1NP;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a2f      	ldr	r2, [pc, #188]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ec0:	f043 030a 	orr.w	r3, r3, #10
 8000ec4:	6213      	str	r3, [r2, #32]
    TIM15->CCER |= TIM_CCER_CC1E;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6213      	str	r3, [r2, #32]
    TIM15->DIER |= TIM_DIER_CC1IE;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	60d3      	str	r3, [r2, #12]
    TIM15->DIER |= TIM_DIER_CC1DE;	//DMA request
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee8:	60d3      	str	r3, [r2, #12]
    TIM15->DIER |= TIM_DIER_UIE;
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	60d3      	str	r3, [r2, #12]
    //TIM15->CR1 &= ~TIM_CR1_DIR;

	TIM15->CCMR1 &= ~TIM_CCMR1_CC2S;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f00:	6193      	str	r3, [r2, #24]
	TIM15->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6193      	str	r3, [r2, #24]
	TIM15->CCMR1 &= ~TIM_CCMR1_IC2F;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000f18:	6193      	str	r3, [r2, #24]
	TIM15->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f24:	6193      	str	r3, [r2, #24]
	TIM15->CCER |= TIM_CCER_CC2P | TIM_CCER_CC2NP;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f2c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f30:	6213      	str	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC2E;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	6213      	str	r3, [r2, #32]
	TIM15->DIER |= TIM_DIER_CC2IE;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2DE;	//DMA request
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f54:	60d3      	str	r3, [r2, #12]
	//TIM15->CR2 &= ~TIM_CR2_DIR;
	TIM15->CR1 |= TIM_CR1_CEN;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <MX_TIM15_Init+0x188>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2);
 8000f62:	2102      	movs	r1, #2
 8000f64:	2018      	movs	r0, #24
 8000f66:	f7ff fdc7 	bl	8000af8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f6a:	2018      	movs	r0, #24
 8000f6c:	f7ff fda6 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40014000 	.word	0x40014000

08000f80 <setDutyCycleChannel1>:

static void setDutyCycleChannel1(float power)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	dd03      	ble.n	8000fa4 <setDutyCycleChannel1+0x24>
 8000f9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	e00a      	b.n	8000fba <setDutyCycleChannel1+0x3a>
	else if(power < -1) power = -1;
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	d501      	bpl.n	8000fba <setDutyCycleChannel1+0x3a>
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <setDutyCycleChannel1+0x88>)
 8000fb8:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff facc 	bl	8000558 <__aeabi_f2d>
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <setDutyCycleChannel1+0x8c>)
 8000fc6:	f7ff fb1f 	bl	8000608 <__aeabi_dmul>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460c      	mov	r4, r1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	a30b      	add	r3, pc, #44	; (adr r3, 8001000 <setDutyCycleChannel1+0x80>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff f960 	bl	800029c <__adddf3>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd46 	bl	8000a7c <__aeabi_d2uiz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	f3af 8000 	nop.w
 8001000:	00000000 	.word	0x00000000
 8001004:	40977000 	.word	0x40977000
 8001008:	bf800000 	.word	0xbf800000
 800100c:	406b8000 	.word	0x406b8000

08001010 <setDutyCycleChannel2>:

static void setDutyCycleChannel2(float power)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 800101a:	edd7 7a01 	vldr	s15, [r7, #4]
 800101e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	dd03      	ble.n	8001034 <setDutyCycleChannel2+0x24>
 800102c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e00a      	b.n	800104a <setDutyCycleChannel2+0x3a>
	else if(power < -1) power = -1;
 8001034:	edd7 7a01 	vldr	s15, [r7, #4]
 8001038:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	d501      	bpl.n	800104a <setDutyCycleChannel2+0x3a>
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <setDutyCycleChannel2+0x88>)
 8001048:	607b      	str	r3, [r7, #4]
	TIM2->CCR2 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fa84 	bl	8000558 <__aeabi_f2d>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <setDutyCycleChannel2+0x8c>)
 8001056:	f7ff fad7 	bl	8000608 <__aeabi_dmul>
 800105a:	4603      	mov	r3, r0
 800105c:	460c      	mov	r4, r1
 800105e:	4618      	mov	r0, r3
 8001060:	4621      	mov	r1, r4
 8001062:	a30b      	add	r3, pc, #44	; (adr r3, 8001090 <setDutyCycleChannel2+0x80>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff f918 	bl	800029c <__adddf3>
 800106c:	4603      	mov	r3, r0
 800106e:	460c      	mov	r4, r1
 8001070:	461a      	mov	r2, r3
 8001072:	4623      	mov	r3, r4
 8001074:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fcfe 	bl	8000a7c <__aeabi_d2uiz>
 8001080:	4603      	mov	r3, r0
 8001082:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	00000000 	.word	0x00000000
 8001094:	40977000 	.word	0x40977000
 8001098:	bf800000 	.word	0xbf800000
 800109c:	406b8000 	.word	0x406b8000

080010a0 <timer2ChannelSetup>:

static void timer2ChannelSetup(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	//Configure channel 1
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 80010b6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010c6:	6193      	str	r3, [r2, #24]
	TIM2->CCR1 |= 0;
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E_Msk;
 80010d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 80010e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	f023 0302 	bic.w	r3, r3, #2
 80010f2:	6213      	str	r3, [r2, #32]

	//Configure channel 2
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S_Msk | TIM_CCMR1_OC2M_Msk | TIM_CCMR1_OC2PE_Msk) ;
 80010f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001102:	f423 43f6 	bic.w	r3, r3, #31488	; 0x7b00
 8001106:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001116:	6193      	str	r3, [r2, #24]
	TIM2->CCR2 |= 0;
 8001118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001122:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E_Msk;
 8001124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2P_Msk;
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	f023 0320 	bic.w	r3, r3, #32
 8001142:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8001144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <rotateVehicle>:

static void rotateVehicle(int rotationDegrees)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

	//if(rotationDegrees == 0) return;
	int delay;
	float power;
	if(rotationDegrees == 0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d11e      	bne.n	80011ac <rotateVehicle+0x4c>
	{
		delay = -(20 + 13.67 * rotationDegrees);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff f9e0 	bl	8000534 <__aeabi_i2d>
 8001174:	a324      	add	r3, pc, #144	; (adr r3, 8001208 <rotateVehicle+0xa8>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <rotateVehicle+0xb0>)
 800118c:	f7ff f886 	bl	800029c <__adddf3>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff fc45 	bl	8000a2c <__aeabi_d2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	60fb      	str	r3, [r7, #12]
		power = -0.3;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <rotateVehicle+0xb4>)
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	e01a      	b.n	80011e2 <rotateVehicle+0x82>
	} else
	{
		delay = 20 + 13.67 * rotationDegrees;
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff f9c1 	bl	8000534 <__aeabi_i2d>
 80011b2:	a315      	add	r3, pc, #84	; (adr r3, 8001208 <rotateVehicle+0xa8>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <rotateVehicle+0xb0>)
 80011ca:	f7ff f867 	bl	800029c <__adddf3>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	4618      	mov	r0, r3
 80011d4:	4621      	mov	r1, r4
 80011d6:	f7ff fc29 	bl	8000a2c <__aeabi_d2iz>
 80011da:	4603      	mov	r3, r0
 80011dc:	60fb      	str	r3, [r7, #12]
		power = 0.3;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <rotateVehicle+0xb8>)
 80011e0:	60bb      	str	r3, [r7, #8]
	}
	setDutyCycleChannel1(power);
 80011e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80011e6:	f7ff fecb 	bl	8000f80 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 80011ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80011ee:	f7ff ff0f 	bl	8001010 <setDutyCycleChannel2>
	HAL_Delay(delay);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc97 	bl	8001b28 <HAL_Delay>
	//setDutyCycleChannel1(0);
	//setDutyCycleChannel2(0);
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	3d70a3d7 	.word	0x3d70a3d7
 800120c:	402b570a 	.word	0x402b570a
 8001210:	40340000 	.word	0x40340000
 8001214:	be99999a 	.word	0xbe99999a
 8001218:	3e99999a 	.word	0x3e99999a

0800121c <TIM3_C1_Init>:

// CONFIGURE TIM4 FOR RECEIVING INPUT SIGNAL
void TIM3_C1_Init(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    //Pin setup rewrite
    GPIOB->MODER |= GPIO_MODER_MODER4_1;
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <TIM3_C1_Init+0xf0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a39      	ldr	r2, [pc, #228]	; (800130c <TIM3_C1_Init+0xf0>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER4_0;
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <TIM3_C1_Init+0xf0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a36      	ldr	r2, [pc, #216]	; (800130c <TIM3_C1_Init+0xf0>)
 8001232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR4_Msk;
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <TIM3_C1_Init+0xf0>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a33      	ldr	r2, [pc, #204]	; (800130c <TIM3_C1_Init+0xf0>)
 800123e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001242:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL4_Msk;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <TIM3_C1_Init+0xf0>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a30      	ldr	r2, [pc, #192]	; (800130c <TIM3_C1_Init+0xf0>)
 800124a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800124e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL4_Pos);
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <TIM3_C1_Init+0xf0>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <TIM3_C1_Init+0xf0>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	6213      	str	r3, [r2, #32]

    //Timer rewrite
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <TIM3_C1_Init+0xf4>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <TIM3_C1_Init+0xf4>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 72 - 1;
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <TIM3_C1_Init+0xf8>)
 800126a:	2247      	movs	r2, #71	; 0x47
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 65536 - 1;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <TIM3_C1_Init+0xf8>)
 800127c:	f023 0303 	bic.w	r3, r3, #3
 8001280:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1F;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <TIM3_C1_Init+0xf8>)
 8001294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001298:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <TIM3_C1_Init+0xf8>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012a0:	f023 030c 	bic.w	r3, r3, #12
 80012a4:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1NP;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012ac:	f043 030a 	orr.w	r3, r3, #10
 80012b0:	6213      	str	r3, [r2, #32]
    TIM3->CCER |= TIM_CCER_CC1E;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6213      	str	r3, [r2, #32]
    TIM3->DIER |= TIM_DIER_CC1IE;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_CC1DE;	//DMA request
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_UIE;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 &= ~TIM_CR1_DIR;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012e8:	f023 0310 	bic.w	r3, r3, #16
 80012ec:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <TIM3_C1_Init+0xf8>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 1);
 80012fa:	2101      	movs	r1, #1
 80012fc:	201d      	movs	r0, #29
 80012fe:	f7ff fbfb 	bl	8000af8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8001302:	201d      	movs	r0, #29
 8001304:	f7ff fbda 	bl	8000abc <__NVIC_EnableIRQ>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	48000400 	.word	0x48000400
 8001310:	40021000 	.word	0x40021000
 8001314:	40000400 	.word	0x40000400

08001318 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	static int lineHigh = 0;
	static int overflow = 0;
	static int newcounter = 0;
	// Check the update event flag
    if ((TIM3->SR & TIM_SR_UIF) != 0)
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <TIM3_IRQHandler+0x88>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <TIM3_IRQHandler+0x28>
    {
        overflow++;                        // if UIF = 1, increment overflow counter
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <TIM3_IRQHandler+0x8c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <TIM3_IRQHandler+0x8c>)
 8001330:	6013      	str	r3, [r2, #0]
        TIM3->SR &= ~TIM_SR_UIF;           // clear UIF
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <TIM3_IRQHandler+0x88>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <TIM3_IRQHandler+0x88>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6113      	str	r3, [r2, #16]
 800133e:	e024      	b.n	800138a <TIM3_IRQHandler+0x72>
    }

    // Check capture event flag
    else if ((TIM3->SR & TIM_SR_CC1IF) != 0)
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <TIM3_IRQHandler+0x88>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01e      	beq.n	800138a <TIM3_IRQHandler+0x72>
    {
        if(lineHigh)
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <TIM3_IRQHandler+0x90>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00f      	beq.n	8001374 <TIM3_IRQHandler+0x5c>
        {
        	timespan = TIM3->CCR1 - newcounter + 65536 * overflow;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <TIM3_IRQHandler+0x88>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <TIM3_IRQHandler+0x94>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <TIM3_IRQHandler+0x8c>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	0412      	lsls	r2, r2, #16
 8001364:	4413      	add	r3, r2
 8001366:	461a      	mov	r2, r3
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <TIM3_IRQHandler+0x98>)
 800136a:	601a      	str	r2, [r3, #0]
        	lineHigh = 0;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <TIM3_IRQHandler+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e00a      	b.n	800138a <TIM3_IRQHandler+0x72>
        } else
        {
        	overflow = 0;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <TIM3_IRQHandler+0x8c>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
        	newcounter = TIM3->CCR1;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <TIM3_IRQHandler+0x88>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	461a      	mov	r2, r3
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <TIM3_IRQHandler+0x94>)
 8001382:	601a      	str	r2, [r3, #0]
        	lineHigh = 1;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <TIM3_IRQHandler+0x90>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
        }
    }
    EXTI->PR |= EXTI_PR_PIF3;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <TIM3_IRQHandler+0x9c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <TIM3_IRQHandler+0x9c>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6153      	str	r3, [r2, #20]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40000400 	.word	0x40000400
 80013a4:	2000009c 	.word	0x2000009c
 80013a8:	200000a0 	.word	0x200000a0
 80013ac:	200000a4 	.word	0x200000a4
 80013b0:	20000090 	.word	0x20000090
 80013b4:	40010400 	.word	0x40010400

080013b8 <TIM1_BRK_TIM15_IRQHandler>:



void TIM15_IRQHandler(void){
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	static int newcounterW1 = 0;
	static int lineHighW2 = 0;
	static int overflowW2 = 0;
	static int newcounterW2 = 0;
	// Check the update event flag
    if ((TIM15->SR & TIM_SR_UIF) != 0)
 80013bc:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d010      	beq.n	80013ea <TIM1_BRK_TIM15_IRQHandler+0x32>
    {
    	overflowW1++;                        // if UIF = 1, increment overflow counter
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <TIM1_BRK_TIM15_IRQHandler+0x10c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <TIM1_BRK_TIM15_IRQHandler+0x10c>)
 80013d0:	6013      	str	r3, [r2, #0]
    	overflowW2++;
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <TIM1_BRK_TIM15_IRQHandler+0x110>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <TIM1_BRK_TIM15_IRQHandler+0x110>)
 80013da:	6013      	str	r3, [r2, #0]
        TIM15->SR &= ~TIM_SR_UIF;           // clear UIF
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a37      	ldr	r2, [pc, #220]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6113      	str	r3, [r2, #16]
 80013e8:	e05e      	b.n	80014a8 <TIM1_BRK_TIM15_IRQHandler+0xf0>
    }

    // Check capture event flag
    else if ((TIM15->SR & TIM_SR_CC1IF) != 0)
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d029      	beq.n	800144a <TIM1_BRK_TIM15_IRQHandler+0x92>
    {
        if(lineHighW1)
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <TIM1_BRK_TIM15_IRQHandler+0x114>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d019      	beq.n	8001432 <TIM1_BRK_TIM15_IRQHandler+0x7a>
        {
        	dutyCycleW1 = 100 * (TIM15->CCR1 - newcounterW1 + 1099 * overflowW1) / 1099;
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <TIM1_BRK_TIM15_IRQHandler+0x118>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <TIM1_BRK_TIM15_IRQHandler+0x10c>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f240 414b 	movw	r1, #1099	; 0x44b
 8001410:	fb01 f202 	mul.w	r2, r1, r2
 8001414:	4413      	add	r3, r2
 8001416:	2264      	movs	r2, #100	; 0x64
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <TIM1_BRK_TIM15_IRQHandler+0x11c>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0a5b      	lsrs	r3, r3, #9
 8001424:	461a      	mov	r2, r3
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <TIM1_BRK_TIM15_IRQHandler+0x120>)
 8001428:	601a      	str	r2, [r3, #0]
        	lineHighW1 = 0;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <TIM1_BRK_TIM15_IRQHandler+0x114>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e03a      	b.n	80014a8 <TIM1_BRK_TIM15_IRQHandler+0xf0>
        } else
        {
        	lineHighW1 = 1;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <TIM1_BRK_TIM15_IRQHandler+0x114>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]
        	newcounterW1 = TIM15->CCR1;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	461a      	mov	r2, r3
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <TIM1_BRK_TIM15_IRQHandler+0x118>)
 8001440:	601a      	str	r2, [r3, #0]
        	overflowW1 = 0;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <TIM1_BRK_TIM15_IRQHandler+0x10c>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e02e      	b.n	80014a8 <TIM1_BRK_TIM15_IRQHandler+0xf0>
        }
    }
    else if ((TIM15->SR & TIM_SR_CC2IF) != 0)
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d028      	beq.n	80014a8 <TIM1_BRK_TIM15_IRQHandler+0xf0>
    {
        if(lineHighW2)
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <TIM1_BRK_TIM15_IRQHandler+0x124>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d019      	beq.n	8001492 <TIM1_BRK_TIM15_IRQHandler+0xda>
        {
        	dutyCycleW2 = 100 * (TIM15->CCR2 - newcounterW2 + 1099 * overflowW2) / 1099;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a1f      	ldr	r2, [pc, #124]	; (80014e0 <TIM1_BRK_TIM15_IRQHandler+0x128>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <TIM1_BRK_TIM15_IRQHandler+0x110>)
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	f240 414b 	movw	r1, #1099	; 0x44b
 8001470:	fb01 f202 	mul.w	r2, r1, r2
 8001474:	4413      	add	r3, r2
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <TIM1_BRK_TIM15_IRQHandler+0x11c>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0a5b      	lsrs	r3, r3, #9
 8001484:	461a      	mov	r2, r3
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <TIM1_BRK_TIM15_IRQHandler+0x12c>)
 8001488:	601a      	str	r2, [r3, #0]
        	lineHighW2 = 0;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <TIM1_BRK_TIM15_IRQHandler+0x124>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e00a      	b.n	80014a8 <TIM1_BRK_TIM15_IRQHandler+0xf0>
        } else
        {
        	lineHighW2 = 1;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <TIM1_BRK_TIM15_IRQHandler+0x124>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
        	newcounterW2 = TIM15->CCR2;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <TIM1_BRK_TIM15_IRQHandler+0x108>)
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	461a      	mov	r2, r3
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <TIM1_BRK_TIM15_IRQHandler+0x128>)
 80014a0:	601a      	str	r2, [r3, #0]
        	overflowW2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <TIM1_BRK_TIM15_IRQHandler+0x110>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
        }
    }
    EXTI->PR |= EXTI_PR_PIF15;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <TIM1_BRK_TIM15_IRQHandler+0x130>)
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <TIM1_BRK_TIM15_IRQHandler+0x130>)
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	6153      	str	r3, [r2, #20]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40014000 	.word	0x40014000
 80014c4:	200000a8 	.word	0x200000a8
 80014c8:	200000ac 	.word	0x200000ac
 80014cc:	200000b0 	.word	0x200000b0
 80014d0:	200000b4 	.word	0x200000b4
 80014d4:	7743c907 	.word	0x7743c907
 80014d8:	20000130 	.word	0x20000130
 80014dc:	200000b8 	.word	0x200000b8
 80014e0:	200000bc 	.word	0x200000bc
 80014e4:	200001b8 	.word	0x200001b8
 80014e8:	40010400 	.word	0x40010400

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0a6      	sub	sp, #152	; 0x98
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014f6:	2228      	movs	r2, #40	; 0x28
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fe1c 	bl	8004138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2258      	movs	r2, #88	; 0x58
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fe0e 	bl	8004138 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001538:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800153c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd96 	bl	800207c <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001556:	f000 f919 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001570:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f001 fc96 	bl	8002ea8 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001582:	f000 f903 	bl	800178c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001586:	2302      	movs	r3, #2
 8001588:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4618      	mov	r0, r3
 8001592:	f001 febf 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800159c:	f000 f8f6 	bl	800178c <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3798      	adds	r7, #152	; 0x98
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART2_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ec:	f002 f95b 	bl	80038a6 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 f8c9 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000134 	.word	0x20000134
 8001604:	40004400 	.word	0x40004400

08001608 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_SPI2_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_SPI2_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_SPI2_Init+0x74>)
 8001614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001618:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_SPI2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_SPI2_Init+0x74>)
 8001622:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001626:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_SPI2_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_SPI2_Init+0x74>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_SPI2_Init+0x74>)
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_SPI2_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_SPI2_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_SPI2_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_SPI2_Init+0x74>)
 8001656:	2207      	movs	r2, #7
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_SPI2_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_SPI2_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_SPI2_Init+0x74>)
 8001668:	f002 f872 	bl	8003750 <HAL_SPI_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 f88b 	bl	800178c <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000cc 	.word	0x200000cc
 8001680:	40003800 	.word	0x40003800

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <MX_GPIO_Init+0xfc>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b33      	ldr	r3, [pc, #204]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a32      	ldr	r2, [pc, #200]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <MX_GPIO_Init+0xfc>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f000 fca3 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_GPIO_Init+0x100>)
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	481b      	ldr	r0, [pc, #108]	; (8001788 <MX_GPIO_Init+0x104>)
 800171c:	f000 fb0c 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001720:	2320      	movs	r3, #32
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f000 fafd 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800173e:	2360      	movs	r3, #96	; 0x60
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 faee 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f000 fae1 	bl	8001d38 <HAL_GPIO_Init>

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	10210000 	.word	0x10210000
 8001788:	48000800 	.word	0x48000800

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001792:	e7fe      	b.n	8001792 <Error_Handler+0x6>

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x44>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_MspInit+0x44>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_MspInit+0x44>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_MspInit+0x44>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ca:	2007      	movs	r0, #7
 80017cc:	f000 fa80 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <HAL_SPI_MspInit+0xb8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d146      	bne.n	800188c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	6153      	str	r3, [r2, #20]
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_SPI_MspInit+0xbc>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001858:	2305      	movs	r3, #5
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <HAL_SPI_MspInit+0xc0>)
 8001864:	f000 fa68 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001868:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f000 fa56 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40003800 	.word	0x40003800
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_UART_MspInit+0x7c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d128      	bne.n	8001914 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f2:	230c      	movs	r3, #12
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f000 fa12 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004400 	.word	0x40004400
 8001920:	40021000 	.word	0x40021000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f8ba 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <_sbrk>:
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
 80019a8:	f002 fb9c 	bl	80040e4 <__errno>
 80019ac:	4602      	mov	r2, r0
 80019ae:	230c      	movs	r3, #12
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20010000 	.word	0x20010000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	200000c0 	.word	0x200000c0
 80019e0:	200001c8 	.word	0x200001c8

080019e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopForever+0x6>)
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopForever+0xa>)
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopForever+0xe>)
 8001a12:	2300      	movs	r3, #0
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:
 8001a16:	58d4      	ldr	r4, [r2, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:
 8001a1c:	18c4      	adds	r4, r0, r3
 8001a1e:	428c      	cmp	r4, r1
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopForever+0x12>)
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopForever+0x16>)
 8001a26:	2300      	movs	r3, #0
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
 8001a36:	f002 fb5b 	bl	80040f0 <__libc_init_array>
 8001a3a:	f7ff f887 	bl	8000b4c <main>

08001a3e <LoopForever>:
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
 8001a40:	20010000 	.word	0x20010000
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000074 	.word	0x20000074
 8001a4c:	080049e8 	.word	0x080049e8
 8001a50:	20000074 	.word	0x20000074
 8001a54:	200001c4 	.word	0x200001c4

08001a58 <ADC1_2_IRQHandler>:
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x28>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f92f 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fe8c 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f939 	bl	8001d1e <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f90f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	200001bc 	.word	0x200001bc

08001b10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200001bc 	.word	0x200001bc

08001b28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_Delay+0x40>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <__NVIC_SetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_SetPriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff47 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff5c 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb0 	bl	8001c8c <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e160      	b.n	800200a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8152 	beq.w	8002004 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d00b      	beq.n	8001d80 <HAL_GPIO_Init+0x48>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	2b11      	cmp	r3, #17
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b12      	cmp	r3, #18
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0xea>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d123      	bne.n	8001e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0203 	and.w	r2, r3, #3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80ac 	beq.w	8002004 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec4:	4a59      	ldr	r2, [pc, #356]	; (800202c <HAL_GPIO_Init+0x2f4>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eee:	d025      	beq.n	8001f3c <HAL_GPIO_Init+0x204>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d01f      	beq.n	8001f38 <HAL_GPIO_Init+0x200>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d019      	beq.n	8001f34 <HAL_GPIO_Init+0x1fc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1f8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x304>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1f4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x308>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1f0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001f20:	2306      	movs	r3, #6
 8001f22:	e00c      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f24:	2307      	movs	r3, #7
 8001f26:	e00a      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f28:	2305      	movs	r3, #5
 8001f2a:	e008      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4e:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_GPIO_Init+0x2f4>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001faa:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_GPIO_Init+0x310>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f ae97 	bne.w	8001d48 <HAL_GPIO_Init+0x10>
  }
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	48001400 	.word	0x48001400
 8002044:	48001800 	.word	0x48001800
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002068:	e002      	b.n	8002070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002082:	af00      	add	r7, sp, #0
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f000 bf01 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8160 	beq.w	8002366 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020a6:	4bae      	ldr	r3, [pc, #696]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d00c      	beq.n	80020cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b2:	4bab      	ldr	r3, [pc, #684]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d159      	bne.n	8002172 <HAL_RCC_OscConfig+0xf6>
 80020be:	4ba8      	ldr	r3, [pc, #672]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d152      	bne.n	8002172 <HAL_RCC_OscConfig+0xf6>
 80020cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_OscConfig+0x82>
 80020f8:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0xae>
 80020fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002116:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800211a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002126:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800212e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002132:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002136:	fa92 f2a2 	rbit	r2, r2
 800213a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800213e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8102 	beq.w	8002364 <HAL_RCC_OscConfig+0x2e8>
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80fc 	bne.w	8002364 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f000 be93 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x110>
 800217e:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e030      	b.n	80021ee <HAL_RCC_OscConfig+0x172>
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x134>
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01e      	b.n	80021ee <HAL_RCC_OscConfig+0x172>
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x15a>
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a64      	ldr	r2, [pc, #400]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x172>
 80021d6:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b5f      	ldr	r3, [pc, #380]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5e      	ldr	r2, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d059      	beq.n	80022ac <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fc8a 	bl	8001b10 <HAL_GetTick>
 80021fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002202:	f7ff fc85 	bl	8001b10 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d902      	bls.n	8002218 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	f000 be40 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800222c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0x1ce>
 8002244:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x1fa>
 800224a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800225e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002262:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002266:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800227e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800228a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ab      	beq.n	8002202 <HAL_RCC_OscConfig+0x186>
 80022aa:	e05c      	b.n	8002366 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc30 	bl	8001b10 <HAL_GetTick>
 80022b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b6:	f7ff fc2b 	bl	8001b10 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d902      	bls.n	80022cc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	f000 bde6 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
 80022cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80022e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_RCC_OscConfig+0x282>
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x2ae>
 80022fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002302:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002316:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800231a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_RCC_OscConfig+0x2e4>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800232e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002332:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002336:	fa92 f2a2 	rbit	r2, r2
 800233a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800233e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f042 0220 	orr.w	r2, r2, #32
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f002 021f 	and.w	r2, r2, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ab      	bne.n	80022b6 <HAL_RCC_OscConfig+0x23a>
 800235e:	e002      	b.n	8002366 <HAL_RCC_OscConfig+0x2ea>
 8002360:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8170 	beq.w	8002656 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002376:	4bd0      	ldr	r3, [pc, #832]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002382:	4bcd      	ldr	r3, [pc, #820]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b08      	cmp	r3, #8
 800238c:	d16d      	bne.n	800246a <HAL_RCC_OscConfig+0x3ee>
 800238e:	4bca      	ldr	r3, [pc, #808]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	d166      	bne.n	800246a <HAL_RCC_OscConfig+0x3ee>
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80023ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_OscConfig+0x350>
 80023c6:	4bbc      	ldr	r3, [pc, #752]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0x378>
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023f0:	4bb1      	ldr	r3, [pc, #708]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2202      	movs	r2, #2
 80023f6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80023fa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002406:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_RCC_OscConfig+0x3ba>
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f000 bd31 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4ba0      	ldr	r3, [pc, #640]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	21f8      	movs	r1, #248	; 0xf8
 8002446:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800244e:	fa91 f1a1 	rbit	r1, r1
 8002452:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002456:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800245a:	fab1 f181 	clz	r1, r1
 800245e:	b2c9      	uxtb	r1, r1
 8002460:	408b      	lsls	r3, r1
 8002462:	4995      	ldr	r1, [pc, #596]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002468:	e0f5      	b.n	8002656 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8085 	beq.w	8002580 <HAL_RCC_OscConfig+0x504>
 8002476:	2301      	movs	r3, #1
 8002478:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002488:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb35 	bl	8001b10 <HAL_GetTick>
 80024a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fb30 	bl	8001b10 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d902      	bls.n	80024c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	f000 bceb 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80024d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0x476>
 80024ec:	4b72      	ldr	r3, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e013      	b.n	800251a <HAL_RCC_OscConfig+0x49e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800250a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002516:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2202      	movs	r2, #2
 800251c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002520:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800252c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0af      	beq.n	80024ac <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	21f8      	movs	r1, #248	; 0xf8
 800255c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002564:	fa91 f1a1 	rbit	r1, r1
 8002568:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800256c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002570:	fab1 f181 	clz	r1, r1
 8002574:	b2c9      	uxtb	r1, r1
 8002576:	408b      	lsls	r3, r1
 8002578:	494f      	ldr	r1, [pc, #316]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
 800257e:	e06a      	b.n	8002656 <HAL_RCC_OscConfig+0x5da>
 8002580:	2301      	movs	r3, #1
 8002582:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002592:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fab0 	bl	8001b10 <HAL_GetTick>
 80025b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff faab 	bl	8001b10 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	f000 bc66 	b.w	8002e98 <HAL_RCC_OscConfig+0xe1c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80025de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0x580>
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x5a8>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_OscConfig+0x63c>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2202      	movs	r2, #2
 8002626:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800262a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002636:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800263a:	fab2 f282 	clz	r2, r2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f042 0220 	orr.w	r2, r2, #32
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1af      	bne.n	80025b6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80da 	beq.w	800281a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d069      	beq.n	8002744 <HAL_RCC_OscConfig+0x6c8>
 8002670:	2301      	movs	r3, #1
 8002672:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002682:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x640>)
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	461a      	mov	r2, r3
 8002696:	2301      	movs	r3, #1
 8002698:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7ff fa39 	bl	8001b10 <HAL_GetTick>
 800269e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e00d      	b.n	80026c0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7ff fa34 	bl	8001b10 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d905      	bls.n	80026c0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e3ef      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	10908120 	.word	0x10908120
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80026d8:	2202      	movs	r2, #2
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002702:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	4ba4      	ldr	r3, [pc, #656]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002708:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800270c:	2102      	movs	r1, #2
 800270e:	6019      	str	r1, [r3, #0]
 8002710:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f1a3 	rbit	r1, r3
 800271a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800271e:	6019      	str	r1, [r3, #0]
  return result;
 8002720:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0b0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x628>
 8002742:	e06a      	b.n	800281a <HAL_RCC_OscConfig+0x79e>
 8002744:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800275a:	601a      	str	r2, [r3, #0]
  return result;
 800275c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002760:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCC_OscConfig+0x920>)
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	461a      	mov	r2, r3
 8002772:	2300      	movs	r3, #0
 8002774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff f9cb 	bl	8001b10 <HAL_GetTick>
 800277a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277e:	e009      	b.n	8002794 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff f9c6 	bl	8001b10 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e381      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002798:	2202      	movs	r2, #2
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b6e      	ldr	r3, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80027de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027e4:	2102      	movs	r1, #2
 80027e6:	6019      	str	r1, [r3, #0]
 80027e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f1a3 	rbit	r1, r3
 80027f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027f6:	6019      	str	r1, [r3, #0]
  return result;
 80027f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1b2      	bne.n	8002780 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8157 	beq.w	8002ad8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d112      	bne.n	8002862 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	61d3      	str	r3, [r2, #28]
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x924>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11a      	bne.n	80028a4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x924>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4b      	ldr	r2, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x924>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff f949 	bl	8001b10 <HAL_GetTick>
 800287e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	e009      	b.n	8002898 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7ff f944 	bl	8001b10 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e2ff      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_OscConfig+0x924>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x840>
 80028ae:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a39      	ldr	r2, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	e02f      	b.n	800291c <HAL_RCC_OscConfig+0x8a0>
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x864>
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a33      	ldr	r2, [pc, #204]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0x8a0>
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x888>
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x8a0>
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06a      	beq.n	80029fc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7ff f8f3 	bl	8001b10 <HAL_GetTick>
 800292a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7ff f8ee 	bl	8001b10 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e2a7      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002964:	2202      	movs	r2, #2
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002976:	601a      	str	r2, [r3, #0]
  return result;
 8002978:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800297c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x928>
 8002992:	4b01      	ldr	r3, [pc, #4]	; (8002998 <HAL_RCC_OscConfig+0x91c>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	e013      	b.n	80029c0 <HAL_RCC_OscConfig+0x944>
 8002998:	40021000 	.word	0x40021000
 800299c:	10908120 	.word	0x10908120
 80029a0:	40007000 	.word	0x40007000
 80029a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029a8:	2202      	movs	r2, #2
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	4bc0      	ldr	r3, [pc, #768]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029c4:	2102      	movs	r1, #2
 80029c6:	6011      	str	r1, [r2, #0]
 80029c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	fa92 f1a2 	rbit	r1, r2
 80029d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029d6:	6011      	str	r1, [r2, #0]
  return result;
 80029d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d09a      	beq.n	8002930 <HAL_RCC_OscConfig+0x8b4>
 80029fa:	e063      	b.n	8002ac4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7ff f888 	bl	8001b10 <HAL_GetTick>
 8002a00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00b      	b.n	8002a1e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff f883 	bl	8001b10 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e23c      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002a1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a22:	2202      	movs	r2, #2
 8002a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f2a3 	rbit	r2, r3
 8002a30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a4c:	601a      	str	r2, [r3, #0]
  return result;
 8002a4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x9f2>
 8002a68:	4b95      	ldr	r3, [pc, #596]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	e00d      	b.n	8002a8a <HAL_RCC_OscConfig+0xa0e>
 8002a6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	4b8e      	ldr	r3, [pc, #568]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002a8e:	2102      	movs	r1, #2
 8002a90:	6011      	str	r1, [r2, #0]
 8002a92:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002aa0:	6011      	str	r1, [r2, #0]
  return result;
 8002aa2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f002 021f 	and.w	r2, r2, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1a0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a7b      	ldr	r2, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 81d9 	beq.w	8002e96 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae4:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	f000 81a6 	beq.w	8002e3e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f040 811e 	bne.w	8002d3a <HAL_RCC_OscConfig+0xcbe>
 8002afe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b16:	601a      	str	r2, [r3, #0]
  return result;
 8002b18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe ffec 	bl	8001b10 <HAL_GetTick>
 8002b38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe ffe7 	bl	8001b10 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1a2      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002b52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b6a:	601a      	str	r2, [r3, #0]
  return result;
 8002b6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0xb10>
 8002b86:	4b4e      	ldr	r3, [pc, #312]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb48>
 8002b8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	fa92 f1a2 	rbit	r1, r2
 8002bd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bdc:	6011      	str	r1, [r2, #0]
  return result;
 8002bde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d19e      	bne.n	8002b3e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c00:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f023 020f 	bic.w	r2, r3, #15
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	492c      	ldr	r1, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6a19      	ldr	r1, [r3, #32]
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	4925      	ldr	r1, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c48:	601a      	str	r2, [r3, #0]
  return result;
 8002c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	2301      	movs	r3, #1
 8002c64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe ff53 	bl	8001b10 <HAL_GetTick>
 8002c6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6e:	e009      	b.n	8002c84 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe ff4e 	bl	8001b10 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e109      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002c84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c9c:	601a      	str	r2, [r3, #0]
  return result;
 8002c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xc48>
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <HAL_RCC_OscConfig+0xc44>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	e01e      	b.n	8002cfc <HAL_RCC_OscConfig+0xc80>
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0xe28>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d04:	6011      	str	r1, [r2, #0]
 8002d06:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fa92 f1a2 	rbit	r1, r2
 8002d10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d14:	6011      	str	r1, [r2, #0]
  return result;
 8002d16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d09b      	beq.n	8002c70 <HAL_RCC_OscConfig+0xbf4>
 8002d38:	e0ad      	b.n	8002e96 <HAL_RCC_OscConfig+0xe1a>
 8002d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d52:	601a      	str	r2, [r3, #0]
  return result;
 8002d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fece 	bl	8001b10 <HAL_GetTick>
 8002d74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fec9 	bl	8001b10 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e084      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
 8002d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da6:	601a      	str	r2, [r3, #0]
  return result;
 8002da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xd4c>
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_RCC_OscConfig+0xe28>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e01b      	b.n	8002e00 <HAL_RCC_OscConfig+0xd84>
 8002dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f107 0320 	add.w	r3, r7, #32
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f107 0318 	add.w	r3, r7, #24
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_RCC_OscConfig+0xe28>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f107 0214 	add.w	r2, r7, #20
 8002e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e08:	6011      	str	r1, [r2, #0]
 8002e0a:	f107 0214 	add.w	r2, r7, #20
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fa92 f1a2 	rbit	r1, r2
 8002e14:	f107 0210 	add.w	r2, r7, #16
 8002e18:	6011      	str	r1, [r2, #0]
  return result;
 8002e1a:	f107 0210 	add.w	r2, r7, #16
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d19e      	bne.n	8002d7a <HAL_RCC_OscConfig+0xcfe>
 8002e3c:	e02b      	b.n	8002e96 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e025      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0xe28>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_RCC_OscConfig+0xe28>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e60:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d111      	bne.n	8002e92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d108      	bne.n	8002e92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b09e      	sub	sp, #120	; 0x78
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e162      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b90      	ldr	r3, [pc, #576]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d910      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	498b      	ldr	r1, [pc, #556]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e14a      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b82      	ldr	r3, [pc, #520]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	497f      	ldr	r1, [pc, #508]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80dc 	beq.w	80030d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d13c      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xf6>
 8002f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xa6>
 8002f48:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCC_ClockConfig+0xc6>
 8002f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f60:	663b      	str	r3, [r7, #96]	; 0x60
 8002f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f76:	fa92 f2a2 	rbit	r2, r2
 8002f7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f002 021f 	and.w	r2, r2, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d17b      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0f3      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d13c      	bne.n	8003020 <HAL_RCC_ClockConfig+0x178>
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x128>
 8002fca:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x148>
 8002fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fec:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff8:	fa92 f2a2 	rbit	r2, r2
 8002ffc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f202 	lsl.w	r2, r1, r2
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d13a      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b2      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
 8003020:	2302      	movs	r3, #2
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e00d      	b.n	8003064 <HAL_RCC_ClockConfig+0x1bc>
 8003048:	2302      	movs	r3, #2
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	2302      	movs	r3, #2
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2202      	movs	r2, #2
 8003066:	61ba      	str	r2, [r7, #24]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	fa92 f2a2 	rbit	r2, r2
 800306e:	617a      	str	r2, [r7, #20]
  return result;
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	fab2 f282 	clz	r2, r2
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f042 0220 	orr.w	r2, r2, #32
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f002 021f 	and.w	r2, r2, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e079      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	491a      	ldr	r1, [pc, #104]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fd34 	bl	8001b10 <HAL_GetTick>
 80030a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fd30 	bl	8001b10 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e061      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_ClockConfig+0x260>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d214      	bcs.n	800310c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4906      	ldr	r1, [pc, #24]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e040      	b.n	8003186 <HAL_RCC_ClockConfig+0x2de>
 8003104:	40022000 	.word	0x40022000
 8003108:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	491a      	ldr	r1, [pc, #104]	; (8003190 <HAL_RCC_ClockConfig+0x2e8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_RCC_ClockConfig+0x2e8>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4912      	ldr	r1, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x2e8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800314a:	f000 f829 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800314e:	4601      	mov	r1, r0
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_ClockConfig+0x2e8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	22f0      	movs	r2, #240	; 0xf0
 800315a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	fa92 f2a2 	rbit	r2, r2
 8003162:	60fa      	str	r2, [r7, #12]
  return result;
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	40d3      	lsrs	r3, r2
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x2ec>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	fa21 f303 	lsr.w	r3, r1, r3
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_RCC_ClockConfig+0x2f0>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_RCC_ClockConfig+0x2f4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fc82 	bl	8001a88 <HAL_InitTick>
  
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3778      	adds	r7, #120	; 0x78
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	08004974 	.word	0x08004974
 8003198:	20000004 	.word	0x20000004
 800319c:	20000008 	.word	0x20000008

080031a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b08b      	sub	sp, #44	; 0x2c
 80031a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031ba:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ce:	e03f      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031d2:	623b      	str	r3, [r7, #32]
      break;
 80031d4:	e03f      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	fa92 f2a2 	rbit	r2, r2
 80031e8:	607a      	str	r2, [r7, #4]
  return result;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	fab2 f282 	clz	r2, r2
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	40d3      	lsrs	r3, r2
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_RCC_GetSysClockFreq+0xcc>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	220f      	movs	r2, #15
 8003204:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	fa92 f2a2 	rbit	r2, r2
 800320c:	60fa      	str	r2, [r7, #12]
  return result;
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	40d3      	lsrs	r3, r2
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_RCC_GetSysClockFreq+0xd0>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc8>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
 8003238:	e007      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc8>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	623b      	str	r3, [r7, #32]
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003252:	623b      	str	r3, [r7, #32]
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	6a3b      	ldr	r3, [r7, #32]
}
 8003258:	4618      	mov	r0, r3
 800325a:	372c      	adds	r7, #44	; 0x2c
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40021000 	.word	0x40021000
 8003268:	007a1200 	.word	0x007a1200
 800326c:	0800498c 	.word	0x0800498c
 8003270:	0800499c 	.word	0x0800499c

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003292:	f7ff ffef 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003296:	4601      	mov	r1, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	fa92 f2a2 	rbit	r2, r2
 80032ac:	603a      	str	r2, [r7, #0]
  return result;
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	fab2 f282 	clz	r2, r2
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	40d3      	lsrs	r3, r2
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	08004984 	.word	0x08004984

080032d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032d6:	f7ff ffcd 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032da:	4601      	mov	r1, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80032e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	603a      	str	r2, [r7, #0]
  return result;
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	40d3      	lsrs	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x40>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	08004984 	.word	0x08004984

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b092      	sub	sp, #72	; 0x48
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80d4 	beq.w	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003338:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10e      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	61d3      	str	r3, [r2, #28]
 8003350:	4b48      	ldr	r3, [pc, #288]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a41      	ldr	r2, [pc, #260]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fe fbc9 	bl	8001b10 <HAL_GetTick>
 800337e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe fbc5 	bl	8001b10 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	; 0x64
 800338e:	d901      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1d6      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033a0:	4b34      	ldr	r3, [pc, #208]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8084 	beq.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d07c      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	2301      	movs	r3, #1
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	461a      	mov	r2, r3
 800340e:	2300      	movs	r3, #0
 8003410:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003416:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe fb75 	bl	8001b10 <HAL_GetTick>
 8003426:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fb71 	bl	8001b10 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e180      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003440:	2302      	movs	r3, #2
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
 800344c:	2302      	movs	r3, #2
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	61fb      	str	r3, [r7, #28]
  return result;
 8003458:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d108      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800346e:	4b01      	ldr	r3, [pc, #4]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	e00d      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
 800347c:	10908100 	.word	0x10908100
 8003480:	2302      	movs	r3, #2
 8003482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	4ba0      	ldr	r3, [pc, #640]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2202      	movs	r2, #2
 8003492:	613a      	str	r2, [r7, #16]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	60fa      	str	r2, [r7, #12]
  return result;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f002 021f 	and.w	r2, r2, #31
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0b7      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034ba:	4b95      	ldr	r3, [pc, #596]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4992      	ldr	r1, [pc, #584]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b8e      	ldr	r3, [pc, #568]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	4a8d      	ldr	r2, [pc, #564]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f023 0203 	bic.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4985      	ldr	r1, [pc, #532]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350a:	4b81      	ldr	r3, [pc, #516]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	497e      	ldr	r1, [pc, #504]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003528:	4b79      	ldr	r3, [pc, #484]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4976      	ldr	r1, [pc, #472]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003546:	4b72      	ldr	r3, [pc, #456]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	496f      	ldr	r1, [pc, #444]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	4967      	ldr	r1, [pc, #412]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f023 0220 	bic.w	r2, r3, #32
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4960      	ldr	r1, [pc, #384]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a0:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	4958      	ldr	r1, [pc, #352]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035be:	4b54      	ldr	r3, [pc, #336]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4951      	ldr	r1, [pc, #324]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4949      	ldr	r1, [pc, #292]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035fa:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4942      	ldr	r1, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	493a      	ldr	r1, [pc, #232]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	4933      	ldr	r1, [pc, #204]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	492b      	ldr	r1, [pc, #172]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4924      	ldr	r1, [pc, #144]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	491c      	ldr	r1, [pc, #112]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	4915      	ldr	r1, [pc, #84]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	490d      	ldr	r1, [pc, #52]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	4906      	ldr	r1, [pc, #24]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003708:	4b01      	ldr	r3, [pc, #4]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800371e:	4313      	orrs	r3, r2
 8003720:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800373c:	4313      	orrs	r3, r2
 800373e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3748      	adds	r7, #72	; 0x48
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e09d      	b.n	800389e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003772:	d009      	beq.n	8003788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	e005      	b.n	8003788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe f81a 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c8:	d902      	bls.n	80037d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037de:	d007      	beq.n	80037f0 <HAL_SPI_Init+0xa0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	ea42 0103 	orr.w	r1, r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	f003 0204 	and.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Init>:
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Init+0x12>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e040      	b.n	800393a <HAL_UART_Init+0x94>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_UART_Init+0x28>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd ffe9 	bl	80018a0 <HAL_UART_MspInit>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	; 0x24
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8c1 	bl	8003a6c <UART_SetConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Init+0x4e>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e022      	b.n	800393a <HAL_UART_Init+0x94>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_UART_Init+0x5c>
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fa89 	bl	8003e14 <UART_AdvFeatureConfig>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fb10 	bl	8003f58 <UART_CheckIdleState>
 8003938:	4603      	mov	r3, r0
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Transmit>:
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	; 0x28
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003956:	2b20      	cmp	r3, #32
 8003958:	f040 8082 	bne.w	8003a60 <HAL_UART_Transmit+0x11e>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Transmit+0x26>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x2a>
 8003968:	2301      	movs	r3, #1
 800396a:	e07a      	b.n	8003a62 <HAL_UART_Transmit+0x120>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UART_Transmit+0x38>
 8003976:	2302      	movs	r3, #2
 8003978:	e073      	b.n	8003a62 <HAL_UART_Transmit+0x120>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	; 0x21
 800398e:	679a      	str	r2, [r3, #120]	; 0x78
 8003990:	f7fe f8be 	bl	8001b10 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d108      	bne.n	80039c2 <HAL_UART_Transmit+0x80>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_UART_Transmit+0x80>
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e003      	b.n	80039ca <HAL_UART_Transmit+0x88>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80039d2:	e02d      	b.n	8003a30 <HAL_UART_Transmit+0xee>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fb03 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_Transmit+0xac>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e039      	b.n	8003a62 <HAL_UART_Transmit+0x120>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_UART_Transmit+0xca>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	b292      	uxth	r2, r2
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3302      	adds	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e008      	b.n	8003a1e <HAL_UART_Transmit+0xdc>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1cb      	bne.n	80039d4 <HAL_UART_Transmit+0x92>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 facf 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0x114>
 8003a52:	2303      	movs	r3, #3
 8003a54:	e005      	b.n	8003a62 <HAL_UART_Transmit+0x120>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	679a      	str	r2, [r3, #120]	; 0x78
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x120>
 8003a60:	2302      	movs	r3, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <UART_SetConfig>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	2300      	movs	r3, #0
 8003a76:	77bb      	strb	r3, [r7, #30]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4baa      	ldr	r3, [pc, #680]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	6979      	ldr	r1, [r7, #20]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a98      	ldr	r2, [pc, #608]	; (8003d44 <UART_SetConfig+0x2d8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d121      	bne.n	8003b2c <UART_SetConfig+0xc0>
 8003ae8:	4b97      	ldr	r3, [pc, #604]	; (8003d48 <UART_SetConfig+0x2dc>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d817      	bhi.n	8003b24 <UART_SetConfig+0xb8>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <UART_SetConfig+0x90>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b19 	.word	0x08003b19
 8003b04:	08003b1f 	.word	0x08003b1f
 8003b08:	08003b13 	.word	0x08003b13
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e0b2      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b12:	2302      	movs	r3, #2
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e0af      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e0ac      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e0a9      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b24:	2310      	movs	r3, #16
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	bf00      	nop
 8003b2a:	e0a5      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a86      	ldr	r2, [pc, #536]	; (8003d4c <UART_SetConfig+0x2e0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d123      	bne.n	8003b7e <UART_SetConfig+0x112>
 8003b36:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <UART_SetConfig+0x2dc>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b42:	d012      	beq.n	8003b6a <UART_SetConfig+0xfe>
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d802      	bhi.n	8003b50 <UART_SetConfig+0xe4>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <UART_SetConfig+0xf2>
 8003b4e:	e012      	b.n	8003b76 <UART_SetConfig+0x10a>
 8003b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b54:	d00c      	beq.n	8003b70 <UART_SetConfig+0x104>
 8003b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5a:	d003      	beq.n	8003b64 <UART_SetConfig+0xf8>
 8003b5c:	e00b      	b.n	8003b76 <UART_SetConfig+0x10a>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e089      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e086      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e083      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b70:	2308      	movs	r3, #8
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e080      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b76:	2310      	movs	r3, #16
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	bf00      	nop
 8003b7c:	e07c      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <UART_SetConfig+0x2e4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d123      	bne.n	8003bd0 <UART_SetConfig+0x164>
 8003b88:	4b6f      	ldr	r3, [pc, #444]	; (8003d48 <UART_SetConfig+0x2dc>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b94:	d012      	beq.n	8003bbc <UART_SetConfig+0x150>
 8003b96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b9a:	d802      	bhi.n	8003ba2 <UART_SetConfig+0x136>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <UART_SetConfig+0x144>
 8003ba0:	e012      	b.n	8003bc8 <UART_SetConfig+0x15c>
 8003ba2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ba6:	d00c      	beq.n	8003bc2 <UART_SetConfig+0x156>
 8003ba8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bac:	d003      	beq.n	8003bb6 <UART_SetConfig+0x14a>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x15c>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e060      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e05d      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e05a      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e057      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	bf00      	nop
 8003bce:	e053      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <UART_SetConfig+0x2e8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d123      	bne.n	8003c22 <UART_SetConfig+0x1b6>
 8003bda:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <UART_SetConfig+0x2dc>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be6:	d012      	beq.n	8003c0e <UART_SetConfig+0x1a2>
 8003be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bec:	d802      	bhi.n	8003bf4 <UART_SetConfig+0x188>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <UART_SetConfig+0x196>
 8003bf2:	e012      	b.n	8003c1a <UART_SetConfig+0x1ae>
 8003bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf8:	d00c      	beq.n	8003c14 <UART_SetConfig+0x1a8>
 8003bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bfe:	d003      	beq.n	8003c08 <UART_SetConfig+0x19c>
 8003c00:	e00b      	b.n	8003c1a <UART_SetConfig+0x1ae>
 8003c02:	2300      	movs	r3, #0
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e037      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e034      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e031      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c14:	2308      	movs	r3, #8
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e02e      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	bf00      	nop
 8003c20:	e02a      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a4c      	ldr	r2, [pc, #304]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d123      	bne.n	8003c74 <UART_SetConfig+0x208>
 8003c2c:	4b46      	ldr	r3, [pc, #280]	; (8003d48 <UART_SetConfig+0x2dc>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c38:	d012      	beq.n	8003c60 <UART_SetConfig+0x1f4>
 8003c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3e:	d802      	bhi.n	8003c46 <UART_SetConfig+0x1da>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <UART_SetConfig+0x1e8>
 8003c44:	e012      	b.n	8003c6c <UART_SetConfig+0x200>
 8003c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c4a:	d00c      	beq.n	8003c66 <UART_SetConfig+0x1fa>
 8003c4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c50:	d003      	beq.n	8003c5a <UART_SetConfig+0x1ee>
 8003c52:	e00b      	b.n	8003c6c <UART_SetConfig+0x200>
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e00e      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e00b      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e008      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e005      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	bf00      	nop
 8003c72:	e001      	b.n	8003c78 <UART_SetConfig+0x20c>
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c80:	d16e      	bne.n	8003d60 <UART_SetConfig+0x2f4>
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d828      	bhi.n	8003cda <UART_SetConfig+0x26e>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0x224>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003cbd 	.word	0x08003cbd
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cdb 	.word	0x08003cdb
 8003ca0:	08003ccb 	.word	0x08003ccb
 8003ca4:	08003cdb 	.word	0x08003cdb
 8003ca8:	08003cdb 	.word	0x08003cdb
 8003cac:	08003cdb 	.word	0x08003cdb
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	f7ff faea 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8003cb8:	61b8      	str	r0, [r7, #24]
 8003cba:	e013      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003cbc:	f7ff fb08 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	61b8      	str	r0, [r7, #24]
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003cc4:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <UART_SetConfig+0x2f0>)
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e00c      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003cca:	f7ff fa69 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003cce:	61b8      	str	r0, [r7, #24]
 8003cd0:	e008      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e004      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77bb      	strb	r3, [r7, #30]
 8003ce2:	bf00      	nop
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8086 	beq.w	8003df8 <UART_SetConfig+0x38c>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d916      	bls.n	8003d38 <UART_SetConfig+0x2cc>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d212      	bcs.n	8003d38 <UART_SetConfig+0x2cc>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	81fb      	strh	r3, [r7, #14]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	81fb      	strh	r3, [r7, #14]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	89fa      	ldrh	r2, [r7, #14]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	e05f      	b.n	8003df8 <UART_SetConfig+0x38c>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77bb      	strb	r3, [r7, #30]
 8003d3c:	e05c      	b.n	8003df8 <UART_SetConfig+0x38c>
 8003d3e:	bf00      	nop
 8003d40:	efff69f3 	.word	0xefff69f3
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40004800 	.word	0x40004800
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	007a1200 	.word	0x007a1200
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d827      	bhi.n	8003db6 <UART_SetConfig+0x34a>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x300>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003db7 	.word	0x08003db7
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003db7 	.word	0x08003db7
 8003d84:	08003db7 	.word	0x08003db7
 8003d88:	08003db7 	.word	0x08003db7
 8003d8c:	08003daf 	.word	0x08003daf
 8003d90:	f7ff fa7c 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8003d94:	61b8      	str	r0, [r7, #24]
 8003d96:	e013      	b.n	8003dc0 <UART_SetConfig+0x354>
 8003d98:	f7ff fa9a 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	61b8      	str	r0, [r7, #24]
 8003d9e:	e00f      	b.n	8003dc0 <UART_SetConfig+0x354>
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <UART_SetConfig+0x3a4>)
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e00c      	b.n	8003dc0 <UART_SetConfig+0x354>
 8003da6:	f7ff f9fb 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003daa:	61b8      	str	r0, [r7, #24]
 8003dac:	e008      	b.n	8003dc0 <UART_SetConfig+0x354>
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e004      	b.n	8003dc0 <UART_SetConfig+0x354>
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	77bb      	strb	r3, [r7, #30]
 8003dbe:	bf00      	nop
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <UART_SetConfig+0x38c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085a      	lsrs	r2, r3, #1
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d908      	bls.n	8003df4 <UART_SetConfig+0x388>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d204      	bcs.n	8003df4 <UART_SetConfig+0x388>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e001      	b.n	8003df8 <UART_SetConfig+0x38c>
 8003df4:	2301      	movs	r3, #1
 8003df6:	77bb      	strb	r3, [r7, #30]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68
 8003e04:	7fbb      	ldrb	r3, [r7, #30]
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	007a1200 	.word	0x007a1200

08003e14 <UART_AdvFeatureConfig>:
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x2a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x4c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x6e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x90>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0xb2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0xd4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x116>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d10a      	bne.n	8003f2a <UART_AdvFeatureConfig+0x116>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x138>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_CheckIdleState>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003f68:	f7fd fdd2 	bl	8001b10 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x42>
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f82d 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x42>
 8003f96:	2303      	movs	r3, #3
 8003f98:	e023      	b.n	8003fe2 <UART_CheckIdleState+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d10e      	bne.n	8003fc6 <UART_CheckIdleState+0x6e>
 8003fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f817 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <UART_CheckIdleState+0x6e>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e00d      	b.n	8003fe2 <UART_CheckIdleState+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_WaitOnFlagUntilTimeout>:
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]
 8003ffa:	e05e      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d05a      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
 8004004:	f7fd fd84 	bl	8001b10 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <UART_WaitOnFlagUntilTimeout+0x30>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11b      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0x68>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	679a      	str	r2, [r3, #120]	; 0x78
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	; 0x7c
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800404e:	2303      	movs	r3, #3
 8004050:	e043      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xf0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02c      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	d124      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004078:	621a      	str	r2, [r3, #32]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	679a      	str	r2, [r3, #120]	; 0x78
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xf0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d091      	beq.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x12>
 80040d8:	2300      	movs	r3, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	; (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000010 	.word	0x20000010

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	4e0d      	ldr	r6, [pc, #52]	; (8004128 <__libc_init_array+0x38>)
 80040f4:	4c0d      	ldr	r4, [pc, #52]	; (800412c <__libc_init_array+0x3c>)
 80040f6:	1ba4      	subs	r4, r4, r6
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	2500      	movs	r5, #0
 80040fc:	42a5      	cmp	r5, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	4e0b      	ldr	r6, [pc, #44]	; (8004130 <__libc_init_array+0x40>)
 8004102:	4c0c      	ldr	r4, [pc, #48]	; (8004134 <__libc_init_array+0x44>)
 8004104:	f000 fc26 	bl	8004954 <_init>
 8004108:	1ba4      	subs	r4, r4, r6
 800410a:	10a4      	asrs	r4, r4, #2
 800410c:	2500      	movs	r5, #0
 800410e:	42a5      	cmp	r5, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004118:	4798      	blx	r3
 800411a:	3501      	adds	r5, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004122:	4798      	blx	r3
 8004124:	3501      	adds	r5, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	080049e0 	.word	0x080049e0
 800412c:	080049e0 	.word	0x080049e0
 8004130:	080049e0 	.word	0x080049e0
 8004134:	080049e4 	.word	0x080049e4

08004138 <memset>:
 8004138:	4402      	add	r2, r0
 800413a:	4603      	mov	r3, r0
 800413c:	4293      	cmp	r3, r2
 800413e:	d100      	bne.n	8004142 <memset+0xa>
 8004140:	4770      	bx	lr
 8004142:	f803 1b01 	strb.w	r1, [r3], #1
 8004146:	e7f9      	b.n	800413c <memset+0x4>

08004148 <siprintf>:
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b500      	push	{lr}
 800414c:	b09c      	sub	sp, #112	; 0x70
 800414e:	ab1d      	add	r3, sp, #116	; 0x74
 8004150:	9002      	str	r0, [sp, #8]
 8004152:	9006      	str	r0, [sp, #24]
 8004154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004158:	4809      	ldr	r0, [pc, #36]	; (8004180 <siprintf+0x38>)
 800415a:	9107      	str	r1, [sp, #28]
 800415c:	9104      	str	r1, [sp, #16]
 800415e:	4909      	ldr	r1, [pc, #36]	; (8004184 <siprintf+0x3c>)
 8004160:	f853 2b04 	ldr.w	r2, [r3], #4
 8004164:	9105      	str	r1, [sp, #20]
 8004166:	6800      	ldr	r0, [r0, #0]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	a902      	add	r1, sp, #8
 800416c:	f000 f866 	bl	800423c <_svfiprintf_r>
 8004170:	9b02      	ldr	r3, [sp, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	b01c      	add	sp, #112	; 0x70
 8004178:	f85d eb04 	ldr.w	lr, [sp], #4
 800417c:	b003      	add	sp, #12
 800417e:	4770      	bx	lr
 8004180:	20000010 	.word	0x20000010
 8004184:	ffff0208 	.word	0xffff0208

08004188 <__ssputs_r>:
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	688e      	ldr	r6, [r1, #8]
 800418e:	429e      	cmp	r6, r3
 8004190:	4682      	mov	sl, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4690      	mov	r8, r2
 8004196:	4699      	mov	r9, r3
 8004198:	d837      	bhi.n	800420a <__ssputs_r+0x82>
 800419a:	898a      	ldrh	r2, [r1, #12]
 800419c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a0:	d031      	beq.n	8004206 <__ssputs_r+0x7e>
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	6909      	ldr	r1, [r1, #16]
 80041a6:	1a6f      	subs	r7, r5, r1
 80041a8:	6965      	ldr	r5, [r4, #20]
 80041aa:	2302      	movs	r3, #2
 80041ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80041b4:	f109 0301 	add.w	r3, r9, #1
 80041b8:	443b      	add	r3, r7
 80041ba:	429d      	cmp	r5, r3
 80041bc:	bf38      	it	cc
 80041be:	461d      	movcc	r5, r3
 80041c0:	0553      	lsls	r3, r2, #21
 80041c2:	d530      	bpl.n	8004226 <__ssputs_r+0x9e>
 80041c4:	4629      	mov	r1, r5
 80041c6:	f000 fb2b 	bl	8004820 <_malloc_r>
 80041ca:	4606      	mov	r6, r0
 80041cc:	b950      	cbnz	r0, 80041e4 <__ssputs_r+0x5c>
 80041ce:	230c      	movs	r3, #12
 80041d0:	f8ca 3000 	str.w	r3, [sl]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	463a      	mov	r2, r7
 80041e6:	6921      	ldr	r1, [r4, #16]
 80041e8:	f000 faa8 	bl	800473c <memcpy>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	6126      	str	r6, [r4, #16]
 80041fa:	6165      	str	r5, [r4, #20]
 80041fc:	443e      	add	r6, r7
 80041fe:	1bed      	subs	r5, r5, r7
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	60a5      	str	r5, [r4, #8]
 8004204:	464e      	mov	r6, r9
 8004206:	454e      	cmp	r6, r9
 8004208:	d900      	bls.n	800420c <__ssputs_r+0x84>
 800420a:	464e      	mov	r6, r9
 800420c:	4632      	mov	r2, r6
 800420e:	4641      	mov	r1, r8
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	f000 fa9e 	bl	8004752 <memmove>
 8004216:	68a3      	ldr	r3, [r4, #8]
 8004218:	1b9b      	subs	r3, r3, r6
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	441e      	add	r6, r3
 8004220:	6026      	str	r6, [r4, #0]
 8004222:	2000      	movs	r0, #0
 8004224:	e7dc      	b.n	80041e0 <__ssputs_r+0x58>
 8004226:	462a      	mov	r2, r5
 8004228:	f000 fb54 	bl	80048d4 <_realloc_r>
 800422c:	4606      	mov	r6, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d1e2      	bne.n	80041f8 <__ssputs_r+0x70>
 8004232:	6921      	ldr	r1, [r4, #16]
 8004234:	4650      	mov	r0, sl
 8004236:	f000 faa5 	bl	8004784 <_free_r>
 800423a:	e7c8      	b.n	80041ce <__ssputs_r+0x46>

0800423c <_svfiprintf_r>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	461d      	mov	r5, r3
 8004242:	898b      	ldrh	r3, [r1, #12]
 8004244:	061f      	lsls	r7, r3, #24
 8004246:	b09d      	sub	sp, #116	; 0x74
 8004248:	4680      	mov	r8, r0
 800424a:	460c      	mov	r4, r1
 800424c:	4616      	mov	r6, r2
 800424e:	d50f      	bpl.n	8004270 <_svfiprintf_r+0x34>
 8004250:	690b      	ldr	r3, [r1, #16]
 8004252:	b96b      	cbnz	r3, 8004270 <_svfiprintf_r+0x34>
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	f000 fae3 	bl	8004820 <_malloc_r>
 800425a:	6020      	str	r0, [r4, #0]
 800425c:	6120      	str	r0, [r4, #16]
 800425e:	b928      	cbnz	r0, 800426c <_svfiprintf_r+0x30>
 8004260:	230c      	movs	r3, #12
 8004262:	f8c8 3000 	str.w	r3, [r8]
 8004266:	f04f 30ff 	mov.w	r0, #4294967295
 800426a:	e0c8      	b.n	80043fe <_svfiprintf_r+0x1c2>
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	6163      	str	r3, [r4, #20]
 8004270:	2300      	movs	r3, #0
 8004272:	9309      	str	r3, [sp, #36]	; 0x24
 8004274:	2320      	movs	r3, #32
 8004276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800427a:	2330      	movs	r3, #48	; 0x30
 800427c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004280:	9503      	str	r5, [sp, #12]
 8004282:	f04f 0b01 	mov.w	fp, #1
 8004286:	4637      	mov	r7, r6
 8004288:	463d      	mov	r5, r7
 800428a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800428e:	b10b      	cbz	r3, 8004294 <_svfiprintf_r+0x58>
 8004290:	2b25      	cmp	r3, #37	; 0x25
 8004292:	d13e      	bne.n	8004312 <_svfiprintf_r+0xd6>
 8004294:	ebb7 0a06 	subs.w	sl, r7, r6
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x76>
 800429a:	4653      	mov	r3, sl
 800429c:	4632      	mov	r2, r6
 800429e:	4621      	mov	r1, r4
 80042a0:	4640      	mov	r0, r8
 80042a2:	f7ff ff71 	bl	8004188 <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80a4 	beq.w	80043f4 <_svfiprintf_r+0x1b8>
 80042ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ae:	4453      	add	r3, sl
 80042b0:	9309      	str	r3, [sp, #36]	; 0x24
 80042b2:	783b      	ldrb	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 809d 	beq.w	80043f4 <_svfiprintf_r+0x1b8>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	9307      	str	r3, [sp, #28]
 80042c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042cc:	931a      	str	r3, [sp, #104]	; 0x68
 80042ce:	462f      	mov	r7, r5
 80042d0:	2205      	movs	r2, #5
 80042d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80042d6:	4850      	ldr	r0, [pc, #320]	; (8004418 <_svfiprintf_r+0x1dc>)
 80042d8:	f7fb ff8a 	bl	80001f0 <memchr>
 80042dc:	9b04      	ldr	r3, [sp, #16]
 80042de:	b9d0      	cbnz	r0, 8004316 <_svfiprintf_r+0xda>
 80042e0:	06d9      	lsls	r1, r3, #27
 80042e2:	bf44      	itt	mi
 80042e4:	2220      	movmi	r2, #32
 80042e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042ea:	071a      	lsls	r2, r3, #28
 80042ec:	bf44      	itt	mi
 80042ee:	222b      	movmi	r2, #43	; 0x2b
 80042f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042f4:	782a      	ldrb	r2, [r5, #0]
 80042f6:	2a2a      	cmp	r2, #42	; 0x2a
 80042f8:	d015      	beq.n	8004326 <_svfiprintf_r+0xea>
 80042fa:	9a07      	ldr	r2, [sp, #28]
 80042fc:	462f      	mov	r7, r5
 80042fe:	2000      	movs	r0, #0
 8004300:	250a      	movs	r5, #10
 8004302:	4639      	mov	r1, r7
 8004304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004308:	3b30      	subs	r3, #48	; 0x30
 800430a:	2b09      	cmp	r3, #9
 800430c:	d94d      	bls.n	80043aa <_svfiprintf_r+0x16e>
 800430e:	b1b8      	cbz	r0, 8004340 <_svfiprintf_r+0x104>
 8004310:	e00f      	b.n	8004332 <_svfiprintf_r+0xf6>
 8004312:	462f      	mov	r7, r5
 8004314:	e7b8      	b.n	8004288 <_svfiprintf_r+0x4c>
 8004316:	4a40      	ldr	r2, [pc, #256]	; (8004418 <_svfiprintf_r+0x1dc>)
 8004318:	1a80      	subs	r0, r0, r2
 800431a:	fa0b f000 	lsl.w	r0, fp, r0
 800431e:	4318      	orrs	r0, r3
 8004320:	9004      	str	r0, [sp, #16]
 8004322:	463d      	mov	r5, r7
 8004324:	e7d3      	b.n	80042ce <_svfiprintf_r+0x92>
 8004326:	9a03      	ldr	r2, [sp, #12]
 8004328:	1d11      	adds	r1, r2, #4
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	9103      	str	r1, [sp, #12]
 800432e:	2a00      	cmp	r2, #0
 8004330:	db01      	blt.n	8004336 <_svfiprintf_r+0xfa>
 8004332:	9207      	str	r2, [sp, #28]
 8004334:	e004      	b.n	8004340 <_svfiprintf_r+0x104>
 8004336:	4252      	negs	r2, r2
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	9207      	str	r2, [sp, #28]
 800433e:	9304      	str	r3, [sp, #16]
 8004340:	783b      	ldrb	r3, [r7, #0]
 8004342:	2b2e      	cmp	r3, #46	; 0x2e
 8004344:	d10c      	bne.n	8004360 <_svfiprintf_r+0x124>
 8004346:	787b      	ldrb	r3, [r7, #1]
 8004348:	2b2a      	cmp	r3, #42	; 0x2a
 800434a:	d133      	bne.n	80043b4 <_svfiprintf_r+0x178>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	9203      	str	r2, [sp, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	bfb8      	it	lt
 8004358:	f04f 33ff 	movlt.w	r3, #4294967295
 800435c:	3702      	adds	r7, #2
 800435e:	9305      	str	r3, [sp, #20]
 8004360:	4d2e      	ldr	r5, [pc, #184]	; (800441c <_svfiprintf_r+0x1e0>)
 8004362:	7839      	ldrb	r1, [r7, #0]
 8004364:	2203      	movs	r2, #3
 8004366:	4628      	mov	r0, r5
 8004368:	f7fb ff42 	bl	80001f0 <memchr>
 800436c:	b138      	cbz	r0, 800437e <_svfiprintf_r+0x142>
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	1b40      	subs	r0, r0, r5
 8004372:	fa03 f000 	lsl.w	r0, r3, r0
 8004376:	9b04      	ldr	r3, [sp, #16]
 8004378:	4303      	orrs	r3, r0
 800437a:	3701      	adds	r7, #1
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	7839      	ldrb	r1, [r7, #0]
 8004380:	4827      	ldr	r0, [pc, #156]	; (8004420 <_svfiprintf_r+0x1e4>)
 8004382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004386:	2206      	movs	r2, #6
 8004388:	1c7e      	adds	r6, r7, #1
 800438a:	f7fb ff31 	bl	80001f0 <memchr>
 800438e:	2800      	cmp	r0, #0
 8004390:	d038      	beq.n	8004404 <_svfiprintf_r+0x1c8>
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <_svfiprintf_r+0x1e8>)
 8004394:	bb13      	cbnz	r3, 80043dc <_svfiprintf_r+0x1a0>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	3307      	adds	r3, #7
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	3308      	adds	r3, #8
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a4:	444b      	add	r3, r9
 80043a6:	9309      	str	r3, [sp, #36]	; 0x24
 80043a8:	e76d      	b.n	8004286 <_svfiprintf_r+0x4a>
 80043aa:	fb05 3202 	mla	r2, r5, r2, r3
 80043ae:	2001      	movs	r0, #1
 80043b0:	460f      	mov	r7, r1
 80043b2:	e7a6      	b.n	8004302 <_svfiprintf_r+0xc6>
 80043b4:	2300      	movs	r3, #0
 80043b6:	3701      	adds	r7, #1
 80043b8:	9305      	str	r3, [sp, #20]
 80043ba:	4619      	mov	r1, r3
 80043bc:	250a      	movs	r5, #10
 80043be:	4638      	mov	r0, r7
 80043c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c4:	3a30      	subs	r2, #48	; 0x30
 80043c6:	2a09      	cmp	r2, #9
 80043c8:	d903      	bls.n	80043d2 <_svfiprintf_r+0x196>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0c8      	beq.n	8004360 <_svfiprintf_r+0x124>
 80043ce:	9105      	str	r1, [sp, #20]
 80043d0:	e7c6      	b.n	8004360 <_svfiprintf_r+0x124>
 80043d2:	fb05 2101 	mla	r1, r5, r1, r2
 80043d6:	2301      	movs	r3, #1
 80043d8:	4607      	mov	r7, r0
 80043da:	e7f0      	b.n	80043be <_svfiprintf_r+0x182>
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4622      	mov	r2, r4
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <_svfiprintf_r+0x1ec>)
 80043e4:	a904      	add	r1, sp, #16
 80043e6:	4640      	mov	r0, r8
 80043e8:	f3af 8000 	nop.w
 80043ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043f0:	4681      	mov	r9, r0
 80043f2:	d1d6      	bne.n	80043a2 <_svfiprintf_r+0x166>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	065b      	lsls	r3, r3, #25
 80043f8:	f53f af35 	bmi.w	8004266 <_svfiprintf_r+0x2a>
 80043fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043fe:	b01d      	add	sp, #116	; 0x74
 8004400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004404:	ab03      	add	r3, sp, #12
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	4622      	mov	r2, r4
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <_svfiprintf_r+0x1ec>)
 800440c:	a904      	add	r1, sp, #16
 800440e:	4640      	mov	r0, r8
 8004410:	f000 f882 	bl	8004518 <_printf_i>
 8004414:	e7ea      	b.n	80043ec <_svfiprintf_r+0x1b0>
 8004416:	bf00      	nop
 8004418:	080049ac 	.word	0x080049ac
 800441c:	080049b2 	.word	0x080049b2
 8004420:	080049b6 	.word	0x080049b6
 8004424:	00000000 	.word	0x00000000
 8004428:	08004189 	.word	0x08004189

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4691      	mov	r9, r2
 8004432:	461f      	mov	r7, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800443c:	4293      	cmp	r3, r2
 800443e:	bfb8      	it	lt
 8004440:	4613      	movlt	r3, r2
 8004442:	f8c9 3000 	str.w	r3, [r9]
 8004446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800444a:	4606      	mov	r6, r0
 800444c:	460c      	mov	r4, r1
 800444e:	b112      	cbz	r2, 8004456 <_printf_common+0x2a>
 8004450:	3301      	adds	r3, #1
 8004452:	f8c9 3000 	str.w	r3, [r9]
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	0699      	lsls	r1, r3, #26
 800445a:	bf42      	ittt	mi
 800445c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004460:	3302      	addmi	r3, #2
 8004462:	f8c9 3000 	strmi.w	r3, [r9]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d107      	bne.n	800447e <_printf_common+0x52>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	f8d9 2000 	ldr.w	r2, [r9]
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	42ab      	cmp	r3, r5
 800447c:	dc28      	bgt.n	80044d0 <_printf_common+0xa4>
 800447e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	3300      	adds	r3, #0
 8004486:	bf18      	it	ne
 8004488:	2301      	movne	r3, #1
 800448a:	0692      	lsls	r2, r2, #26
 800448c:	d42d      	bmi.n	80044ea <_printf_common+0xbe>
 800448e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004492:	4639      	mov	r1, r7
 8004494:	4630      	mov	r0, r6
 8004496:	47c0      	blx	r8
 8004498:	3001      	adds	r0, #1
 800449a:	d020      	beq.n	80044de <_printf_common+0xb2>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	68e5      	ldr	r5, [r4, #12]
 80044a0:	f8d9 2000 	ldr.w	r2, [r9]
 80044a4:	f003 0306 	and.w	r3, r3, #6
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	bf08      	it	eq
 80044ac:	1aad      	subeq	r5, r5, r2
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	bf0c      	ite	eq
 80044b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b8:	2500      	movne	r5, #0
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bfc4      	itt	gt
 80044be:	1a9b      	subgt	r3, r3, r2
 80044c0:	18ed      	addgt	r5, r5, r3
 80044c2:	f04f 0900 	mov.w	r9, #0
 80044c6:	341a      	adds	r4, #26
 80044c8:	454d      	cmp	r5, r9
 80044ca:	d11a      	bne.n	8004502 <_printf_common+0xd6>
 80044cc:	2000      	movs	r0, #0
 80044ce:	e008      	b.n	80044e2 <_printf_common+0xb6>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4652      	mov	r2, sl
 80044d4:	4639      	mov	r1, r7
 80044d6:	4630      	mov	r0, r6
 80044d8:	47c0      	blx	r8
 80044da:	3001      	adds	r0, #1
 80044dc:	d103      	bne.n	80044e6 <_printf_common+0xba>
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e6:	3501      	adds	r5, #1
 80044e8:	e7c3      	b.n	8004472 <_printf_common+0x46>
 80044ea:	18e1      	adds	r1, r4, r3
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	2030      	movs	r0, #48	; 0x30
 80044f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f4:	4422      	add	r2, r4
 80044f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044fe:	3302      	adds	r3, #2
 8004500:	e7c5      	b.n	800448e <_printf_common+0x62>
 8004502:	2301      	movs	r3, #1
 8004504:	4622      	mov	r2, r4
 8004506:	4639      	mov	r1, r7
 8004508:	4630      	mov	r0, r6
 800450a:	47c0      	blx	r8
 800450c:	3001      	adds	r0, #1
 800450e:	d0e6      	beq.n	80044de <_printf_common+0xb2>
 8004510:	f109 0901 	add.w	r9, r9, #1
 8004514:	e7d8      	b.n	80044c8 <_printf_common+0x9c>
	...

08004518 <_printf_i>:
 8004518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800451c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004520:	460c      	mov	r4, r1
 8004522:	7e09      	ldrb	r1, [r1, #24]
 8004524:	b085      	sub	sp, #20
 8004526:	296e      	cmp	r1, #110	; 0x6e
 8004528:	4617      	mov	r7, r2
 800452a:	4606      	mov	r6, r0
 800452c:	4698      	mov	r8, r3
 800452e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004530:	f000 80b3 	beq.w	800469a <_printf_i+0x182>
 8004534:	d822      	bhi.n	800457c <_printf_i+0x64>
 8004536:	2963      	cmp	r1, #99	; 0x63
 8004538:	d036      	beq.n	80045a8 <_printf_i+0x90>
 800453a:	d80a      	bhi.n	8004552 <_printf_i+0x3a>
 800453c:	2900      	cmp	r1, #0
 800453e:	f000 80b9 	beq.w	80046b4 <_printf_i+0x19c>
 8004542:	2958      	cmp	r1, #88	; 0x58
 8004544:	f000 8083 	beq.w	800464e <_printf_i+0x136>
 8004548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800454c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004550:	e032      	b.n	80045b8 <_printf_i+0xa0>
 8004552:	2964      	cmp	r1, #100	; 0x64
 8004554:	d001      	beq.n	800455a <_printf_i+0x42>
 8004556:	2969      	cmp	r1, #105	; 0x69
 8004558:	d1f6      	bne.n	8004548 <_printf_i+0x30>
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	0605      	lsls	r5, r0, #24
 8004560:	f103 0104 	add.w	r1, r3, #4
 8004564:	d52a      	bpl.n	80045bc <_printf_i+0xa4>
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6011      	str	r1, [r2, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	da03      	bge.n	8004576 <_printf_i+0x5e>
 800456e:	222d      	movs	r2, #45	; 0x2d
 8004570:	425b      	negs	r3, r3
 8004572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004576:	486f      	ldr	r0, [pc, #444]	; (8004734 <_printf_i+0x21c>)
 8004578:	220a      	movs	r2, #10
 800457a:	e039      	b.n	80045f0 <_printf_i+0xd8>
 800457c:	2973      	cmp	r1, #115	; 0x73
 800457e:	f000 809d 	beq.w	80046bc <_printf_i+0x1a4>
 8004582:	d808      	bhi.n	8004596 <_printf_i+0x7e>
 8004584:	296f      	cmp	r1, #111	; 0x6f
 8004586:	d020      	beq.n	80045ca <_printf_i+0xb2>
 8004588:	2970      	cmp	r1, #112	; 0x70
 800458a:	d1dd      	bne.n	8004548 <_printf_i+0x30>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f043 0320 	orr.w	r3, r3, #32
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	e003      	b.n	800459e <_printf_i+0x86>
 8004596:	2975      	cmp	r1, #117	; 0x75
 8004598:	d017      	beq.n	80045ca <_printf_i+0xb2>
 800459a:	2978      	cmp	r1, #120	; 0x78
 800459c:	d1d4      	bne.n	8004548 <_printf_i+0x30>
 800459e:	2378      	movs	r3, #120	; 0x78
 80045a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045a4:	4864      	ldr	r0, [pc, #400]	; (8004738 <_printf_i+0x220>)
 80045a6:	e055      	b.n	8004654 <_printf_i+0x13c>
 80045a8:	6813      	ldr	r3, [r2, #0]
 80045aa:	1d19      	adds	r1, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6011      	str	r1, [r2, #0]
 80045b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b8:	2301      	movs	r3, #1
 80045ba:	e08c      	b.n	80046d6 <_printf_i+0x1be>
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6011      	str	r1, [r2, #0]
 80045c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045c4:	bf18      	it	ne
 80045c6:	b21b      	sxthne	r3, r3
 80045c8:	e7cf      	b.n	800456a <_printf_i+0x52>
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	6825      	ldr	r5, [r4, #0]
 80045ce:	1d18      	adds	r0, r3, #4
 80045d0:	6010      	str	r0, [r2, #0]
 80045d2:	0628      	lsls	r0, r5, #24
 80045d4:	d501      	bpl.n	80045da <_printf_i+0xc2>
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	e002      	b.n	80045e0 <_printf_i+0xc8>
 80045da:	0668      	lsls	r0, r5, #25
 80045dc:	d5fb      	bpl.n	80045d6 <_printf_i+0xbe>
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	4854      	ldr	r0, [pc, #336]	; (8004734 <_printf_i+0x21c>)
 80045e2:	296f      	cmp	r1, #111	; 0x6f
 80045e4:	bf14      	ite	ne
 80045e6:	220a      	movne	r2, #10
 80045e8:	2208      	moveq	r2, #8
 80045ea:	2100      	movs	r1, #0
 80045ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f0:	6865      	ldr	r5, [r4, #4]
 80045f2:	60a5      	str	r5, [r4, #8]
 80045f4:	2d00      	cmp	r5, #0
 80045f6:	f2c0 8095 	blt.w	8004724 <_printf_i+0x20c>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	f021 0104 	bic.w	r1, r1, #4
 8004600:	6021      	str	r1, [r4, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d13d      	bne.n	8004682 <_printf_i+0x16a>
 8004606:	2d00      	cmp	r5, #0
 8004608:	f040 808e 	bne.w	8004728 <_printf_i+0x210>
 800460c:	4665      	mov	r5, ip
 800460e:	2a08      	cmp	r2, #8
 8004610:	d10b      	bne.n	800462a <_printf_i+0x112>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d508      	bpl.n	800462a <_printf_i+0x112>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	6862      	ldr	r2, [r4, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	bfde      	ittt	le
 8004620:	2330      	movle	r3, #48	; 0x30
 8004622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800462a:	ebac 0305 	sub.w	r3, ip, r5
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	f8cd 8000 	str.w	r8, [sp]
 8004634:	463b      	mov	r3, r7
 8004636:	aa03      	add	r2, sp, #12
 8004638:	4621      	mov	r1, r4
 800463a:	4630      	mov	r0, r6
 800463c:	f7ff fef6 	bl	800442c <_printf_common>
 8004640:	3001      	adds	r0, #1
 8004642:	d14d      	bne.n	80046e0 <_printf_i+0x1c8>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	b005      	add	sp, #20
 800464a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800464e:	4839      	ldr	r0, [pc, #228]	; (8004734 <_printf_i+0x21c>)
 8004650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	1d1d      	adds	r5, r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6015      	str	r5, [r2, #0]
 800465e:	060a      	lsls	r2, r1, #24
 8004660:	d50b      	bpl.n	800467a <_printf_i+0x162>
 8004662:	07ca      	lsls	r2, r1, #31
 8004664:	bf44      	itt	mi
 8004666:	f041 0120 	orrmi.w	r1, r1, #32
 800466a:	6021      	strmi	r1, [r4, #0]
 800466c:	b91b      	cbnz	r3, 8004676 <_printf_i+0x15e>
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	f022 0220 	bic.w	r2, r2, #32
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	2210      	movs	r2, #16
 8004678:	e7b7      	b.n	80045ea <_printf_i+0xd2>
 800467a:	064d      	lsls	r5, r1, #25
 800467c:	bf48      	it	mi
 800467e:	b29b      	uxthmi	r3, r3
 8004680:	e7ef      	b.n	8004662 <_printf_i+0x14a>
 8004682:	4665      	mov	r5, ip
 8004684:	fbb3 f1f2 	udiv	r1, r3, r2
 8004688:	fb02 3311 	mls	r3, r2, r1, r3
 800468c:	5cc3      	ldrb	r3, [r0, r3]
 800468e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004692:	460b      	mov	r3, r1
 8004694:	2900      	cmp	r1, #0
 8004696:	d1f5      	bne.n	8004684 <_printf_i+0x16c>
 8004698:	e7b9      	b.n	800460e <_printf_i+0xf6>
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	6825      	ldr	r5, [r4, #0]
 800469e:	6961      	ldr	r1, [r4, #20]
 80046a0:	1d18      	adds	r0, r3, #4
 80046a2:	6010      	str	r0, [r2, #0]
 80046a4:	0628      	lsls	r0, r5, #24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	d501      	bpl.n	80046ae <_printf_i+0x196>
 80046aa:	6019      	str	r1, [r3, #0]
 80046ac:	e002      	b.n	80046b4 <_printf_i+0x19c>
 80046ae:	066a      	lsls	r2, r5, #25
 80046b0:	d5fb      	bpl.n	80046aa <_printf_i+0x192>
 80046b2:	8019      	strh	r1, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	4665      	mov	r5, ip
 80046ba:	e7b9      	b.n	8004630 <_printf_i+0x118>
 80046bc:	6813      	ldr	r3, [r2, #0]
 80046be:	1d19      	adds	r1, r3, #4
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	681d      	ldr	r5, [r3, #0]
 80046c4:	6862      	ldr	r2, [r4, #4]
 80046c6:	2100      	movs	r1, #0
 80046c8:	4628      	mov	r0, r5
 80046ca:	f7fb fd91 	bl	80001f0 <memchr>
 80046ce:	b108      	cbz	r0, 80046d4 <_printf_i+0x1bc>
 80046d0:	1b40      	subs	r0, r0, r5
 80046d2:	6060      	str	r0, [r4, #4]
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	2300      	movs	r3, #0
 80046da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046de:	e7a7      	b.n	8004630 <_printf_i+0x118>
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	462a      	mov	r2, r5
 80046e4:	4639      	mov	r1, r7
 80046e6:	4630      	mov	r0, r6
 80046e8:	47c0      	blx	r8
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0aa      	beq.n	8004644 <_printf_i+0x12c>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	079b      	lsls	r3, r3, #30
 80046f2:	d413      	bmi.n	800471c <_printf_i+0x204>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e7a3      	b.n	8004648 <_printf_i+0x130>
 8004700:	2301      	movs	r3, #1
 8004702:	464a      	mov	r2, r9
 8004704:	4639      	mov	r1, r7
 8004706:	4630      	mov	r0, r6
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d09a      	beq.n	8004644 <_printf_i+0x12c>
 800470e:	3501      	adds	r5, #1
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	9a03      	ldr	r2, [sp, #12]
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	42ab      	cmp	r3, r5
 8004718:	dcf2      	bgt.n	8004700 <_printf_i+0x1e8>
 800471a:	e7eb      	b.n	80046f4 <_printf_i+0x1dc>
 800471c:	2500      	movs	r5, #0
 800471e:	f104 0919 	add.w	r9, r4, #25
 8004722:	e7f5      	b.n	8004710 <_printf_i+0x1f8>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ac      	bne.n	8004682 <_printf_i+0x16a>
 8004728:	7803      	ldrb	r3, [r0, #0]
 800472a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800472e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004732:	e76c      	b.n	800460e <_printf_i+0xf6>
 8004734:	080049bd 	.word	0x080049bd
 8004738:	080049ce 	.word	0x080049ce

0800473c <memcpy>:
 800473c:	b510      	push	{r4, lr}
 800473e:	1e43      	subs	r3, r0, #1
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	d100      	bne.n	8004748 <memcpy+0xc>
 8004746:	bd10      	pop	{r4, pc}
 8004748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004750:	e7f7      	b.n	8004742 <memcpy+0x6>

08004752 <memmove>:
 8004752:	4288      	cmp	r0, r1
 8004754:	b510      	push	{r4, lr}
 8004756:	eb01 0302 	add.w	r3, r1, r2
 800475a:	d807      	bhi.n	800476c <memmove+0x1a>
 800475c:	1e42      	subs	r2, r0, #1
 800475e:	4299      	cmp	r1, r3
 8004760:	d00a      	beq.n	8004778 <memmove+0x26>
 8004762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004766:	f802 4f01 	strb.w	r4, [r2, #1]!
 800476a:	e7f8      	b.n	800475e <memmove+0xc>
 800476c:	4283      	cmp	r3, r0
 800476e:	d9f5      	bls.n	800475c <memmove+0xa>
 8004770:	1881      	adds	r1, r0, r2
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	42d3      	cmn	r3, r2
 8004776:	d100      	bne.n	800477a <memmove+0x28>
 8004778:	bd10      	pop	{r4, pc}
 800477a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800477e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004782:	e7f7      	b.n	8004774 <memmove+0x22>

08004784 <_free_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4605      	mov	r5, r0
 8004788:	2900      	cmp	r1, #0
 800478a:	d045      	beq.n	8004818 <_free_r+0x94>
 800478c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004790:	1f0c      	subs	r4, r1, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfb8      	it	lt
 8004796:	18e4      	addlt	r4, r4, r3
 8004798:	f000 f8d2 	bl	8004940 <__malloc_lock>
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <_free_r+0x98>)
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	4610      	mov	r0, r2
 80047a2:	b933      	cbnz	r3, 80047b2 <_free_r+0x2e>
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6014      	str	r4, [r2, #0]
 80047a8:	4628      	mov	r0, r5
 80047aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ae:	f000 b8c8 	b.w	8004942 <__malloc_unlock>
 80047b2:	42a3      	cmp	r3, r4
 80047b4:	d90c      	bls.n	80047d0 <_free_r+0x4c>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	1862      	adds	r2, r4, r1
 80047ba:	4293      	cmp	r3, r2
 80047bc:	bf04      	itt	eq
 80047be:	681a      	ldreq	r2, [r3, #0]
 80047c0:	685b      	ldreq	r3, [r3, #4]
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	bf04      	itt	eq
 80047c6:	1852      	addeq	r2, r2, r1
 80047c8:	6022      	streq	r2, [r4, #0]
 80047ca:	6004      	str	r4, [r0, #0]
 80047cc:	e7ec      	b.n	80047a8 <_free_r+0x24>
 80047ce:	4613      	mov	r3, r2
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	b10a      	cbz	r2, 80047d8 <_free_r+0x54>
 80047d4:	42a2      	cmp	r2, r4
 80047d6:	d9fa      	bls.n	80047ce <_free_r+0x4a>
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	1858      	adds	r0, r3, r1
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d10b      	bne.n	80047f8 <_free_r+0x74>
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	4401      	add	r1, r0
 80047e4:	1858      	adds	r0, r3, r1
 80047e6:	4282      	cmp	r2, r0
 80047e8:	6019      	str	r1, [r3, #0]
 80047ea:	d1dd      	bne.n	80047a8 <_free_r+0x24>
 80047ec:	6810      	ldr	r0, [r2, #0]
 80047ee:	6852      	ldr	r2, [r2, #4]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	4401      	add	r1, r0
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	e7d7      	b.n	80047a8 <_free_r+0x24>
 80047f8:	d902      	bls.n	8004800 <_free_r+0x7c>
 80047fa:	230c      	movs	r3, #12
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	e7d3      	b.n	80047a8 <_free_r+0x24>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	1821      	adds	r1, r4, r0
 8004804:	428a      	cmp	r2, r1
 8004806:	bf04      	itt	eq
 8004808:	6811      	ldreq	r1, [r2, #0]
 800480a:	6852      	ldreq	r2, [r2, #4]
 800480c:	6062      	str	r2, [r4, #4]
 800480e:	bf04      	itt	eq
 8004810:	1809      	addeq	r1, r1, r0
 8004812:	6021      	streq	r1, [r4, #0]
 8004814:	605c      	str	r4, [r3, #4]
 8004816:	e7c7      	b.n	80047a8 <_free_r+0x24>
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	200000c4 	.word	0x200000c4

08004820 <_malloc_r>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	1ccd      	adds	r5, r1, #3
 8004824:	f025 0503 	bic.w	r5, r5, #3
 8004828:	3508      	adds	r5, #8
 800482a:	2d0c      	cmp	r5, #12
 800482c:	bf38      	it	cc
 800482e:	250c      	movcc	r5, #12
 8004830:	2d00      	cmp	r5, #0
 8004832:	4606      	mov	r6, r0
 8004834:	db01      	blt.n	800483a <_malloc_r+0x1a>
 8004836:	42a9      	cmp	r1, r5
 8004838:	d903      	bls.n	8004842 <_malloc_r+0x22>
 800483a:	230c      	movs	r3, #12
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	f000 f87d 	bl	8004940 <__malloc_lock>
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <_malloc_r+0xac>)
 8004848:	6814      	ldr	r4, [r2, #0]
 800484a:	4621      	mov	r1, r4
 800484c:	b991      	cbnz	r1, 8004874 <_malloc_r+0x54>
 800484e:	4c20      	ldr	r4, [pc, #128]	; (80048d0 <_malloc_r+0xb0>)
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	b91b      	cbnz	r3, 800485c <_malloc_r+0x3c>
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f863 	bl	8004920 <_sbrk_r>
 800485a:	6020      	str	r0, [r4, #0]
 800485c:	4629      	mov	r1, r5
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f85e 	bl	8004920 <_sbrk_r>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d124      	bne.n	80048b2 <_malloc_r+0x92>
 8004868:	230c      	movs	r3, #12
 800486a:	6033      	str	r3, [r6, #0]
 800486c:	4630      	mov	r0, r6
 800486e:	f000 f868 	bl	8004942 <__malloc_unlock>
 8004872:	e7e4      	b.n	800483e <_malloc_r+0x1e>
 8004874:	680b      	ldr	r3, [r1, #0]
 8004876:	1b5b      	subs	r3, r3, r5
 8004878:	d418      	bmi.n	80048ac <_malloc_r+0x8c>
 800487a:	2b0b      	cmp	r3, #11
 800487c:	d90f      	bls.n	800489e <_malloc_r+0x7e>
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	50cd      	str	r5, [r1, r3]
 8004882:	18cc      	adds	r4, r1, r3
 8004884:	4630      	mov	r0, r6
 8004886:	f000 f85c 	bl	8004942 <__malloc_unlock>
 800488a:	f104 000b 	add.w	r0, r4, #11
 800488e:	1d23      	adds	r3, r4, #4
 8004890:	f020 0007 	bic.w	r0, r0, #7
 8004894:	1ac3      	subs	r3, r0, r3
 8004896:	d0d3      	beq.n	8004840 <_malloc_r+0x20>
 8004898:	425a      	negs	r2, r3
 800489a:	50e2      	str	r2, [r4, r3]
 800489c:	e7d0      	b.n	8004840 <_malloc_r+0x20>
 800489e:	428c      	cmp	r4, r1
 80048a0:	684b      	ldr	r3, [r1, #4]
 80048a2:	bf16      	itet	ne
 80048a4:	6063      	strne	r3, [r4, #4]
 80048a6:	6013      	streq	r3, [r2, #0]
 80048a8:	460c      	movne	r4, r1
 80048aa:	e7eb      	b.n	8004884 <_malloc_r+0x64>
 80048ac:	460c      	mov	r4, r1
 80048ae:	6849      	ldr	r1, [r1, #4]
 80048b0:	e7cc      	b.n	800484c <_malloc_r+0x2c>
 80048b2:	1cc4      	adds	r4, r0, #3
 80048b4:	f024 0403 	bic.w	r4, r4, #3
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d005      	beq.n	80048c8 <_malloc_r+0xa8>
 80048bc:	1a21      	subs	r1, r4, r0
 80048be:	4630      	mov	r0, r6
 80048c0:	f000 f82e 	bl	8004920 <_sbrk_r>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d0cf      	beq.n	8004868 <_malloc_r+0x48>
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	e7db      	b.n	8004884 <_malloc_r+0x64>
 80048cc:	200000c4 	.word	0x200000c4
 80048d0:	200000c8 	.word	0x200000c8

080048d4 <_realloc_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	4607      	mov	r7, r0
 80048d8:	4614      	mov	r4, r2
 80048da:	460e      	mov	r6, r1
 80048dc:	b921      	cbnz	r1, 80048e8 <_realloc_r+0x14>
 80048de:	4611      	mov	r1, r2
 80048e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048e4:	f7ff bf9c 	b.w	8004820 <_malloc_r>
 80048e8:	b922      	cbnz	r2, 80048f4 <_realloc_r+0x20>
 80048ea:	f7ff ff4b 	bl	8004784 <_free_r>
 80048ee:	4625      	mov	r5, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f4:	f000 f826 	bl	8004944 <_malloc_usable_size_r>
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d20f      	bcs.n	800491c <_realloc_r+0x48>
 80048fc:	4621      	mov	r1, r4
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ff8e 	bl	8004820 <_malloc_r>
 8004904:	4605      	mov	r5, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d0f2      	beq.n	80048f0 <_realloc_r+0x1c>
 800490a:	4631      	mov	r1, r6
 800490c:	4622      	mov	r2, r4
 800490e:	f7ff ff15 	bl	800473c <memcpy>
 8004912:	4631      	mov	r1, r6
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff ff35 	bl	8004784 <_free_r>
 800491a:	e7e9      	b.n	80048f0 <_realloc_r+0x1c>
 800491c:	4635      	mov	r5, r6
 800491e:	e7e7      	b.n	80048f0 <_realloc_r+0x1c>

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4c06      	ldr	r4, [pc, #24]	; (800493c <_sbrk_r+0x1c>)
 8004924:	2300      	movs	r3, #0
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fd f824 	bl	8001978 <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	200001c0 	.word	0x200001c0

08004940 <__malloc_lock>:
 8004940:	4770      	bx	lr

08004942 <__malloc_unlock>:
 8004942:	4770      	bx	lr

08004944 <_malloc_usable_size_r>:
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f18      	subs	r0, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbc      	itt	lt
 800494e:	580b      	ldrlt	r3, [r1, r0]
 8004950:	18c0      	addlt	r0, r0, r3
 8004952:	4770      	bx	lr

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
