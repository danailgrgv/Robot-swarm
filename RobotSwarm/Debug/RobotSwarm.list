
RobotSwarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080044d8  080044d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d8  080044d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000074  08004554  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004554  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a43  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b4  00000000  00000000  00028ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d8  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  0002a778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fbf6  00000000  00000000  0002adc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ad6  00000000  00000000  0004a9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0697  00000000  00000000  00051494  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  00111ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800444c 	.word	0x0800444c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800444c 	.word	0x0800444c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <main>:
static enum carStates prevState = STOPPED;

uint8_t myTxData[13] = "Hello Happy\r\n";

int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b52:	f000 fdab 	bl	80016ac <HAL_Init>
  SystemClock_Config();
 8000b56:	f000 fbad 	bl	80012b4 <SystemClock_Config>
  MX_GPIO_Init();
 8000b5a:	f000 fc39 	bl	80013d0 <MX_GPIO_Init>

  pinSetup();
 8000b5e:	f000 f8ae 	bl	8000cbe <pinSetup>
  timer2Setup();
 8000b62:	f000 f8db 	bl	8000d1c <timer2Setup>
  timer2ChannelSetup();
 8000b66:	f000 f9e3 	bl	8000f30 <timer2ChannelSetup>
  timer4Setup();
 8000b6a:	f000 f8f3 	bl	8000d54 <timer4Setup>
  TIM3_C1_Init();
 8000b6e:	f000 fad3 	bl	8001118 <TIM3_C1_Init>

  MX_USART2_UART_Init();
 8000b72:	f000 fbfd 	bl	8001370 <MX_USART2_UART_Init>
  while (1)
  {
	  int distance = timespan / 58;
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <main+0x120>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a3d      	ldr	r2, [pc, #244]	; (8000c70 <main+0x124>)
 8000b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b80:	441a      	add	r2, r3
 8000b82:	1152      	asrs	r2, r2, #5
 8000b84:	17db      	asrs	r3, r3, #31
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
	  static int printCounter = 0;
	  if(HAL_GetTick() > 1000 * printCounter)
 8000b8a:	f000 fde9 	bl	8001760 <HAL_GetTick>
 8000b8e:	4601      	mov	r1, r0
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <main+0x128>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d915      	bls.n	8000bcc <main+0x80>
	  {
		  char buffer[50];
		  sprintf(buffer, "%d\r\n", distance);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba4:	4934      	ldr	r1, [pc, #208]	; (8000c78 <main+0x12c>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 f84a 	bl	8003c40 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fb16 	bl	80001e0 <strlen>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4639      	mov	r1, r7
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	482f      	ldr	r0, [pc, #188]	; (8000c7c <main+0x130>)
 8000bbe:	f002 fc3d 	bl	800343c <HAL_UART_Transmit>
		  printCounter++;
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <main+0x128>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <main+0x128>)
 8000bca:	6013      	str	r3, [r2, #0]
	  }
	  switch(currentState)
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <main+0x134>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d009      	beq.n	8000be8 <main+0x9c>
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d01d      	beq.n	8000c14 <main+0xc8>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d000      	beq.n	8000bde <main+0x92>
			  rotateVehicle((HAL_GetTick() % 180) - 90);
			  HAL_Delay(500);
		  }
		  break;
	  default:
		  break;
 8000bdc:	e045      	b.n	8000c6a <main+0x11e>
		  drive(0);
 8000bde:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000c84 <main+0x138>
 8000be2:	f000 f857 	bl	8000c94 <drive>
		  break;
 8000be6:	e040      	b.n	8000c6a <main+0x11e>
		  if(distance < 10)
 8000be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	dc03      	bgt.n	8000bf6 <main+0xaa>
			  currentState = TURNING;
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <main+0x134>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	701a      	strb	r2, [r3, #0]
		  break;
 8000bf4:	e038      	b.n	8000c68 <main+0x11c>
		  } else if(prevState != currentState)
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x13c>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <main+0x134>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d032      	beq.n	8000c68 <main+0x11c>
			  drive(0.4);
 8000c02:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000c8c <main+0x140>
 8000c06:	f000 f845 	bl	8000c94 <drive>
			  prevState = currentState;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <main+0x134>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <main+0x13c>)
 8000c10:	701a      	strb	r2, [r3, #0]
		  break;
 8000c12:	e029      	b.n	8000c68 <main+0x11c>
		  if(prevState != currentState)
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <main+0x13c>)
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <main+0x134>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d007      	beq.n	8000c30 <main+0xe4>
			  drive(0);
 8000c20:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000c84 <main+0x138>
 8000c24:	f000 f836 	bl	8000c94 <drive>
			  prevState = currentState;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <main+0x134>)
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <main+0x13c>)
 8000c2e:	701a      	strb	r2, [r3, #0]
		  if(distance > 10)
 8000c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c32:	2b0a      	cmp	r3, #10
 8000c34:	dd03      	ble.n	8000c3e <main+0xf2>
			  currentState = DRIVING;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <main+0x134>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		  break;
 8000c3c:	e015      	b.n	8000c6a <main+0x11e>
			  rotateVehicle((HAL_GetTick() % 180) - 90);
 8000c3e:	f000 fd8f 	bl	8001760 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	0893      	lsrs	r3, r2, #2
 8000c46:	4912      	ldr	r1, [pc, #72]	; (8000c90 <main+0x144>)
 8000c48:	fba1 1303 	umull	r1, r3, r1, r3
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	21b4      	movs	r1, #180	; 0xb4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	3b5a      	subs	r3, #90	; 0x5a
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f9f1 	bl	8001040 <rotateVehicle>
			  HAL_Delay(500);
 8000c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c62:	f000 fd89 	bl	8001778 <HAL_Delay>
		  break;
 8000c66:	e000      	b.n	8000c6a <main+0x11e>
		  break;
 8000c68:	bf00      	nop
  {
 8000c6a:	e784      	b.n	8000b76 <main+0x2a>
 8000c6c:	20000090 	.word	0x20000090
 8000c70:	8d3dcb09 	.word	0x8d3dcb09
 8000c74:	200000a0 	.word	0x200000a0
 8000c78:	08004464 	.word	0x08004464
 8000c7c:	200000b4 	.word	0x200000b4
 8000c80:	20000000 	.word	0x20000000
 8000c84:	00000000 	.word	0x00000000
 8000c88:	2000009c 	.word	0x2000009c
 8000c8c:	3ecccccd 	.word	0x3ecccccd
 8000c90:	16c16c17 	.word	0x16c16c17

08000c94 <drive>:
	  }
  }
}

static void drive(float power)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	ed87 0a01 	vstr	s0, [r7, #4]
	setDutyCycleChannel1(-power);
 8000c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca2:	eef1 7a67 	vneg.f32	s15, s15
 8000ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8000caa:	f000 f8b1 	bl	8000e10 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 8000cae:	ed97 0a01 	vldr	s0, [r7, #4]
 8000cb2:	f000 f8f5 	bl	8000ea0 <setDutyCycleChannel2>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <pinSetup>:

static void pinSetup(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER1_1 | GPIO_MODER_MODER2_1;
 8000cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ccc:	f443 6302 	orr.w	r3, r3, #2080	; 0x820
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0);
 8000cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce0:	f423 6382 	bic.w	r3, r3, #1040	; 0x410
 8000ce4:	f023 0304 	bic.w	r3, r3, #4
 8000ce8:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL5_Msk | GPIO_AFRL_AFRL1_Msk | GPIO_AFRL_AFRL2_Msk);
 8000cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf4:	f023 13f0 	bic.w	r3, r3, #15728880	; 0xf000f0
 8000cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cfc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL5_Pos) | (1 << GPIO_AFRL_AFRL1_Pos) | (1 << GPIO_AFRL_AFRL2_Pos);
 8000cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d08:	f043 1310 	orr.w	r3, r3, #1048592	; 0x100010
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d10:	6213      	str	r3, [r2, #32]

}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <timer2Setup>:

static void timer2Setup(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <timer2Setup+0x34>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <timer2Setup+0x34>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 72 - 1;
 8000d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d30:	2247      	movs	r2, #71	; 0x47
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR_VALUE - 1;
 8000d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000

08000d54 <timer4Setup>:

static void timer4Setup(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <timer4Setup+0xac>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <timer4Setup+0xac>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = 72 - 1;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <timer4Setup+0xb0>)
 8000d66:	2247      	movs	r2, #71	; 0x47
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 50 - 1;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <timer4Setup+0xb0>)
 8000d6c:	2231      	movs	r2, #49	; 0x31
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CNT = 0;
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <timer4Setup+0xb0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <timer4Setup+0xb0>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <timer4Setup+0xb0>)
 8000d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d80:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000d84:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <timer4Setup+0xb0>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <timer4Setup+0xb0>)
 8000d8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d90:	6193      	str	r3, [r2, #24]
	TIM4->CCR1 |= 0;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <timer4Setup+0xb0>)
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <timer4Setup+0xb0>)
 8000d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d98:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCER |= TIM_CCER_CC1E_Msk;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <timer4Setup+0xb0>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <timer4Setup+0xb0>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1P_Msk;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <timer4Setup+0xb0>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <timer4Setup+0xb0>)
 8000dac:	f023 0302 	bic.w	r3, r3, #2
 8000db0:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= GPIO_MODER_MODER6_1;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <timer4Setup+0xb4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <timer4Setup+0xb4>)
 8000db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dbc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6_0);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <timer4Setup+0xb4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <timer4Setup+0xb4>)
 8000dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dc8:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL6_Msk);
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <timer4Setup+0xb4>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <timer4Setup+0xb4>)
 8000dd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000dd4:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL6_Pos);
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <timer4Setup+0xb4>)
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <timer4Setup+0xb4>)
 8000ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de0:	6213      	str	r3, [r2, #32]

	TIM4->CCR1 = 10 - 1;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <timer4Setup+0xb0>)
 8000de4:	2209      	movs	r2, #9
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34

	TIM4->CR1 |= TIM_CR1_CEN;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <timer4Setup+0xb0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <timer4Setup+0xb0>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40000800 	.word	0x40000800
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	00000000 	.word	0x00000000

08000e10 <setDutyCycleChannel1>:

static void setDutyCycleChannel1(float power)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	dd03      	ble.n	8000e34 <setDutyCycleChannel1+0x24>
 8000e2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e00a      	b.n	8000e4a <setDutyCycleChannel1+0x3a>
	else if(power < -1) power = -1;
 8000e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d501      	bpl.n	8000e4a <setDutyCycleChannel1+0x3a>
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <setDutyCycleChannel1+0x88>)
 8000e48:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fb84 	bl	8000558 <__aeabi_f2d>
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <setDutyCycleChannel1+0x8c>)
 8000e56:	f7ff fbd7 	bl	8000608 <__aeabi_dmul>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	4621      	mov	r1, r4
 8000e62:	a30b      	add	r3, pc, #44	; (adr r3, 8000e90 <setDutyCycleChannel1+0x80>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fa18 	bl	800029c <__adddf3>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	461a      	mov	r2, r3
 8000e72:	4623      	mov	r3, r4
 8000e74:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fdfe 	bl	8000a7c <__aeabi_d2uiz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	f3af 8000 	nop.w
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40977000 	.word	0x40977000
 8000e98:	bf800000 	.word	0xbf800000
 8000e9c:	406b8000 	.word	0x406b8000

08000ea0 <setDutyCycleChannel2>:

static void setDutyCycleChannel2(float power)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	dd03      	ble.n	8000ec4 <setDutyCycleChannel2+0x24>
 8000ebc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e00a      	b.n	8000eda <setDutyCycleChannel2+0x3a>
	else if(power < -1) power = -1;
 8000ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	d501      	bpl.n	8000eda <setDutyCycleChannel2+0x3a>
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <setDutyCycleChannel2+0x88>)
 8000ed8:	607b      	str	r3, [r7, #4]
	TIM2->CCR2 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fb3c 	bl	8000558 <__aeabi_f2d>
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <setDutyCycleChannel2+0x8c>)
 8000ee6:	f7ff fb8f 	bl	8000608 <__aeabi_dmul>
 8000eea:	4603      	mov	r3, r0
 8000eec:	460c      	mov	r4, r1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	a30b      	add	r3, pc, #44	; (adr r3, 8000f20 <setDutyCycleChannel2+0x80>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff f9d0 	bl	800029c <__adddf3>
 8000efc:	4603      	mov	r3, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdb6 	bl	8000a7c <__aeabi_d2uiz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40977000 	.word	0x40977000
 8000f28:	bf800000 	.word	0xbf800000
 8000f2c:	406b8000 	.word	0x406b8000

08000f30 <timer2ChannelSetup>:

static void timer2ChannelSetup(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	//Configure channel 1
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000f46:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f56:	6193      	str	r3, [r2, #24]
	TIM2->CCR1 |= 0;
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E_Msk;
 8000f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 8000f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	f023 0302 	bic.w	r3, r3, #2
 8000f82:	6213      	str	r3, [r2, #32]

	//Configure channel 2
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S_Msk | TIM_CCMR1_OC2M_Msk | TIM_CCMR1_OC2PE_Msk) ;
 8000f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f92:	f423 43f6 	bic.w	r3, r3, #31488	; 0x7b00
 8000f96:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000fa6:	6193      	str	r3, [r2, #24]
	TIM2->CCR2 |= 0;
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E_Msk;
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2P_Msk;
 8000fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fce:	f023 0320 	bic.w	r3, r3, #32
 8000fd2:	6213      	str	r3, [r2, #32]

	//Configure channel 3
	TIM2->CCMR2 &= ~(TIM_CCMR2_CC3S_Msk | TIM_CCMR2_OC3M_Msk | TIM_CCMR2_OC3PE_Msk);
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000fe6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ff6:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 |= 0;
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->CCER |= TIM_CCER_CC3E_Msk;
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC3P_Msk;
 8001014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001022:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8001024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <rotateVehicle>:

static void rotateVehicle(int rotationDegrees)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

	if(rotationDegrees == 0) return;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d051      	beq.n	80010f2 <rotateVehicle+0xb2>
	int delay;
	float power;
	if(rotationDegrees < 0)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	da1e      	bge.n	8001092 <rotateVehicle+0x52>
	{
		delay = -(20 + 13.67 * rotationDegrees);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fa6d 	bl	8000534 <__aeabi_i2d>
 800105a:	a329      	add	r3, pc, #164	; (adr r3, 8001100 <rotateVehicle+0xc0>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fad2 	bl	8000608 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <rotateVehicle+0xc8>)
 8001072:	f7ff f913 	bl	800029c <__adddf3>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4614      	mov	r4, r2
 800107c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fcd2 	bl	8000a2c <__aeabi_d2iz>
 8001088:	4603      	mov	r3, r0
 800108a:	60fb      	str	r3, [r7, #12]
		power = -0.3;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <rotateVehicle+0xcc>)
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	e01a      	b.n	80010c8 <rotateVehicle+0x88>
	} else
	{
		delay = 20 + 13.67 * rotationDegrees;
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fa4e 	bl	8000534 <__aeabi_i2d>
 8001098:	a319      	add	r3, pc, #100	; (adr r3, 8001100 <rotateVehicle+0xc0>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fab3 	bl	8000608 <__aeabi_dmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <rotateVehicle+0xc8>)
 80010b0:	f7ff f8f4 	bl	800029c <__adddf3>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f7ff fcb6 	bl	8000a2c <__aeabi_d2iz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
		power = 0.3;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <rotateVehicle+0xd0>)
 80010c6:	60bb      	str	r3, [r7, #8]
	}
	setDutyCycleChannel1(power);
 80010c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010cc:	f7ff fea0 	bl	8000e10 <setDutyCycleChannel1>
	setDutyCycleChannel2(power);
 80010d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80010d4:	f7ff fee4 	bl	8000ea0 <setDutyCycleChannel2>
	HAL_Delay(delay);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fb4c 	bl	8001778 <HAL_Delay>
	setDutyCycleChannel1(0);
 80010e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001114 <rotateVehicle+0xd4>
 80010e4:	f7ff fe94 	bl	8000e10 <setDutyCycleChannel1>
	setDutyCycleChannel2(0);
 80010e8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001114 <rotateVehicle+0xd4>
 80010ec:	f7ff fed8 	bl	8000ea0 <setDutyCycleChannel2>
 80010f0:	e000      	b.n	80010f4 <rotateVehicle+0xb4>
	if(rotationDegrees == 0) return;
 80010f2:	bf00      	nop
}
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	3d70a3d7 	.word	0x3d70a3d7
 8001104:	402b570a 	.word	0x402b570a
 8001108:	40340000 	.word	0x40340000
 800110c:	be99999a 	.word	0xbe99999a
 8001110:	3e99999a 	.word	0x3e99999a
 8001114:	00000000 	.word	0x00000000

08001118 <TIM3_C1_Init>:

// CONFIGURE TIM4 FOR RECEIVING INPUT SIGNAL
void TIM3_C1_Init(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    //Pin setup rewrite
    GPIOB->MODER |= GPIO_MODER_MODER4_1;
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <TIM3_C1_Init+0xf0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a39      	ldr	r2, [pc, #228]	; (8001208 <TIM3_C1_Init+0xf0>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER4_0;
 8001128:	4b37      	ldr	r3, [pc, #220]	; (8001208 <TIM3_C1_Init+0xf0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a36      	ldr	r2, [pc, #216]	; (8001208 <TIM3_C1_Init+0xf0>)
 800112e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR4_Msk;
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <TIM3_C1_Init+0xf0>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a33      	ldr	r2, [pc, #204]	; (8001208 <TIM3_C1_Init+0xf0>)
 800113a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800113e:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL4_Msk;
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <TIM3_C1_Init+0xf0>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a30      	ldr	r2, [pc, #192]	; (8001208 <TIM3_C1_Init+0xf0>)
 8001146:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800114a:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0x2 << GPIO_AFRL_AFRL4_Pos);
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <TIM3_C1_Init+0xf0>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <TIM3_C1_Init+0xf0>)
 8001152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001156:	6213      	str	r3, [r2, #32]

    //Timer rewrite
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <TIM3_C1_Init+0xf4>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a2b      	ldr	r2, [pc, #172]	; (800120c <TIM3_C1_Init+0xf4>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 72 - 1;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001166:	2247      	movs	r2, #71	; 0x47
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 65536 - 1;
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <TIM3_C1_Init+0xf8>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a26      	ldr	r2, [pc, #152]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001178:	f023 0303 	bic.w	r3, r3, #3
 800117c:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1F;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <TIM3_C1_Init+0xf8>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001194:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <TIM3_C1_Init+0xf8>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <TIM3_C1_Init+0xf8>)
 800119c:	f023 030c 	bic.w	r3, r3, #12
 80011a0:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1NP;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011a8:	f043 030a 	orr.w	r3, r3, #10
 80011ac:	6213      	str	r3, [r2, #32]
    TIM3->CCER |= TIM_CCER_CC1E;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6213      	str	r3, [r2, #32]
    TIM3->DIER |= TIM_DIER_CC1IE;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_CC1DE;	//DMA request
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d0:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= TIM_DIER_UIE;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 &= ~TIM_CR1_DIR;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011e4:	f023 0310 	bic.w	r3, r3, #16
 80011e8:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <TIM3_C1_Init+0xf8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 1);
 80011f6:	2101      	movs	r1, #1
 80011f8:	201d      	movs	r0, #29
 80011fa:	f7ff fc7d 	bl	8000af8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 80011fe:	201d      	movs	r0, #29
 8001200:	f7ff fc5c 	bl	8000abc <__NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	48000400 	.word	0x48000400
 800120c:	40021000 	.word	0x40021000
 8001210:	40000400 	.word	0x40000400

08001214 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	static int lineHigh = 0;
	// Check the update event flag
    if ((TIM3->SR & TIM_SR_UIF) != 0)
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <TIM3_IRQHandler+0x88>)
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <TIM3_IRQHandler+0x28>
    {
        overflow++;                        // if UIF = 1, increment overflow counter
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <TIM3_IRQHandler+0x8c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <TIM3_IRQHandler+0x8c>)
 800122c:	6013      	str	r3, [r2, #0]
        TIM3->SR &= ~TIM_SR_UIF;           // clear UIF
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <TIM3_IRQHandler+0x88>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <TIM3_IRQHandler+0x88>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6113      	str	r3, [r2, #16]
 800123a:	e024      	b.n	8001286 <TIM3_IRQHandler+0x72>
    }

    // Check capture event flag
    else if ((TIM3->SR & TIM_SR_CC1IF) != 0)
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <TIM3_IRQHandler+0x88>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01e      	beq.n	8001286 <TIM3_IRQHandler+0x72>
    {
        if(lineHigh)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <TIM3_IRQHandler+0x90>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00f      	beq.n	8001270 <TIM3_IRQHandler+0x5c>
        {
        	timespan = TIM3->CCR1 - newcounter + 65536 * overflow;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <TIM3_IRQHandler+0x88>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <TIM3_IRQHandler+0x94>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <TIM3_IRQHandler+0x8c>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	0412      	lsls	r2, r2, #16
 8001260:	4413      	add	r3, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <TIM3_IRQHandler+0x98>)
 8001266:	601a      	str	r2, [r3, #0]
        	//timespan = TIM3->CCR1;
        	lineHigh = 0;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <TIM3_IRQHandler+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e00a      	b.n	8001286 <TIM3_IRQHandler+0x72>
        } else
        {
        	//TIM3->CNT = 0;
        	overflow = 0;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <TIM3_IRQHandler+0x8c>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
        	newcounter = TIM3->CCR1;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <TIM3_IRQHandler+0x88>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	461a      	mov	r2, r3
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <TIM3_IRQHandler+0x94>)
 800127e:	601a      	str	r2, [r3, #0]
        	lineHigh = 1;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <TIM3_IRQHandler+0x90>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]
        }
    }
    EXTI->PR |= EXTI_PR_PIF4;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <TIM3_IRQHandler+0x9c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <TIM3_IRQHandler+0x9c>)
 800128c:	f043 0310 	orr.w	r3, r3, #16
 8001290:	6153      	str	r3, [r2, #20]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40000400 	.word	0x40000400
 80012a0:	20000098 	.word	0x20000098
 80012a4:	200000a4 	.word	0x200000a4
 80012a8:	20000094 	.word	0x20000094
 80012ac:	20000090 	.word	0x20000090
 80012b0:	40010400 	.word	0x40010400

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a6      	sub	sp, #152	; 0x98
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fcb4 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2258      	movs	r2, #88	; 0x58
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fca6 	bl	8003c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fcda 	bl	8001ccc <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800131e:	f000 f8bf 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2302      	movs	r3, #2
 8001328:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fbda 	bl	8002af8 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800134a:	f000 f8a9 	bl	80014a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800134e:	2302      	movs	r3, #2
 8001350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fe03 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001364:	f000 f89c 	bl	80014a0 <Error_Handler>
  }
}
 8001368:	bf00      	nop
 800136a:	3798      	adds	r7, #152	; 0x98
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_USART2_UART_Init+0x5c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800137c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013b4:	f001 fff4 	bl	80033a0 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 f86f 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000b4 	.word	0x200000b4
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_GPIO_Init+0xc4>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <MX_GPIO_Init+0xc4>)
 80013ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_GPIO_Init+0xc4>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_GPIO_Init+0xc4>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <MX_GPIO_Init+0xc4>)
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	6153      	str	r3, [r2, #20]
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_GPIO_Init+0xc4>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6153      	str	r3, [r2, #20]
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_GPIO_Init+0xc4>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2120      	movs	r1, #32
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f000 fc25 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_GPIO_Init+0xc8>)
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_GPIO_Init+0xcc>)
 8001468:	f000 fa8e 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800146c:	2320      	movs	r3, #32
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f000 fa7f 	bl	8001988 <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	10210000 	.word	0x10210000
 800149c:	48000800 	.word	0x48000800

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <Error_Handler+0x6>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014de:	2007      	movs	r0, #7
 80014e0:	f000 fa1e 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_UART_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d128      	bne.n	8001564 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_UART_MspInit+0x80>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f000 fa12 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f8ba 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f002 faf0 	bl	8003bdc <__errno>
 80015fc:	4602      	mov	r2, r0
 80015fe:	230c      	movs	r3, #12
 8001600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20010000 	.word	0x20010000
 8001628:	00000400 	.word	0x00000400
 800162c:	200000a8 	.word	0x200000a8
 8001630:	20000140 	.word	0x20000140

08001634 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001682:	f7ff ffd7 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 faaf 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168a:	f7ff fa5f 	bl	8000b4c <main>

0800168e <LoopForever>:

LoopForever:
    b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001690:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800169c:	080044e0 	.word	0x080044e0
  ldr r2, =_sbss
 80016a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016a4:	20000140 	.word	0x20000140

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f92f 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff feee 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f939 	bl	800196e <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f90f 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000004 	.word	0x20000004
 8001730:	2000000c 	.word	0x2000000c
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000138 	.word	0x20000138

08001760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;  
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000138 	.word	0x20000138

08001778 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffee 	bl	8001760 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_Delay+0x40>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffde 	bl	8001760 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__NVIC_SetPriorityGrouping>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_SetPriority>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff47 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff5c 	bl	8001804 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffb0 	bl	80018dc <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e160      	b.n	8001c5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8152 	beq.w	8001c54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d00b      	beq.n	80019d0 <HAL_GPIO_Init+0x48>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c4:	2b11      	cmp	r3, #17
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b12      	cmp	r3, #18
 80019ce:	d130      	bne.n	8001a32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a06:	2201      	movs	r2, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 0201 	and.w	r2, r3, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0xea>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d123      	bne.n	8001aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	6939      	ldr	r1, [r7, #16]
 8001ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0203 	and.w	r2, r3, #3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80ac 	beq.w	8001c54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afc:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a5d      	ldr	r2, [pc, #372]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b14:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b3e:	d025      	beq.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d01f      	beq.n	8001b88 <HAL_GPIO_Init+0x200>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d019      	beq.n	8001b84 <HAL_GPIO_Init+0x1fc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a4d      	ldr	r2, [pc, #308]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_GPIO_Init+0x1f8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1f4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <HAL_GPIO_Init+0x308>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1f0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4a      	ldr	r2, [pc, #296]	; (8001c94 <HAL_GPIO_Init+0x30c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1ec>
 8001b70:	2306      	movs	r3, #6
 8001b72:	e00c      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b74:	2307      	movs	r3, #7
 8001b76:	e00a      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b78:	2305      	movs	r3, #5
 8001b7a:	e008      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e004      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b9e:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd0:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bfa:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f ae97 	bne.w	8001998 <HAL_GPIO_Init+0x10>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	48000800 	.word	0x48000800
 8001c88:	48000c00 	.word	0x48000c00
 8001c8c:	48001000 	.word	0x48001000
 8001c90:	48001400 	.word	0x48001400
 8001c94:	48001800 	.word	0x48001800
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 bf01 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8160 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf6:	4bae      	ldr	r3, [pc, #696]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d02:	4bab      	ldr	r3, [pc, #684]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d159      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d152      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0x82>
 8001d48:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0xae>
 8001d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d6a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d76:	4b8e      	ldr	r3, [pc, #568]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d82:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d86:	fa92 f2a2 	rbit	r2, r2
 8001d8a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8102 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x2e8>
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80fc 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f000 be93 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x110>
 8001dce:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e030      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x134>
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01e      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x15a>
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a64      	ldr	r2, [pc, #400]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001e26:	4b62      	ldr	r3, [pc, #392]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a61      	ldr	r2, [pc, #388]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5e      	ldr	r2, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d059      	beq.n	8001efc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fc8a 	bl	8001760 <HAL_GetTick>
 8001e4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e52:	f7ff fc85 	bl	8001760 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d902      	bls.n	8001e68 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f000 be40 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 8001e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x1ce>
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1fa>
 8001e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001eb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ece:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001ed2:	fa92 f2a2 	rbit	r2, r2
 8001ed6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001eda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ab      	beq.n	8001e52 <HAL_RCC_OscConfig+0x186>
 8001efa:	e05c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fc30 	bl	8001760 <HAL_GetTick>
 8001f00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f06:	f7ff fc2b 	bl	8001760 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d902      	bls.n	8001f1c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f000 bde6 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0x282>
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x2ae>
 8001f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f52:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_RCC_OscConfig+0x2e4>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f82:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ab      	bne.n	8001f06 <HAL_RCC_OscConfig+0x23a>
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2ea>
 8001fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8170 	beq.w	80022a6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fc6:	4bd0      	ldr	r3, [pc, #832]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fd2:	4bcd      	ldr	r3, [pc, #820]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d16d      	bne.n	80020ba <HAL_RCC_OscConfig+0x3ee>
 8001fde:	4bca      	ldr	r3, [pc, #808]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fea:	d166      	bne.n	80020ba <HAL_RCC_OscConfig+0x3ee>
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ffe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0x350>
 8002016:	4bbc      	ldr	r3, [pc, #752]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0x378>
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002034:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002040:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	2202      	movs	r2, #2
 8002046:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800204a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002056:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f042 0220 	orr.w	r2, r2, #32
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f002 021f 	and.w	r2, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_RCC_OscConfig+0x3ba>
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f000 bd31 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	21f8      	movs	r1, #248	; 0xf8
 8002096:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800209e:	fa91 f1a1 	rbit	r1, r1
 80020a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020aa:	fab1 f181 	clz	r1, r1
 80020ae:	b2c9      	uxtb	r1, r1
 80020b0:	408b      	lsls	r3, r1
 80020b2:	4995      	ldr	r1, [pc, #596]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b8:	e0f5      	b.n	80022a6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8085 	beq.w	80021d0 <HAL_RCC_OscConfig+0x504>
 80020c6:	2301      	movs	r3, #1
 80020c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80020d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff fb35 	bl	8001760 <HAL_GetTick>
 80020f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fb30 	bl	8001760 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d902      	bls.n	8002112 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	f000 bceb 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002124:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d102      	bne.n	8002142 <HAL_RCC_OscConfig+0x476>
 800213c:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e013      	b.n	800216a <HAL_RCC_OscConfig+0x49e>
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002154:	2302      	movs	r3, #2
 8002156:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800215a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002166:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2202      	movs	r2, #2
 800216c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002170:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002174:	fa92 f2a2 	rbit	r2, r2
 8002178:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800217c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0af      	beq.n	80020fc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	21f8      	movs	r1, #248	; 0xf8
 80021ac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80021b4:	fa91 f1a1 	rbit	r1, r1
 80021b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80021bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021c0:	fab1 f181 	clz	r1, r1
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	408b      	lsls	r3, r1
 80021c8:	494f      	ldr	r1, [pc, #316]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	e06a      	b.n	80022a6 <HAL_RCC_OscConfig+0x5da>
 80021d0:	2301      	movs	r3, #1
 80021d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80021e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fab0 	bl	8001760 <HAL_GetTick>
 8002200:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff faab 	bl	8001760 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	f000 bc66 	b.w	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800222e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0x580>
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e013      	b.n	8002274 <HAL_RCC_OscConfig+0x5a8>
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002264:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_OscConfig+0x63c>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800227a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800227e:	fa92 f2a2 	rbit	r2, r2
 8002282:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002286:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f042 0220 	orr.w	r2, r2, #32
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f002 021f 	and.w	r2, r2, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f202 	lsl.w	r2, r1, r2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1af      	bne.n	8002206 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80da 	beq.w	800246a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d069      	beq.n	8002394 <HAL_RCC_OscConfig+0x6c8>
 80022c0:	2301      	movs	r3, #1
 80022c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80022d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x640>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fa39 	bl	8001760 <HAL_GetTick>
 80022ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e00d      	b.n	8002310 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fa34 	bl	8001760 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d905      	bls.n	8002310 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e3ef      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 8002308:	40021000 	.word	0x40021000
 800230c:	10908120 	.word	0x10908120
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002354:	4ba4      	ldr	r3, [pc, #656]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002358:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800235c:	2102      	movs	r1, #2
 800235e:	6019      	str	r1, [r3, #0]
 8002360:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f1a3 	rbit	r1, r3
 800236a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800236e:	6019      	str	r1, [r3, #0]
  return result;
 8002370:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0b0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x628>
 8002392:	e06a      	b.n	800246a <HAL_RCC_OscConfig+0x79e>
 8002394:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x920>)
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	461a      	mov	r2, r3
 80023c2:	2300      	movs	r3, #0
 80023c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f9cb 	bl	8001760 <HAL_GetTick>
 80023ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	e009      	b.n	80023e4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f9c6 	bl	8001760 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e381      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 80023e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023e8:	2202      	movs	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800242a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800242e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002434:	2102      	movs	r1, #2
 8002436:	6019      	str	r1, [r3, #0]
 8002438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f1a3 	rbit	r1, r3
 8002442:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002446:	6019      	str	r1, [r3, #0]
  return result;
 8002448:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1b2      	bne.n	80023d0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8157 	beq.w	8002728 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCC_OscConfig+0x924>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x924>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x924>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7ff f949 	bl	8001760 <HAL_GetTick>
 80024ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	e009      	b.n	80024e8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7ff f944 	bl	8001760 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e2ff      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x924>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x840>
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e02f      	b.n	800256c <HAL_RCC_OscConfig+0x8a0>
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x864>
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0x8a0>
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x888>
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0x8a0>
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 8002566:	f023 0304 	bic.w	r3, r3, #4
 800256a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d06a      	beq.n	800264c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff f8f3 	bl	8001760 <HAL_GetTick>
 800257a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff f8ee 	bl	8001760 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e2a7      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 8002598:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800259c:	2202      	movs	r2, #2
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025c6:	601a      	str	r2, [r3, #0]
  return result;
 80025c8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_OscConfig+0x928>
 80025e2:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_RCC_OscConfig+0x91c>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x944>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	10908120 	.word	0x10908120
 80025f0:	40007000 	.word	0x40007000
 80025f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025f8:	2202      	movs	r2, #2
 80025fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	4bc0      	ldr	r3, [pc, #768]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002614:	2102      	movs	r1, #2
 8002616:	6011      	str	r1, [r2, #0]
 8002618:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	fa92 f1a2 	rbit	r1, r2
 8002622:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002626:	6011      	str	r1, [r2, #0]
  return result;
 8002628:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	fab2 f282 	clz	r2, r2
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f002 021f 	and.w	r2, r2, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d09a      	beq.n	8002580 <HAL_RCC_OscConfig+0x8b4>
 800264a:	e063      	b.n	8002714 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7ff f888 	bl	8001760 <HAL_GetTick>
 8002650:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff f883 	bl	8001760 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e23c      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 800266e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d102      	bne.n	80026be <HAL_RCC_OscConfig+0x9f2>
 80026b8:	4b95      	ldr	r3, [pc, #596]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	e00d      	b.n	80026da <HAL_RCC_OscConfig+0xa0e>
 80026be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	4b8e      	ldr	r3, [pc, #568]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026de:	2102      	movs	r1, #2
 80026e0:	6011      	str	r1, [r2, #0]
 80026e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fa92 f1a2 	rbit	r1, r2
 80026ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026f0:	6011      	str	r1, [r2, #0]
  return result;
 80026f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f002 021f 	and.w	r2, r2, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1a0      	bne.n	8002656 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002714:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002726:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 81d9 	beq.w	8002ae6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	f000 81a6 	beq.w	8002a8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 811e 	bne.w	800298a <HAL_RCC_OscConfig+0xcbe>
 800274e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002752:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800276c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe ffec 	bl	8001760 <HAL_GetTick>
 8002788:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe ffe7 	bl	8001760 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1a2      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 80027a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0xb10>
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e01b      	b.n	8002814 <HAL_RCC_OscConfig+0xb48>
 80027dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800281c:	6011      	str	r1, [r2, #0]
 800281e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	fa92 f1a2 	rbit	r1, r2
 8002828:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800282c:	6011      	str	r1, [r2, #0]
  return result;
 800282e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d19e      	bne.n	800278e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	492c      	ldr	r1, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002860:	4313      	orrs	r3, r2
 8002862:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a19      	ldr	r1, [r3, #32]
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	430b      	orrs	r3, r1
 800287a:	4925      	ldr	r1, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	fa93 f2a3 	rbit	r2, r3
 8002894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002898:	601a      	str	r2, [r3, #0]
  return result;
 800289a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800289e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	461a      	mov	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe ff53 	bl	8001760 <HAL_GetTick>
 80028ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028be:	e009      	b.n	80028d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe ff4e 	bl	8001760 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e109      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 80028d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028ec:	601a      	str	r2, [r3, #0]
  return result;
 80028ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0xc48>
 8002908:	4b01      	ldr	r3, [pc, #4]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e01e      	b.n	800294c <HAL_RCC_OscConfig+0xc80>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0xe28>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d09b      	beq.n	80028c0 <HAL_RCC_OscConfig+0xbf4>
 8002988:	e0ad      	b.n	8002ae6 <HAL_RCC_OscConfig+0xe1a>
 800298a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a2:	601a      	str	r2, [r3, #0]
  return result;
 80029a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	461a      	mov	r2, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fece 	bl	8001760 <HAL_GetTick>
 80029c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e009      	b.n	80029de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fe fec9 	bl	8001760 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e084      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
 80029de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_OscConfig+0xd4c>
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_RCC_OscConfig+0xe28>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0xd84>
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f107 0318 	add.w	r3, r7, #24
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCC_OscConfig+0xe28>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f107 0214 	add.w	r2, r7, #20
 8002a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	f107 0214 	add.w	r2, r7, #20
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	fa92 f1a2 	rbit	r1, r2
 8002a64:	f107 0210 	add.w	r2, r7, #16
 8002a68:	6011      	str	r1, [r2, #0]
  return result;
 8002a6a:	f107 0210 	add.w	r2, r7, #16
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f002 021f 	and.w	r2, r2, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d19e      	bne.n	80029ca <HAL_RCC_OscConfig+0xcfe>
 8002a8c:	e02b      	b.n	8002ae6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e025      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0xe28>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_RCC_OscConfig+0xe28>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ab0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d111      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002abe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d108      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09e      	sub	sp, #120	; 0x78
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e162      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b90      	ldr	r3, [pc, #576]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d910      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	498b      	ldr	r1, [pc, #556]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e14a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b82      	ldr	r3, [pc, #520]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	497f      	ldr	r1, [pc, #508]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80dc 	beq.w	8002d24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13c      	bne.n	8002bee <HAL_RCC_ClockConfig+0xf6>
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xa6>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	e00f      	b.n	8002bbe <HAL_RCC_ClockConfig+0xc6>
 8002b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	667b      	str	r3, [r7, #100]	; 0x64
 8002bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d17b      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0f3      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d13c      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x178>
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x128>
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e00f      	b.n	8002c40 <HAL_RCC_ClockConfig+0x148>
 8002c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c44:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c48:	fa92 f2a2 	rbit	r2, r2
 8002c4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f002 021f 	and.w	r2, r2, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d13a      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b2      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
 8002c70:	2302      	movs	r3, #2
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x1a0>
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e00d      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1bc>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	61ba      	str	r2, [r7, #24]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	617a      	str	r2, [r7, #20]
  return result;
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0220 	orr.w	r2, r2, #32
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e079      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	491a      	ldr	r1, [pc, #104]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fd34 	bl	8001760 <HAL_GetTick>
 8002cf8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe fd30 	bl	8001760 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e061      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d214      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4906      	ldr	r1, [pc, #24]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e040      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	491a      	ldr	r1, [pc, #104]	; (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4912      	ldr	r1, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d9a:	f000 f829 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4601      	mov	r1, r0
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da8:	22f0      	movs	r2, #240	; 0xf0
 8002daa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	60fa      	str	r2, [r7, #12]
  return result;
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	40d3      	lsrs	r3, r2
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x2ec>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_RCC_ClockConfig+0x2f0>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_ClockConfig+0x2f4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fc82 	bl	80016d8 <HAL_InitTick>
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3778      	adds	r7, #120	; 0x78
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	0800446c 	.word	0x0800446c
 8002de8:	20000004 	.word	0x20000004
 8002dec:	20000008 	.word	0x20000008

08002df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b08b      	sub	sp, #44	; 0x2c
 8002df4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x30>
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x36>
 8002e1e:	e03f      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e22:	623b      	str	r3, [r7, #32]
      break;
 8002e24:	e03f      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	607a      	str	r2, [r7, #4]
  return result;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	40d3      	lsrs	r3, r2
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	220f      	movs	r2, #15
 8002e54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	60fa      	str	r2, [r7, #12]
  return result;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	40d3      	lsrs	r3, r2
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	e007      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	623b      	str	r3, [r7, #32]
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ea2:	623b      	str	r3, [r7, #32]
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	372c      	adds	r7, #44	; 0x2c
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	08004484 	.word	0x08004484
 8002ec0:	08004494 	.word	0x08004494

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ee2:	f7ff ffef 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ef0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ef4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	fa92 f2a2 	rbit	r2, r2
 8002efc:	603a      	str	r2, [r7, #0]
  return result;
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	fab2 f282 	clz	r2, r2
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	40d3      	lsrs	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	0800447c 	.word	0x0800447c

08002f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f26:	f7ff ffcd 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002f2a:	4601      	mov	r1, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	603a      	str	r2, [r7, #0]
  return result;
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	40d3      	lsrs	r3, r2
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	0800447c 	.word	0x0800447c

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80d4 	beq.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f88:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10e      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	61d3      	str	r3, [r2, #28]
 8002fa0:	4b48      	ldr	r3, [pc, #288]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fbc9 	bl	8001760 <HAL_GetTick>
 8002fce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fe fbc5 	bl	8001760 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1d6      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8084 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300c:	429a      	cmp	r2, r3
 800300e:	d07c      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	461a      	mov	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	461a      	mov	r2, r3
 800305e:	2300      	movs	r3, #0
 8003060:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003066:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04b      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fb75 	bl	8001760 <HAL_GetTick>
 8003076:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fb71 	bl	8001760 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e180      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003090:	2302      	movs	r3, #2
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	61fb      	str	r3, [r7, #28]
  return result;
 80030a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d108      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030be:	4b01      	ldr	r3, [pc, #4]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	e00d      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	10908100 	.word	0x10908100
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	4ba0      	ldr	r3, [pc, #640]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2202      	movs	r2, #2
 80030e2:	613a      	str	r2, [r7, #16]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	fa92 f2a2 	rbit	r2, r2
 80030ea:	60fa      	str	r2, [r7, #12]
  return result;
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	fab2 f282 	clz	r2, r2
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0b7      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800310a:	4b95      	ldr	r3, [pc, #596]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4992      	ldr	r1, [pc, #584]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b8e      	ldr	r3, [pc, #568]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4a8d      	ldr	r2, [pc, #564]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f023 0203 	bic.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4985      	ldr	r1, [pc, #532]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315a:	4b81      	ldr	r3, [pc, #516]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	497e      	ldr	r1, [pc, #504]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003178:	4b79      	ldr	r3, [pc, #484]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4976      	ldr	r1, [pc, #472]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003196:	4b72      	ldr	r3, [pc, #456]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f023 0210 	bic.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	496f      	ldr	r1, [pc, #444]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031b4:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	4967      	ldr	r1, [pc, #412]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f023 0220 	bic.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4960      	ldr	r1, [pc, #384]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f0:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	4958      	ldr	r1, [pc, #352]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4951      	ldr	r1, [pc, #324]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4949      	ldr	r1, [pc, #292]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800324a:	4b45      	ldr	r3, [pc, #276]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4942      	ldr	r1, [pc, #264]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	493a      	ldr	r1, [pc, #232]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	4933      	ldr	r1, [pc, #204]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	492b      	ldr	r1, [pc, #172]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4924      	ldr	r1, [pc, #144]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	491c      	ldr	r1, [pc, #112]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	4915      	ldr	r1, [pc, #84]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	490d      	ldr	r1, [pc, #52]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003358:	4b01      	ldr	r3, [pc, #4]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	e002      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	490b      	ldr	r1, [pc, #44]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800336e:	4313      	orrs	r3, r2
 8003370:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338a:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800338c:	4313      	orrs	r3, r2
 800338e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3748      	adds	r7, #72	; 0x48
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e040      	b.n	8003434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe f894 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8c0 	bl	8003564 <UART_SetConfig>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e022      	b.n	8003434 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa88 	bl	800390c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800340a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800341a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fb0f 	bl	8003a50 <UART_CheckIdleState>
 8003432:	4603      	mov	r3, r0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003450:	2b20      	cmp	r3, #32
 8003452:	f040 8082 	bne.w	800355a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_UART_Transmit+0x26>
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07a      	b.n	800355c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_UART_Transmit+0x38>
 8003470:	2302      	movs	r3, #2
 8003472:	e073      	b.n	800355c <HAL_UART_Transmit+0x120>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2221      	movs	r2, #33	; 0x21
 8003488:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348a:	f7fe f969 	bl	8001760 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d108      	bne.n	80034bc <HAL_UART_Transmit+0x80>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034cc:	e02d      	b.n	800352a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb02 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e039      	b.n	800355c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fa:	b292      	uxth	r2, r2
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3302      	adds	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e008      	b.n	8003518 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b292      	uxth	r2, r2
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1cb      	bne.n	80034ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 face 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e005      	b.n	800355c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4baa      	ldr	r3, [pc, #680]	; (8003838 <UART_SetConfig+0x2d4>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6979      	ldr	r1, [r7, #20]
 8003598:	430b      	orrs	r3, r1
 800359a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a98      	ldr	r2, [pc, #608]	; (800383c <UART_SetConfig+0x2d8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d121      	bne.n	8003624 <UART_SetConfig+0xc0>
 80035e0:	4b97      	ldr	r3, [pc, #604]	; (8003840 <UART_SetConfig+0x2dc>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d817      	bhi.n	800361c <UART_SetConfig+0xb8>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <UART_SetConfig+0x90>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003611 	.word	0x08003611
 80035fc:	08003617 	.word	0x08003617
 8003600:	0800360b 	.word	0x0800360b
 8003604:	2301      	movs	r3, #1
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0b2      	b.n	8003770 <UART_SetConfig+0x20c>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0af      	b.n	8003770 <UART_SetConfig+0x20c>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0ac      	b.n	8003770 <UART_SetConfig+0x20c>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0a9      	b.n	8003770 <UART_SetConfig+0x20c>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	bf00      	nop
 8003622:	e0a5      	b.n	8003770 <UART_SetConfig+0x20c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a86      	ldr	r2, [pc, #536]	; (8003844 <UART_SetConfig+0x2e0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d123      	bne.n	8003676 <UART_SetConfig+0x112>
 800362e:	4b84      	ldr	r3, [pc, #528]	; (8003840 <UART_SetConfig+0x2dc>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d012      	beq.n	8003662 <UART_SetConfig+0xfe>
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d802      	bhi.n	8003648 <UART_SetConfig+0xe4>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <UART_SetConfig+0xf2>
 8003646:	e012      	b.n	800366e <UART_SetConfig+0x10a>
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800364c:	d00c      	beq.n	8003668 <UART_SetConfig+0x104>
 800364e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003652:	d003      	beq.n	800365c <UART_SetConfig+0xf8>
 8003654:	e00b      	b.n	800366e <UART_SetConfig+0x10a>
 8003656:	2300      	movs	r3, #0
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e089      	b.n	8003770 <UART_SetConfig+0x20c>
 800365c:	2302      	movs	r3, #2
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e086      	b.n	8003770 <UART_SetConfig+0x20c>
 8003662:	2304      	movs	r3, #4
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e083      	b.n	8003770 <UART_SetConfig+0x20c>
 8003668:	2308      	movs	r3, #8
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e080      	b.n	8003770 <UART_SetConfig+0x20c>
 800366e:	2310      	movs	r3, #16
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	bf00      	nop
 8003674:	e07c      	b.n	8003770 <UART_SetConfig+0x20c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <UART_SetConfig+0x2e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d123      	bne.n	80036c8 <UART_SetConfig+0x164>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <UART_SetConfig+0x2dc>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368c:	d012      	beq.n	80036b4 <UART_SetConfig+0x150>
 800368e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003692:	d802      	bhi.n	800369a <UART_SetConfig+0x136>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <UART_SetConfig+0x144>
 8003698:	e012      	b.n	80036c0 <UART_SetConfig+0x15c>
 800369a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800369e:	d00c      	beq.n	80036ba <UART_SetConfig+0x156>
 80036a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036a4:	d003      	beq.n	80036ae <UART_SetConfig+0x14a>
 80036a6:	e00b      	b.n	80036c0 <UART_SetConfig+0x15c>
 80036a8:	2300      	movs	r3, #0
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e060      	b.n	8003770 <UART_SetConfig+0x20c>
 80036ae:	2302      	movs	r3, #2
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e05d      	b.n	8003770 <UART_SetConfig+0x20c>
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e05a      	b.n	8003770 <UART_SetConfig+0x20c>
 80036ba:	2308      	movs	r3, #8
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e057      	b.n	8003770 <UART_SetConfig+0x20c>
 80036c0:	2310      	movs	r3, #16
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	bf00      	nop
 80036c6:	e053      	b.n	8003770 <UART_SetConfig+0x20c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5f      	ldr	r2, [pc, #380]	; (800384c <UART_SetConfig+0x2e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d123      	bne.n	800371a <UART_SetConfig+0x1b6>
 80036d2:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <UART_SetConfig+0x2dc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036de:	d012      	beq.n	8003706 <UART_SetConfig+0x1a2>
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e4:	d802      	bhi.n	80036ec <UART_SetConfig+0x188>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <UART_SetConfig+0x196>
 80036ea:	e012      	b.n	8003712 <UART_SetConfig+0x1ae>
 80036ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f0:	d00c      	beq.n	800370c <UART_SetConfig+0x1a8>
 80036f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x19c>
 80036f8:	e00b      	b.n	8003712 <UART_SetConfig+0x1ae>
 80036fa:	2300      	movs	r3, #0
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e037      	b.n	8003770 <UART_SetConfig+0x20c>
 8003700:	2302      	movs	r3, #2
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e034      	b.n	8003770 <UART_SetConfig+0x20c>
 8003706:	2304      	movs	r3, #4
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e031      	b.n	8003770 <UART_SetConfig+0x20c>
 800370c:	2308      	movs	r3, #8
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e02e      	b.n	8003770 <UART_SetConfig+0x20c>
 8003712:	2310      	movs	r3, #16
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	bf00      	nop
 8003718:	e02a      	b.n	8003770 <UART_SetConfig+0x20c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <UART_SetConfig+0x2ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d123      	bne.n	800376c <UART_SetConfig+0x208>
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <UART_SetConfig+0x2dc>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003730:	d012      	beq.n	8003758 <UART_SetConfig+0x1f4>
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	d802      	bhi.n	800373e <UART_SetConfig+0x1da>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <UART_SetConfig+0x1e8>
 800373c:	e012      	b.n	8003764 <UART_SetConfig+0x200>
 800373e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003742:	d00c      	beq.n	800375e <UART_SetConfig+0x1fa>
 8003744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003748:	d003      	beq.n	8003752 <UART_SetConfig+0x1ee>
 800374a:	e00b      	b.n	8003764 <UART_SetConfig+0x200>
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e00e      	b.n	8003770 <UART_SetConfig+0x20c>
 8003752:	2302      	movs	r3, #2
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e00b      	b.n	8003770 <UART_SetConfig+0x20c>
 8003758:	2304      	movs	r3, #4
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e008      	b.n	8003770 <UART_SetConfig+0x20c>
 800375e:	2308      	movs	r3, #8
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e005      	b.n	8003770 <UART_SetConfig+0x20c>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	bf00      	nop
 800376a:	e001      	b.n	8003770 <UART_SetConfig+0x20c>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003778:	d16e      	bne.n	8003858 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d828      	bhi.n	80037d2 <UART_SetConfig+0x26e>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x224>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037d3 	.word	0x080037d3
 8003798:	080037c3 	.word	0x080037c3
 800379c:	080037d3 	.word	0x080037d3
 80037a0:	080037d3 	.word	0x080037d3
 80037a4:	080037d3 	.word	0x080037d3
 80037a8:	080037cb 	.word	0x080037cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7ff fb96 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e013      	b.n	80037dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7ff fbb4 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 80037b8:	61b8      	str	r0, [r7, #24]
        break;
 80037ba:	e00f      	b.n	80037dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <UART_SetConfig+0x2f0>)
 80037be:	61bb      	str	r3, [r7, #24]
        break;
 80037c0:	e00c      	b.n	80037dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c2:	f7ff fb15 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80037c6:	61b8      	str	r0, [r7, #24]
        break;
 80037c8:	e008      	b.n	80037dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e004      	b.n	80037dc <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77bb      	strb	r3, [r7, #30]
        break;
 80037da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8086 	beq.w	80038f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	005a      	lsls	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	d916      	bls.n	8003830 <UART_SetConfig+0x2cc>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d212      	bcs.n	8003830 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f023 030f 	bic.w	r3, r3, #15
 8003812:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	b29a      	uxth	r2, r3
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	4313      	orrs	r3, r2
 8003824:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	89fa      	ldrh	r2, [r7, #14]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e05f      	b.n	80038f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77bb      	strb	r3, [r7, #30]
 8003834:	e05c      	b.n	80038f0 <UART_SetConfig+0x38c>
 8003836:	bf00      	nop
 8003838:	efff69f3 	.word	0xefff69f3
 800383c:	40013800 	.word	0x40013800
 8003840:	40021000 	.word	0x40021000
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40004c00 	.word	0x40004c00
 8003850:	40005000 	.word	0x40005000
 8003854:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003858:	7ffb      	ldrb	r3, [r7, #31]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d827      	bhi.n	80038ae <UART_SetConfig+0x34a>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x300>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003889 	.word	0x08003889
 8003868:	08003891 	.word	0x08003891
 800386c:	08003899 	.word	0x08003899
 8003870:	080038af 	.word	0x080038af
 8003874:	0800389f 	.word	0x0800389f
 8003878:	080038af 	.word	0x080038af
 800387c:	080038af 	.word	0x080038af
 8003880:	080038af 	.word	0x080038af
 8003884:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7ff fb28 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 800388c:	61b8      	str	r0, [r7, #24]
        break;
 800388e:	e013      	b.n	80038b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7ff fb46 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8003894:	61b8      	str	r0, [r7, #24]
        break;
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <UART_SetConfig+0x3a4>)
 800389a:	61bb      	str	r3, [r7, #24]
        break;
 800389c:	e00c      	b.n	80038b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7ff faa7 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80038a2:	61b8      	str	r0, [r7, #24]
        break;
 80038a4:	e008      	b.n	80038b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	61bb      	str	r3, [r7, #24]
        break;
 80038ac:	e004      	b.n	80038b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77bb      	strb	r3, [r7, #30]
        break;
 80038b6:	bf00      	nop
    }

    if (pclk != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085a      	lsrs	r2, r3, #1
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d908      	bls.n	80038ec <UART_SetConfig+0x388>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d204      	bcs.n	80038ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e001      	b.n	80038f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	007a1200 	.word	0x007a1200

0800390c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d10a      	bne.n	8003a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a60:	f7fd fe7e 	bl	8001760 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d10e      	bne.n	8003a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f82d 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e023      	b.n	8003ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d10e      	bne.n	8003abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f817 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00d      	b.n	8003ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af2:	e05e      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d05a      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7fd fe30 	bl	8001760 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11b      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e043      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02c      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d124      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d091      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <__errno>:
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <__errno+0x8>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000010 	.word	0x20000010

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0d      	ldr	r6, [pc, #52]	; (8003c20 <__libc_init_array+0x38>)
 8003bec:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bee:	1ba4      	subs	r4, r4, r6
 8003bf0:	10a4      	asrs	r4, r4, #2
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	42a5      	cmp	r5, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	4e0b      	ldr	r6, [pc, #44]	; (8003c28 <__libc_init_array+0x40>)
 8003bfa:	4c0c      	ldr	r4, [pc, #48]	; (8003c2c <__libc_init_array+0x44>)
 8003bfc:	f000 fc26 	bl	800444c <_init>
 8003c00:	1ba4      	subs	r4, r4, r6
 8003c02:	10a4      	asrs	r4, r4, #2
 8003c04:	2500      	movs	r5, #0
 8003c06:	42a5      	cmp	r5, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c10:	4798      	blx	r3
 8003c12:	3501      	adds	r5, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1a:	4798      	blx	r3
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	080044d8 	.word	0x080044d8
 8003c24:	080044d8 	.word	0x080044d8
 8003c28:	080044d8 	.word	0x080044d8
 8003c2c:	080044dc 	.word	0x080044dc

08003c30 <memset>:
 8003c30:	4402      	add	r2, r0
 8003c32:	4603      	mov	r3, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <siprintf>:
 8003c40:	b40e      	push	{r1, r2, r3}
 8003c42:	b500      	push	{lr}
 8003c44:	b09c      	sub	sp, #112	; 0x70
 8003c46:	ab1d      	add	r3, sp, #116	; 0x74
 8003c48:	9002      	str	r0, [sp, #8]
 8003c4a:	9006      	str	r0, [sp, #24]
 8003c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c50:	4809      	ldr	r0, [pc, #36]	; (8003c78 <siprintf+0x38>)
 8003c52:	9107      	str	r1, [sp, #28]
 8003c54:	9104      	str	r1, [sp, #16]
 8003c56:	4909      	ldr	r1, [pc, #36]	; (8003c7c <siprintf+0x3c>)
 8003c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c5c:	9105      	str	r1, [sp, #20]
 8003c5e:	6800      	ldr	r0, [r0, #0]
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	a902      	add	r1, sp, #8
 8003c64:	f000 f866 	bl	8003d34 <_svfiprintf_r>
 8003c68:	9b02      	ldr	r3, [sp, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	b01c      	add	sp, #112	; 0x70
 8003c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c74:	b003      	add	sp, #12
 8003c76:	4770      	bx	lr
 8003c78:	20000010 	.word	0x20000010
 8003c7c:	ffff0208 	.word	0xffff0208

08003c80 <__ssputs_r>:
 8003c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	688e      	ldr	r6, [r1, #8]
 8003c86:	429e      	cmp	r6, r3
 8003c88:	4682      	mov	sl, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4690      	mov	r8, r2
 8003c8e:	4699      	mov	r9, r3
 8003c90:	d837      	bhi.n	8003d02 <__ssputs_r+0x82>
 8003c92:	898a      	ldrh	r2, [r1, #12]
 8003c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c98:	d031      	beq.n	8003cfe <__ssputs_r+0x7e>
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	6909      	ldr	r1, [r1, #16]
 8003c9e:	1a6f      	subs	r7, r5, r1
 8003ca0:	6965      	ldr	r5, [r4, #20]
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ca8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cac:	f109 0301 	add.w	r3, r9, #1
 8003cb0:	443b      	add	r3, r7
 8003cb2:	429d      	cmp	r5, r3
 8003cb4:	bf38      	it	cc
 8003cb6:	461d      	movcc	r5, r3
 8003cb8:	0553      	lsls	r3, r2, #21
 8003cba:	d530      	bpl.n	8003d1e <__ssputs_r+0x9e>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f000 fb2b 	bl	8004318 <_malloc_r>
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	b950      	cbnz	r0, 8003cdc <__ssputs_r+0x5c>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	f8ca 3000 	str.w	r3, [sl]
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	463a      	mov	r2, r7
 8003cde:	6921      	ldr	r1, [r4, #16]
 8003ce0:	f000 faa8 	bl	8004234 <memcpy>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	6126      	str	r6, [r4, #16]
 8003cf2:	6165      	str	r5, [r4, #20]
 8003cf4:	443e      	add	r6, r7
 8003cf6:	1bed      	subs	r5, r5, r7
 8003cf8:	6026      	str	r6, [r4, #0]
 8003cfa:	60a5      	str	r5, [r4, #8]
 8003cfc:	464e      	mov	r6, r9
 8003cfe:	454e      	cmp	r6, r9
 8003d00:	d900      	bls.n	8003d04 <__ssputs_r+0x84>
 8003d02:	464e      	mov	r6, r9
 8003d04:	4632      	mov	r2, r6
 8003d06:	4641      	mov	r1, r8
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	f000 fa9e 	bl	800424a <memmove>
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	1b9b      	subs	r3, r3, r6
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	441e      	add	r6, r3
 8003d18:	6026      	str	r6, [r4, #0]
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e7dc      	b.n	8003cd8 <__ssputs_r+0x58>
 8003d1e:	462a      	mov	r2, r5
 8003d20:	f000 fb54 	bl	80043cc <_realloc_r>
 8003d24:	4606      	mov	r6, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d1e2      	bne.n	8003cf0 <__ssputs_r+0x70>
 8003d2a:	6921      	ldr	r1, [r4, #16]
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	f000 faa5 	bl	800427c <_free_r>
 8003d32:	e7c8      	b.n	8003cc6 <__ssputs_r+0x46>

08003d34 <_svfiprintf_r>:
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	461d      	mov	r5, r3
 8003d3a:	898b      	ldrh	r3, [r1, #12]
 8003d3c:	061f      	lsls	r7, r3, #24
 8003d3e:	b09d      	sub	sp, #116	; 0x74
 8003d40:	4680      	mov	r8, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4616      	mov	r6, r2
 8003d46:	d50f      	bpl.n	8003d68 <_svfiprintf_r+0x34>
 8003d48:	690b      	ldr	r3, [r1, #16]
 8003d4a:	b96b      	cbnz	r3, 8003d68 <_svfiprintf_r+0x34>
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	f000 fae3 	bl	8004318 <_malloc_r>
 8003d52:	6020      	str	r0, [r4, #0]
 8003d54:	6120      	str	r0, [r4, #16]
 8003d56:	b928      	cbnz	r0, 8003d64 <_svfiprintf_r+0x30>
 8003d58:	230c      	movs	r3, #12
 8003d5a:	f8c8 3000 	str.w	r3, [r8]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	e0c8      	b.n	8003ef6 <_svfiprintf_r+0x1c2>
 8003d64:	2340      	movs	r3, #64	; 0x40
 8003d66:	6163      	str	r3, [r4, #20]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d72:	2330      	movs	r3, #48	; 0x30
 8003d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d78:	9503      	str	r5, [sp, #12]
 8003d7a:	f04f 0b01 	mov.w	fp, #1
 8003d7e:	4637      	mov	r7, r6
 8003d80:	463d      	mov	r5, r7
 8003d82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d86:	b10b      	cbz	r3, 8003d8c <_svfiprintf_r+0x58>
 8003d88:	2b25      	cmp	r3, #37	; 0x25
 8003d8a:	d13e      	bne.n	8003e0a <_svfiprintf_r+0xd6>
 8003d8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d90:	d00b      	beq.n	8003daa <_svfiprintf_r+0x76>
 8003d92:	4653      	mov	r3, sl
 8003d94:	4632      	mov	r2, r6
 8003d96:	4621      	mov	r1, r4
 8003d98:	4640      	mov	r0, r8
 8003d9a:	f7ff ff71 	bl	8003c80 <__ssputs_r>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	f000 80a4 	beq.w	8003eec <_svfiprintf_r+0x1b8>
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	4453      	add	r3, sl
 8003da8:	9309      	str	r3, [sp, #36]	; 0x24
 8003daa:	783b      	ldrb	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 809d 	beq.w	8003eec <_svfiprintf_r+0x1b8>
 8003db2:	2300      	movs	r3, #0
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	9307      	str	r3, [sp, #28]
 8003dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc6:	462f      	mov	r7, r5
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dce:	4850      	ldr	r0, [pc, #320]	; (8003f10 <_svfiprintf_r+0x1dc>)
 8003dd0:	f7fc fa0e 	bl	80001f0 <memchr>
 8003dd4:	9b04      	ldr	r3, [sp, #16]
 8003dd6:	b9d0      	cbnz	r0, 8003e0e <_svfiprintf_r+0xda>
 8003dd8:	06d9      	lsls	r1, r3, #27
 8003dda:	bf44      	itt	mi
 8003ddc:	2220      	movmi	r2, #32
 8003dde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003de2:	071a      	lsls	r2, r3, #28
 8003de4:	bf44      	itt	mi
 8003de6:	222b      	movmi	r2, #43	; 0x2b
 8003de8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dec:	782a      	ldrb	r2, [r5, #0]
 8003dee:	2a2a      	cmp	r2, #42	; 0x2a
 8003df0:	d015      	beq.n	8003e1e <_svfiprintf_r+0xea>
 8003df2:	9a07      	ldr	r2, [sp, #28]
 8003df4:	462f      	mov	r7, r5
 8003df6:	2000      	movs	r0, #0
 8003df8:	250a      	movs	r5, #10
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e00:	3b30      	subs	r3, #48	; 0x30
 8003e02:	2b09      	cmp	r3, #9
 8003e04:	d94d      	bls.n	8003ea2 <_svfiprintf_r+0x16e>
 8003e06:	b1b8      	cbz	r0, 8003e38 <_svfiprintf_r+0x104>
 8003e08:	e00f      	b.n	8003e2a <_svfiprintf_r+0xf6>
 8003e0a:	462f      	mov	r7, r5
 8003e0c:	e7b8      	b.n	8003d80 <_svfiprintf_r+0x4c>
 8003e0e:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <_svfiprintf_r+0x1dc>)
 8003e10:	1a80      	subs	r0, r0, r2
 8003e12:	fa0b f000 	lsl.w	r0, fp, r0
 8003e16:	4318      	orrs	r0, r3
 8003e18:	9004      	str	r0, [sp, #16]
 8003e1a:	463d      	mov	r5, r7
 8003e1c:	e7d3      	b.n	8003dc6 <_svfiprintf_r+0x92>
 8003e1e:	9a03      	ldr	r2, [sp, #12]
 8003e20:	1d11      	adds	r1, r2, #4
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	9103      	str	r1, [sp, #12]
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	db01      	blt.n	8003e2e <_svfiprintf_r+0xfa>
 8003e2a:	9207      	str	r2, [sp, #28]
 8003e2c:	e004      	b.n	8003e38 <_svfiprintf_r+0x104>
 8003e2e:	4252      	negs	r2, r2
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	9207      	str	r2, [sp, #28]
 8003e36:	9304      	str	r3, [sp, #16]
 8003e38:	783b      	ldrb	r3, [r7, #0]
 8003e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e3c:	d10c      	bne.n	8003e58 <_svfiprintf_r+0x124>
 8003e3e:	787b      	ldrb	r3, [r7, #1]
 8003e40:	2b2a      	cmp	r3, #42	; 0x2a
 8003e42:	d133      	bne.n	8003eac <_svfiprintf_r+0x178>
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bfb8      	it	lt
 8003e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e54:	3702      	adds	r7, #2
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	4d2e      	ldr	r5, [pc, #184]	; (8003f14 <_svfiprintf_r+0x1e0>)
 8003e5a:	7839      	ldrb	r1, [r7, #0]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7fc f9c6 	bl	80001f0 <memchr>
 8003e64:	b138      	cbz	r0, 8003e76 <_svfiprintf_r+0x142>
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	1b40      	subs	r0, r0, r5
 8003e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e6e:	9b04      	ldr	r3, [sp, #16]
 8003e70:	4303      	orrs	r3, r0
 8003e72:	3701      	adds	r7, #1
 8003e74:	9304      	str	r3, [sp, #16]
 8003e76:	7839      	ldrb	r1, [r7, #0]
 8003e78:	4827      	ldr	r0, [pc, #156]	; (8003f18 <_svfiprintf_r+0x1e4>)
 8003e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7e:	2206      	movs	r2, #6
 8003e80:	1c7e      	adds	r6, r7, #1
 8003e82:	f7fc f9b5 	bl	80001f0 <memchr>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d038      	beq.n	8003efc <_svfiprintf_r+0x1c8>
 8003e8a:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <_svfiprintf_r+0x1e8>)
 8003e8c:	bb13      	cbnz	r3, 8003ed4 <_svfiprintf_r+0x1a0>
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	3307      	adds	r3, #7
 8003e92:	f023 0307 	bic.w	r3, r3, #7
 8003e96:	3308      	adds	r3, #8
 8003e98:	9303      	str	r3, [sp, #12]
 8003e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9c:	444b      	add	r3, r9
 8003e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea0:	e76d      	b.n	8003d7e <_svfiprintf_r+0x4a>
 8003ea2:	fb05 3202 	mla	r2, r5, r2, r3
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	e7a6      	b.n	8003dfa <_svfiprintf_r+0xc6>
 8003eac:	2300      	movs	r3, #0
 8003eae:	3701      	adds	r7, #1
 8003eb0:	9305      	str	r3, [sp, #20]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	250a      	movs	r5, #10
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ebc:	3a30      	subs	r2, #48	; 0x30
 8003ebe:	2a09      	cmp	r2, #9
 8003ec0:	d903      	bls.n	8003eca <_svfiprintf_r+0x196>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0c8      	beq.n	8003e58 <_svfiprintf_r+0x124>
 8003ec6:	9105      	str	r1, [sp, #20]
 8003ec8:	e7c6      	b.n	8003e58 <_svfiprintf_r+0x124>
 8003eca:	fb05 2101 	mla	r1, r5, r1, r2
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	e7f0      	b.n	8003eb6 <_svfiprintf_r+0x182>
 8003ed4:	ab03      	add	r3, sp, #12
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <_svfiprintf_r+0x1ec>)
 8003edc:	a904      	add	r1, sp, #16
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f3af 8000 	nop.w
 8003ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ee8:	4681      	mov	r9, r0
 8003eea:	d1d6      	bne.n	8003e9a <_svfiprintf_r+0x166>
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	065b      	lsls	r3, r3, #25
 8003ef0:	f53f af35 	bmi.w	8003d5e <_svfiprintf_r+0x2a>
 8003ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ef6:	b01d      	add	sp, #116	; 0x74
 8003ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efc:	ab03      	add	r3, sp, #12
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4622      	mov	r2, r4
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <_svfiprintf_r+0x1ec>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	4640      	mov	r0, r8
 8003f08:	f000 f882 	bl	8004010 <_printf_i>
 8003f0c:	e7ea      	b.n	8003ee4 <_svfiprintf_r+0x1b0>
 8003f0e:	bf00      	nop
 8003f10:	080044a4 	.word	0x080044a4
 8003f14:	080044aa 	.word	0x080044aa
 8003f18:	080044ae 	.word	0x080044ae
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	08003c81 	.word	0x08003c81

08003f24 <_printf_common>:
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	4691      	mov	r9, r2
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	688a      	ldr	r2, [r1, #8]
 8003f2e:	690b      	ldr	r3, [r1, #16]
 8003f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f34:	4293      	cmp	r3, r2
 8003f36:	bfb8      	it	lt
 8003f38:	4613      	movlt	r3, r2
 8003f3a:	f8c9 3000 	str.w	r3, [r9]
 8003f3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f42:	4606      	mov	r6, r0
 8003f44:	460c      	mov	r4, r1
 8003f46:	b112      	cbz	r2, 8003f4e <_printf_common+0x2a>
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f8c9 3000 	str.w	r3, [r9]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	0699      	lsls	r1, r3, #26
 8003f52:	bf42      	ittt	mi
 8003f54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f58:	3302      	addmi	r3, #2
 8003f5a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	f015 0506 	ands.w	r5, r5, #6
 8003f64:	d107      	bne.n	8003f76 <_printf_common+0x52>
 8003f66:	f104 0a19 	add.w	sl, r4, #25
 8003f6a:	68e3      	ldr	r3, [r4, #12]
 8003f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	42ab      	cmp	r3, r5
 8003f74:	dc28      	bgt.n	8003fc8 <_printf_common+0xa4>
 8003f76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	3300      	adds	r3, #0
 8003f7e:	bf18      	it	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	0692      	lsls	r2, r2, #26
 8003f84:	d42d      	bmi.n	8003fe2 <_printf_common+0xbe>
 8003f86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d020      	beq.n	8003fd6 <_printf_common+0xb2>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	68e5      	ldr	r5, [r4, #12]
 8003f98:	f8d9 2000 	ldr.w	r2, [r9]
 8003f9c:	f003 0306 	and.w	r3, r3, #6
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	bf08      	it	eq
 8003fa4:	1aad      	subeq	r5, r5, r2
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	6922      	ldr	r2, [r4, #16]
 8003faa:	bf0c      	ite	eq
 8003fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fb0:	2500      	movne	r5, #0
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	bfc4      	itt	gt
 8003fb6:	1a9b      	subgt	r3, r3, r2
 8003fb8:	18ed      	addgt	r5, r5, r3
 8003fba:	f04f 0900 	mov.w	r9, #0
 8003fbe:	341a      	adds	r4, #26
 8003fc0:	454d      	cmp	r5, r9
 8003fc2:	d11a      	bne.n	8003ffa <_printf_common+0xd6>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e008      	b.n	8003fda <_printf_common+0xb6>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	4652      	mov	r2, sl
 8003fcc:	4639      	mov	r1, r7
 8003fce:	4630      	mov	r0, r6
 8003fd0:	47c0      	blx	r8
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d103      	bne.n	8003fde <_printf_common+0xba>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	3501      	adds	r5, #1
 8003fe0:	e7c3      	b.n	8003f6a <_printf_common+0x46>
 8003fe2:	18e1      	adds	r1, r4, r3
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	2030      	movs	r0, #48	; 0x30
 8003fe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fec:	4422      	add	r2, r4
 8003fee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ff2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	e7c5      	b.n	8003f86 <_printf_common+0x62>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	4639      	mov	r1, r7
 8004000:	4630      	mov	r0, r6
 8004002:	47c0      	blx	r8
 8004004:	3001      	adds	r0, #1
 8004006:	d0e6      	beq.n	8003fd6 <_printf_common+0xb2>
 8004008:	f109 0901 	add.w	r9, r9, #1
 800400c:	e7d8      	b.n	8003fc0 <_printf_common+0x9c>
	...

08004010 <_printf_i>:
 8004010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004014:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004018:	460c      	mov	r4, r1
 800401a:	7e09      	ldrb	r1, [r1, #24]
 800401c:	b085      	sub	sp, #20
 800401e:	296e      	cmp	r1, #110	; 0x6e
 8004020:	4617      	mov	r7, r2
 8004022:	4606      	mov	r6, r0
 8004024:	4698      	mov	r8, r3
 8004026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004028:	f000 80b3 	beq.w	8004192 <_printf_i+0x182>
 800402c:	d822      	bhi.n	8004074 <_printf_i+0x64>
 800402e:	2963      	cmp	r1, #99	; 0x63
 8004030:	d036      	beq.n	80040a0 <_printf_i+0x90>
 8004032:	d80a      	bhi.n	800404a <_printf_i+0x3a>
 8004034:	2900      	cmp	r1, #0
 8004036:	f000 80b9 	beq.w	80041ac <_printf_i+0x19c>
 800403a:	2958      	cmp	r1, #88	; 0x58
 800403c:	f000 8083 	beq.w	8004146 <_printf_i+0x136>
 8004040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004044:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004048:	e032      	b.n	80040b0 <_printf_i+0xa0>
 800404a:	2964      	cmp	r1, #100	; 0x64
 800404c:	d001      	beq.n	8004052 <_printf_i+0x42>
 800404e:	2969      	cmp	r1, #105	; 0x69
 8004050:	d1f6      	bne.n	8004040 <_printf_i+0x30>
 8004052:	6820      	ldr	r0, [r4, #0]
 8004054:	6813      	ldr	r3, [r2, #0]
 8004056:	0605      	lsls	r5, r0, #24
 8004058:	f103 0104 	add.w	r1, r3, #4
 800405c:	d52a      	bpl.n	80040b4 <_printf_i+0xa4>
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da03      	bge.n	800406e <_printf_i+0x5e>
 8004066:	222d      	movs	r2, #45	; 0x2d
 8004068:	425b      	negs	r3, r3
 800406a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800406e:	486f      	ldr	r0, [pc, #444]	; (800422c <_printf_i+0x21c>)
 8004070:	220a      	movs	r2, #10
 8004072:	e039      	b.n	80040e8 <_printf_i+0xd8>
 8004074:	2973      	cmp	r1, #115	; 0x73
 8004076:	f000 809d 	beq.w	80041b4 <_printf_i+0x1a4>
 800407a:	d808      	bhi.n	800408e <_printf_i+0x7e>
 800407c:	296f      	cmp	r1, #111	; 0x6f
 800407e:	d020      	beq.n	80040c2 <_printf_i+0xb2>
 8004080:	2970      	cmp	r1, #112	; 0x70
 8004082:	d1dd      	bne.n	8004040 <_printf_i+0x30>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	f043 0320 	orr.w	r3, r3, #32
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	e003      	b.n	8004096 <_printf_i+0x86>
 800408e:	2975      	cmp	r1, #117	; 0x75
 8004090:	d017      	beq.n	80040c2 <_printf_i+0xb2>
 8004092:	2978      	cmp	r1, #120	; 0x78
 8004094:	d1d4      	bne.n	8004040 <_printf_i+0x30>
 8004096:	2378      	movs	r3, #120	; 0x78
 8004098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800409c:	4864      	ldr	r0, [pc, #400]	; (8004230 <_printf_i+0x220>)
 800409e:	e055      	b.n	800414c <_printf_i+0x13c>
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	1d19      	adds	r1, r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6011      	str	r1, [r2, #0]
 80040a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b0:	2301      	movs	r3, #1
 80040b2:	e08c      	b.n	80041ce <_printf_i+0x1be>
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6011      	str	r1, [r2, #0]
 80040b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040bc:	bf18      	it	ne
 80040be:	b21b      	sxthne	r3, r3
 80040c0:	e7cf      	b.n	8004062 <_printf_i+0x52>
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	1d18      	adds	r0, r3, #4
 80040c8:	6010      	str	r0, [r2, #0]
 80040ca:	0628      	lsls	r0, r5, #24
 80040cc:	d501      	bpl.n	80040d2 <_printf_i+0xc2>
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	e002      	b.n	80040d8 <_printf_i+0xc8>
 80040d2:	0668      	lsls	r0, r5, #25
 80040d4:	d5fb      	bpl.n	80040ce <_printf_i+0xbe>
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	4854      	ldr	r0, [pc, #336]	; (800422c <_printf_i+0x21c>)
 80040da:	296f      	cmp	r1, #111	; 0x6f
 80040dc:	bf14      	ite	ne
 80040de:	220a      	movne	r2, #10
 80040e0:	2208      	moveq	r2, #8
 80040e2:	2100      	movs	r1, #0
 80040e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e8:	6865      	ldr	r5, [r4, #4]
 80040ea:	60a5      	str	r5, [r4, #8]
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	f2c0 8095 	blt.w	800421c <_printf_i+0x20c>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	f021 0104 	bic.w	r1, r1, #4
 80040f8:	6021      	str	r1, [r4, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d13d      	bne.n	800417a <_printf_i+0x16a>
 80040fe:	2d00      	cmp	r5, #0
 8004100:	f040 808e 	bne.w	8004220 <_printf_i+0x210>
 8004104:	4665      	mov	r5, ip
 8004106:	2a08      	cmp	r2, #8
 8004108:	d10b      	bne.n	8004122 <_printf_i+0x112>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	07db      	lsls	r3, r3, #31
 800410e:	d508      	bpl.n	8004122 <_printf_i+0x112>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	6862      	ldr	r2, [r4, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	bfde      	ittt	le
 8004118:	2330      	movle	r3, #48	; 0x30
 800411a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800411e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004122:	ebac 0305 	sub.w	r3, ip, r5
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	f8cd 8000 	str.w	r8, [sp]
 800412c:	463b      	mov	r3, r7
 800412e:	aa03      	add	r2, sp, #12
 8004130:	4621      	mov	r1, r4
 8004132:	4630      	mov	r0, r6
 8004134:	f7ff fef6 	bl	8003f24 <_printf_common>
 8004138:	3001      	adds	r0, #1
 800413a:	d14d      	bne.n	80041d8 <_printf_i+0x1c8>
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	b005      	add	sp, #20
 8004142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004146:	4839      	ldr	r0, [pc, #228]	; (800422c <_printf_i+0x21c>)
 8004148:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	6821      	ldr	r1, [r4, #0]
 8004150:	1d1d      	adds	r5, r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6015      	str	r5, [r2, #0]
 8004156:	060a      	lsls	r2, r1, #24
 8004158:	d50b      	bpl.n	8004172 <_printf_i+0x162>
 800415a:	07ca      	lsls	r2, r1, #31
 800415c:	bf44      	itt	mi
 800415e:	f041 0120 	orrmi.w	r1, r1, #32
 8004162:	6021      	strmi	r1, [r4, #0]
 8004164:	b91b      	cbnz	r3, 800416e <_printf_i+0x15e>
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	f022 0220 	bic.w	r2, r2, #32
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	e7b7      	b.n	80040e2 <_printf_i+0xd2>
 8004172:	064d      	lsls	r5, r1, #25
 8004174:	bf48      	it	mi
 8004176:	b29b      	uxthmi	r3, r3
 8004178:	e7ef      	b.n	800415a <_printf_i+0x14a>
 800417a:	4665      	mov	r5, ip
 800417c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004180:	fb02 3311 	mls	r3, r2, r1, r3
 8004184:	5cc3      	ldrb	r3, [r0, r3]
 8004186:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800418a:	460b      	mov	r3, r1
 800418c:	2900      	cmp	r1, #0
 800418e:	d1f5      	bne.n	800417c <_printf_i+0x16c>
 8004190:	e7b9      	b.n	8004106 <_printf_i+0xf6>
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	6825      	ldr	r5, [r4, #0]
 8004196:	6961      	ldr	r1, [r4, #20]
 8004198:	1d18      	adds	r0, r3, #4
 800419a:	6010      	str	r0, [r2, #0]
 800419c:	0628      	lsls	r0, r5, #24
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	d501      	bpl.n	80041a6 <_printf_i+0x196>
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	e002      	b.n	80041ac <_printf_i+0x19c>
 80041a6:	066a      	lsls	r2, r5, #25
 80041a8:	d5fb      	bpl.n	80041a2 <_printf_i+0x192>
 80041aa:	8019      	strh	r1, [r3, #0]
 80041ac:	2300      	movs	r3, #0
 80041ae:	6123      	str	r3, [r4, #16]
 80041b0:	4665      	mov	r5, ip
 80041b2:	e7b9      	b.n	8004128 <_printf_i+0x118>
 80041b4:	6813      	ldr	r3, [r2, #0]
 80041b6:	1d19      	adds	r1, r3, #4
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	681d      	ldr	r5, [r3, #0]
 80041bc:	6862      	ldr	r2, [r4, #4]
 80041be:	2100      	movs	r1, #0
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7fc f815 	bl	80001f0 <memchr>
 80041c6:	b108      	cbz	r0, 80041cc <_printf_i+0x1bc>
 80041c8:	1b40      	subs	r0, r0, r5
 80041ca:	6060      	str	r0, [r4, #4]
 80041cc:	6863      	ldr	r3, [r4, #4]
 80041ce:	6123      	str	r3, [r4, #16]
 80041d0:	2300      	movs	r3, #0
 80041d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d6:	e7a7      	b.n	8004128 <_printf_i+0x118>
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	462a      	mov	r2, r5
 80041dc:	4639      	mov	r1, r7
 80041de:	4630      	mov	r0, r6
 80041e0:	47c0      	blx	r8
 80041e2:	3001      	adds	r0, #1
 80041e4:	d0aa      	beq.n	800413c <_printf_i+0x12c>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	079b      	lsls	r3, r3, #30
 80041ea:	d413      	bmi.n	8004214 <_printf_i+0x204>
 80041ec:	68e0      	ldr	r0, [r4, #12]
 80041ee:	9b03      	ldr	r3, [sp, #12]
 80041f0:	4298      	cmp	r0, r3
 80041f2:	bfb8      	it	lt
 80041f4:	4618      	movlt	r0, r3
 80041f6:	e7a3      	b.n	8004140 <_printf_i+0x130>
 80041f8:	2301      	movs	r3, #1
 80041fa:	464a      	mov	r2, r9
 80041fc:	4639      	mov	r1, r7
 80041fe:	4630      	mov	r0, r6
 8004200:	47c0      	blx	r8
 8004202:	3001      	adds	r0, #1
 8004204:	d09a      	beq.n	800413c <_printf_i+0x12c>
 8004206:	3501      	adds	r5, #1
 8004208:	68e3      	ldr	r3, [r4, #12]
 800420a:	9a03      	ldr	r2, [sp, #12]
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	42ab      	cmp	r3, r5
 8004210:	dcf2      	bgt.n	80041f8 <_printf_i+0x1e8>
 8004212:	e7eb      	b.n	80041ec <_printf_i+0x1dc>
 8004214:	2500      	movs	r5, #0
 8004216:	f104 0919 	add.w	r9, r4, #25
 800421a:	e7f5      	b.n	8004208 <_printf_i+0x1f8>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ac      	bne.n	800417a <_printf_i+0x16a>
 8004220:	7803      	ldrb	r3, [r0, #0]
 8004222:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004226:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800422a:	e76c      	b.n	8004106 <_printf_i+0xf6>
 800422c:	080044b5 	.word	0x080044b5
 8004230:	080044c6 	.word	0x080044c6

08004234 <memcpy>:
 8004234:	b510      	push	{r4, lr}
 8004236:	1e43      	subs	r3, r0, #1
 8004238:	440a      	add	r2, r1
 800423a:	4291      	cmp	r1, r2
 800423c:	d100      	bne.n	8004240 <memcpy+0xc>
 800423e:	bd10      	pop	{r4, pc}
 8004240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004248:	e7f7      	b.n	800423a <memcpy+0x6>

0800424a <memmove>:
 800424a:	4288      	cmp	r0, r1
 800424c:	b510      	push	{r4, lr}
 800424e:	eb01 0302 	add.w	r3, r1, r2
 8004252:	d807      	bhi.n	8004264 <memmove+0x1a>
 8004254:	1e42      	subs	r2, r0, #1
 8004256:	4299      	cmp	r1, r3
 8004258:	d00a      	beq.n	8004270 <memmove+0x26>
 800425a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800425e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004262:	e7f8      	b.n	8004256 <memmove+0xc>
 8004264:	4283      	cmp	r3, r0
 8004266:	d9f5      	bls.n	8004254 <memmove+0xa>
 8004268:	1881      	adds	r1, r0, r2
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	42d3      	cmn	r3, r2
 800426e:	d100      	bne.n	8004272 <memmove+0x28>
 8004270:	bd10      	pop	{r4, pc}
 8004272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004276:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800427a:	e7f7      	b.n	800426c <memmove+0x22>

0800427c <_free_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4605      	mov	r5, r0
 8004280:	2900      	cmp	r1, #0
 8004282:	d045      	beq.n	8004310 <_free_r+0x94>
 8004284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004288:	1f0c      	subs	r4, r1, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	18e4      	addlt	r4, r4, r3
 8004290:	f000 f8d2 	bl	8004438 <__malloc_lock>
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <_free_r+0x98>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	4610      	mov	r0, r2
 800429a:	b933      	cbnz	r3, 80042aa <_free_r+0x2e>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f000 b8c8 	b.w	800443a <__malloc_unlock>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d90c      	bls.n	80042c8 <_free_r+0x4c>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	1862      	adds	r2, r4, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bf04      	itt	eq
 80042b6:	681a      	ldreq	r2, [r3, #0]
 80042b8:	685b      	ldreq	r3, [r3, #4]
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	bf04      	itt	eq
 80042be:	1852      	addeq	r2, r2, r1
 80042c0:	6022      	streq	r2, [r4, #0]
 80042c2:	6004      	str	r4, [r0, #0]
 80042c4:	e7ec      	b.n	80042a0 <_free_r+0x24>
 80042c6:	4613      	mov	r3, r2
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	b10a      	cbz	r2, 80042d0 <_free_r+0x54>
 80042cc:	42a2      	cmp	r2, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x4a>
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	1858      	adds	r0, r3, r1
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x74>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	4401      	add	r1, r0
 80042dc:	1858      	adds	r0, r3, r1
 80042de:	4282      	cmp	r2, r0
 80042e0:	6019      	str	r1, [r3, #0]
 80042e2:	d1dd      	bne.n	80042a0 <_free_r+0x24>
 80042e4:	6810      	ldr	r0, [r2, #0]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	4401      	add	r1, r0
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	e7d7      	b.n	80042a0 <_free_r+0x24>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x7c>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d3      	b.n	80042a0 <_free_r+0x24>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428a      	cmp	r2, r1
 80042fe:	bf04      	itt	eq
 8004300:	6811      	ldreq	r1, [r2, #0]
 8004302:	6852      	ldreq	r2, [r2, #4]
 8004304:	6062      	str	r2, [r4, #4]
 8004306:	bf04      	itt	eq
 8004308:	1809      	addeq	r1, r1, r0
 800430a:	6021      	streq	r1, [r4, #0]
 800430c:	605c      	str	r4, [r3, #4]
 800430e:	e7c7      	b.n	80042a0 <_free_r+0x24>
 8004310:	bd38      	pop	{r3, r4, r5, pc}
 8004312:	bf00      	nop
 8004314:	200000ac 	.word	0x200000ac

08004318 <_malloc_r>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	1ccd      	adds	r5, r1, #3
 800431c:	f025 0503 	bic.w	r5, r5, #3
 8004320:	3508      	adds	r5, #8
 8004322:	2d0c      	cmp	r5, #12
 8004324:	bf38      	it	cc
 8004326:	250c      	movcc	r5, #12
 8004328:	2d00      	cmp	r5, #0
 800432a:	4606      	mov	r6, r0
 800432c:	db01      	blt.n	8004332 <_malloc_r+0x1a>
 800432e:	42a9      	cmp	r1, r5
 8004330:	d903      	bls.n	800433a <_malloc_r+0x22>
 8004332:	230c      	movs	r3, #12
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	2000      	movs	r0, #0
 8004338:	bd70      	pop	{r4, r5, r6, pc}
 800433a:	f000 f87d 	bl	8004438 <__malloc_lock>
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <_malloc_r+0xac>)
 8004340:	6814      	ldr	r4, [r2, #0]
 8004342:	4621      	mov	r1, r4
 8004344:	b991      	cbnz	r1, 800436c <_malloc_r+0x54>
 8004346:	4c20      	ldr	r4, [pc, #128]	; (80043c8 <_malloc_r+0xb0>)
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	b91b      	cbnz	r3, 8004354 <_malloc_r+0x3c>
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f863 	bl	8004418 <_sbrk_r>
 8004352:	6020      	str	r0, [r4, #0]
 8004354:	4629      	mov	r1, r5
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f85e 	bl	8004418 <_sbrk_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d124      	bne.n	80043aa <_malloc_r+0x92>
 8004360:	230c      	movs	r3, #12
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f868 	bl	800443a <__malloc_unlock>
 800436a:	e7e4      	b.n	8004336 <_malloc_r+0x1e>
 800436c:	680b      	ldr	r3, [r1, #0]
 800436e:	1b5b      	subs	r3, r3, r5
 8004370:	d418      	bmi.n	80043a4 <_malloc_r+0x8c>
 8004372:	2b0b      	cmp	r3, #11
 8004374:	d90f      	bls.n	8004396 <_malloc_r+0x7e>
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	50cd      	str	r5, [r1, r3]
 800437a:	18cc      	adds	r4, r1, r3
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f85c 	bl	800443a <__malloc_unlock>
 8004382:	f104 000b 	add.w	r0, r4, #11
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	f020 0007 	bic.w	r0, r0, #7
 800438c:	1ac3      	subs	r3, r0, r3
 800438e:	d0d3      	beq.n	8004338 <_malloc_r+0x20>
 8004390:	425a      	negs	r2, r3
 8004392:	50e2      	str	r2, [r4, r3]
 8004394:	e7d0      	b.n	8004338 <_malloc_r+0x20>
 8004396:	428c      	cmp	r4, r1
 8004398:	684b      	ldr	r3, [r1, #4]
 800439a:	bf16      	itet	ne
 800439c:	6063      	strne	r3, [r4, #4]
 800439e:	6013      	streq	r3, [r2, #0]
 80043a0:	460c      	movne	r4, r1
 80043a2:	e7eb      	b.n	800437c <_malloc_r+0x64>
 80043a4:	460c      	mov	r4, r1
 80043a6:	6849      	ldr	r1, [r1, #4]
 80043a8:	e7cc      	b.n	8004344 <_malloc_r+0x2c>
 80043aa:	1cc4      	adds	r4, r0, #3
 80043ac:	f024 0403 	bic.w	r4, r4, #3
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d005      	beq.n	80043c0 <_malloc_r+0xa8>
 80043b4:	1a21      	subs	r1, r4, r0
 80043b6:	4630      	mov	r0, r6
 80043b8:	f000 f82e 	bl	8004418 <_sbrk_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	d0cf      	beq.n	8004360 <_malloc_r+0x48>
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	e7db      	b.n	800437c <_malloc_r+0x64>
 80043c4:	200000ac 	.word	0x200000ac
 80043c8:	200000b0 	.word	0x200000b0

080043cc <_realloc_r>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	4607      	mov	r7, r0
 80043d0:	4614      	mov	r4, r2
 80043d2:	460e      	mov	r6, r1
 80043d4:	b921      	cbnz	r1, 80043e0 <_realloc_r+0x14>
 80043d6:	4611      	mov	r1, r2
 80043d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043dc:	f7ff bf9c 	b.w	8004318 <_malloc_r>
 80043e0:	b922      	cbnz	r2, 80043ec <_realloc_r+0x20>
 80043e2:	f7ff ff4b 	bl	800427c <_free_r>
 80043e6:	4625      	mov	r5, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	f000 f826 	bl	800443c <_malloc_usable_size_r>
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d20f      	bcs.n	8004414 <_realloc_r+0x48>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4638      	mov	r0, r7
 80043f8:	f7ff ff8e 	bl	8004318 <_malloc_r>
 80043fc:	4605      	mov	r5, r0
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0f2      	beq.n	80043e8 <_realloc_r+0x1c>
 8004402:	4631      	mov	r1, r6
 8004404:	4622      	mov	r2, r4
 8004406:	f7ff ff15 	bl	8004234 <memcpy>
 800440a:	4631      	mov	r1, r6
 800440c:	4638      	mov	r0, r7
 800440e:	f7ff ff35 	bl	800427c <_free_r>
 8004412:	e7e9      	b.n	80043e8 <_realloc_r+0x1c>
 8004414:	4635      	mov	r5, r6
 8004416:	e7e7      	b.n	80043e8 <_realloc_r+0x1c>

08004418 <_sbrk_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4c06      	ldr	r4, [pc, #24]	; (8004434 <_sbrk_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4605      	mov	r5, r0
 8004420:	4608      	mov	r0, r1
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	f7fd f8d0 	bl	80015c8 <_sbrk>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_sbrk_r+0x1a>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	b103      	cbz	r3, 8004432 <_sbrk_r+0x1a>
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	2000013c 	.word	0x2000013c

08004438 <__malloc_lock>:
 8004438:	4770      	bx	lr

0800443a <__malloc_unlock>:
 800443a:	4770      	bx	lr

0800443c <_malloc_usable_size_r>:
 800443c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004440:	1f18      	subs	r0, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfbc      	itt	lt
 8004446:	580b      	ldrlt	r3, [r1, r0]
 8004448:	18c0      	addlt	r0, r0, r3
 800444a:	4770      	bx	lr

0800444c <_init>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr

08004458 <_fini>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr
