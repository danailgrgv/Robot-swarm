
SwarmProjectDrivingTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800355c  0800355c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800355c  0800355c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003570  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003570  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007130  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000130c  00000000  00000000  0002716c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00028478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  00028b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ecae  00000000  00000000  00029110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006329  00000000  00000000  00047dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc03c  00000000  00000000  0004e0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aac  00000000  00000000  0010a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800350c 	.word	0x0800350c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800350c 	.word	0x0800350c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fb50 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f988 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 fa14 	bl	8000e3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a14:	f000 f9e2 	bl	8000ddc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  pinSetup();
 8000a18:	f000 f80c 	bl	8000a34 <pinSetup>
  timerSetup();
 8000a1c:	f000 f836 	bl	8000a8c <timerSetup>
  timerOutputSetup();
 8000a20:	f000 f8e2 	bl	8000be8 <timerOutputSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rotateVehicle(30);
 8000a24:	201e      	movs	r0, #30
 8000a26:	f000 f93f 	bl	8000ca8 <rotateVehicle>
	  HAL_Delay(5000);
 8000a2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a2e:	f000 fba3 	bl	8001178 <HAL_Delay>
	  rotateVehicle(30);
 8000a32:	e7f7      	b.n	8000a24 <main+0x20>

08000a34 <pinSetup>:
  }
  /* USER CODE END 3 */
}

static void pinSetup(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER1_1;
 8000a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_0 | GPIO_MODER_MODER1_0);
 8000a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a5a:	f023 0304 	bic.w	r3, r3, #4
 8000a5e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL5_Msk | GPIO_AFRL_AFRL1_Msk);
 8000a60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a6a:	f023 13f0 	bic.w	r3, r3, #15728880	; 0xf000f0
 8000a6e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL5_Pos) | (1 << GPIO_AFRL_AFRL1_Pos);
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a7a:	f043 1310 	orr.w	r3, r3, #1048592	; 0x100010
 8000a7e:	6213      	str	r3, [r2, #32]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <timerSetup>:

static void timerSetup(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <timerSetup+0x34>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <timerSetup+0x34>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 72 - 1;
 8000a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa0:	2247      	movs	r2, #71	; 0x47
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR_VALUE - 1;
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	00000000 	.word	0x00000000

08000ac8 <setDutyCycleChannel1>:

static void setDutyCycleChannel1(float power)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	dd03      	ble.n	8000aec <setDutyCycleChannel1+0x24>
 8000ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e00a      	b.n	8000b02 <setDutyCycleChannel1+0x3a>
	else if(power < -1) power = -1;
 8000aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000af0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afc:	d501      	bpl.n	8000b02 <setDutyCycleChannel1+0x3a>
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <setDutyCycleChannel1+0x88>)
 8000b00:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fccc 	bl	80004a0 <__aeabi_f2d>
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <setDutyCycleChannel1+0x8c>)
 8000b0e:	f7ff fd1f 	bl	8000550 <__aeabi_dmul>
 8000b12:	4603      	mov	r3, r0
 8000b14:	460c      	mov	r4, r1
 8000b16:	4618      	mov	r0, r3
 8000b18:	4621      	mov	r1, r4
 8000b1a:	a30b      	add	r3, pc, #44	; (adr r3, 8000b48 <setDutyCycleChannel1+0x80>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	f7ff fb60 	bl	80001e4 <__adddf3>
 8000b24:	4603      	mov	r3, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b30:	4610      	mov	r0, r2
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff ff46 	bl	80009c4 <__aeabi_d2uiz>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	f3af 8000 	nop.w
 8000b48:	00000000 	.word	0x00000000
 8000b4c:	40977000 	.word	0x40977000
 8000b50:	bf800000 	.word	0xbf800000
 8000b54:	406b8000 	.word	0x406b8000

08000b58 <setDutyCycleChannel2>:

static void setDutyCycleChannel2(float power)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power > 1) power = 1;
 8000b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b72:	dd03      	ble.n	8000b7c <setDutyCycleChannel2+0x24>
 8000b74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e00a      	b.n	8000b92 <setDutyCycleChannel2+0x3a>
	else if(power < -1) power = -1;
 8000b7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8c:	d501      	bpl.n	8000b92 <setDutyCycleChannel2+0x3a>
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <setDutyCycleChannel2+0x88>)
 8000b90:	607b      	str	r3, [r7, #4]
	TIM2->CCR2 = DEGREES_0 + power * (DEGREES_0 - DEGREES_90);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fc84 	bl	80004a0 <__aeabi_f2d>
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <setDutyCycleChannel2+0x8c>)
 8000b9e:	f7ff fcd7 	bl	8000550 <__aeabi_dmul>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	4621      	mov	r1, r4
 8000baa:	a30b      	add	r3, pc, #44	; (adr r3, 8000bd8 <setDutyCycleChannel2+0x80>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fb18 	bl	80001e4 <__adddf3>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4623      	mov	r3, r4
 8000bbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f7ff fefe 	bl	80009c4 <__aeabi_d2uiz>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40977000 	.word	0x40977000
 8000be0:	bf800000 	.word	0xbf800000
 8000be4:	406b8000 	.word	0x406b8000

08000be8 <timerOutputSetup>:

static void timerOutputSetup(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	//Configure channel 1
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk | TIM_CCMR1_OC1M_Msk | TIM_CCMR1_OC1PE_Msk) ;
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfa:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8000bfe:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c0e:	6193      	str	r3, [r2, #24]
	TIM2->CCR1 |= 0;
 8000c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E_Msk;
 8000c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	f023 0302 	bic.w	r3, r3, #2
 8000c3a:	6213      	str	r3, [r2, #32]

	//Configure channel 2
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S_Msk | TIM_CCMR1_OC2M_Msk | TIM_CCMR1_OC2PE_Msk) ;
 8000c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c4a:	f423 43f6 	bic.w	r3, r3, #31488	; 0x7b00
 8000c4e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000c5e:	6193      	str	r3, [r2, #24]
	TIM2->CCR2 |= 0;
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6a:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E_Msk;
 8000c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2P_Msk;
 8000c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c80:	6a1b      	ldr	r3, [r3, #32]
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c86:	f023 0320 	bic.w	r3, r3, #32
 8000c8a:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <rotateVehicle>:

static void rotateVehicle(int rotationDegrees)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	int delayTime = 13.67 *(float)rotationDegrees;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cba:	ee17 0a90 	vmov	r0, s15
 8000cbe:	f7ff fbef 	bl	80004a0 <__aeabi_f2d>
 8000cc2:	a315      	add	r3, pc, #84	; (adr r3, 8000d18 <rotateVehicle+0x70>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f7ff fc42 	bl	8000550 <__aeabi_dmul>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	f7ff fe4e 	bl	8000974 <__aeabi_d2iz>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60fb      	str	r3, [r7, #12]
	setDutyCycleChannel1(.3);
 8000cdc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000d10 <rotateVehicle+0x68>
 8000ce0:	f7ff fef2 	bl	8000ac8 <setDutyCycleChannel1>
	setDutyCycleChannel2(.3);
 8000ce4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000d10 <rotateVehicle+0x68>
 8000ce8:	f7ff ff36 	bl	8000b58 <setDutyCycleChannel2>
	HAL_Delay(20 + delayTime);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3314      	adds	r3, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fa41 	bl	8001178 <HAL_Delay>
	setDutyCycleChannel1(0);
 8000cf6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000d14 <rotateVehicle+0x6c>
 8000cfa:	f7ff fee5 	bl	8000ac8 <setDutyCycleChannel1>
	setDutyCycleChannel2(0);
 8000cfe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000d14 <rotateVehicle+0x6c>
 8000d02:	f7ff ff29 	bl	8000b58 <setDutyCycleChannel2>
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	3e99999a 	.word	0x3e99999a
 8000d14:	00000000 	.word	0x00000000
 8000d18:	3d70a3d7 	.word	0x3d70a3d7
 8000d1c:	402b570a 	.word	0x402b570a

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0a6      	sub	sp, #152	; 0x98
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fbe4 	bl	80034fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2258      	movs	r2, #88	; 0x58
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fbd6 	bl	80034fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d50:	2302      	movs	r3, #2
 8000d52:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d6c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fca4 	bl	80016cc <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 f8bf 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	230f      	movs	r3, #15
 8000d90:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2302      	movs	r3, #2
 8000d94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000da8:	2102      	movs	r1, #2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fba4 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db6:	f000 f8a9 	bl	8000f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fdcd 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 f89c 	bl	8000f0c <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3798      	adds	r7, #152	; 0x98
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MX_USART2_UART_Init+0x5c>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e20:	f001 ffbe 	bl	8002da0 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f86f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000028 	.word	0x20000028
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_GPIO_Init+0xc4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f000 fbef 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_GPIO_Init+0xc8>)
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000ed4:	f000 fa58 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 fa49 	bl	8001388 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	10210000 	.word	0x10210000
 8000f08:	48000800 	.word	0x48000800

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <Error_Handler+0x6>

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x44>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f000 f9e8 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_UART_MspInit+0x7c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d128      	bne.n	8000fd0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_UART_MspInit+0x80>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f000 f9dc 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f884 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 fa15 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fcbb 	bl	8000a04 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800109c:	08003564 	.word	0x08003564
  ldr r2, =_sbss
 80010a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a4:	200000b0 	.word	0x200000b0

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>
	...

080010ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x28>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x28>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f92f 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff ff24 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f939 	bl	800136e <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f90f 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	200000ac 	.word	0x200000ac

08001160 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;  
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200000ac 	.word	0x200000ac

08001178 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_Delay+0x40>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff47 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff5c 	bl	8001204 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb0 	bl	80012dc <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e160      	b.n	800165a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8152 	beq.w	8001654 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d00b      	beq.n	80013d0 <HAL_GPIO_Init+0x48>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c4:	2b11      	cmp	r3, #17
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0xea>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80ac 	beq.w	8001654 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_GPIO_Init+0x2f0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <HAL_GPIO_Init+0x2f0>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x2f0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <HAL_GPIO_Init+0x2f4>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800153e:	d025      	beq.n	800158c <HAL_GPIO_Init+0x204>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_GPIO_Init+0x2f8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d01f      	beq.n	8001588 <HAL_GPIO_Init+0x200>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_GPIO_Init+0x2fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_GPIO_Init+0x1fc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x300>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1f8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x304>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1f4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x308>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1f0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x30c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1ec>
 8001570:	2306      	movs	r3, #6
 8001572:	e00c      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001574:	2307      	movs	r3, #7
 8001576:	e00a      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001578:	2305      	movs	r3, #5
 800157a:	e008      	b.n	800158e <HAL_GPIO_Init+0x206>
 800157c:	2304      	movs	r3, #4
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001580:	2303      	movs	r3, #3
 8001582:	e004      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001584:	2302      	movs	r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_GPIO_Init+0x206>
 800158c:	2300      	movs	r3, #0
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	f002 0203 	and.w	r2, r2, #3
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	4093      	lsls	r3, r2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159e:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2f4>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_GPIO_Init+0x310>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_GPIO_Init+0x310>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x310>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_GPIO_Init+0x310>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_GPIO_Init+0x310>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_GPIO_Init+0x310>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x310>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_GPIO_Init+0x310>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f ae97 	bne.w	8001398 <HAL_GPIO_Init+0x10>
  }
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f000 bf01 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8160 	beq.w	80019b6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f6:	4bae      	ldr	r3, [pc, #696]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001702:	4bab      	ldr	r3, [pc, #684]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d159      	bne.n	80017c2 <HAL_RCC_OscConfig+0xf6>
 800170e:	4ba8      	ldr	r3, [pc, #672]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d152      	bne.n	80017c2 <HAL_RCC_OscConfig+0xf6>
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001730:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x82>
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0xae>
 800174e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001752:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001766:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800176a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001776:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001782:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800178e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	f002 021f 	and.w	r2, r2, #31
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8102 	beq.w	80019b4 <HAL_RCC_OscConfig+0x2e8>
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 80fc 	bne.w	80019b4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f000 be93 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x110>
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e030      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x134>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01e      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x15a>
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a64      	ldr	r2, [pc, #400]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 8001826:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a61      	ldr	r2, [pc, #388]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d059      	beq.n	80018fc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc8a 	bl	8001160 <HAL_GetTick>
 800184c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001852:	f7ff fc85 	bl	8001160 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 be40 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800187c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x1ce>
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x1fa>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ab      	beq.n	8001852 <HAL_RCC_OscConfig+0x186>
 80018fa:	e05c      	b.n	80019b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc30 	bl	8001160 <HAL_GetTick>
 8001900:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff fc2b 	bl	8001160 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d902      	bls.n	800191c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	f000 bde6 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
 800191c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001920:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001930:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x282>
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x2ae>
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001966:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800196a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x2e4>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001982:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800198e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f002 021f 	and.w	r2, r2, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ab      	bne.n	8001906 <HAL_RCC_OscConfig+0x23a>
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_OscConfig+0x2ea>
 80019b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8170 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019c6:	4bd0      	ldr	r3, [pc, #832]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019d2:	4bcd      	ldr	r3, [pc, #820]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d16d      	bne.n	8001aba <HAL_RCC_OscConfig+0x3ee>
 80019de:	4bca      	ldr	r3, [pc, #808]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ea:	d166      	bne.n	8001aba <HAL_RCC_OscConfig+0x3ee>
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0x350>
 8001a16:	4bbc      	ldr	r3, [pc, #752]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e013      	b.n	8001a44 <HAL_RCC_OscConfig+0x378>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a40:	4bb1      	ldr	r3, [pc, #708]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2202      	movs	r2, #2
 8001a46:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a4a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3ba>
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d002      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f000 bd31 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	21f8      	movs	r1, #248	; 0xf8
 8001a96:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a9e:	fa91 f1a1 	rbit	r1, r1
 8001aa2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001aa6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001aaa:	fab1 f181 	clz	r1, r1
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	408b      	lsls	r3, r1
 8001ab2:	4995      	ldr	r1, [pc, #596]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab8:	e0f5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8085 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x504>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ad8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	461a      	mov	r2, r3
 8001aee:	2301      	movs	r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb35 	bl	8001160 <HAL_GetTick>
 8001af6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb30 	bl	8001160 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d902      	bls.n	8001b12 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f000 bceb 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_OscConfig+0x476>
 8001b3c:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	e013      	b.n	8001b6a <HAL_RCC_OscConfig+0x49e>
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b66:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b74:	fa92 f2a2 	rbit	r2, r2
 8001b78:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0af      	beq.n	8001afc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	21f8      	movs	r1, #248	; 0xf8
 8001bac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001bb4:	fa91 f1a1 	rbit	r1, r1
 8001bb8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bbc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bc0:	fab1 f181 	clz	r1, r1
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	408b      	lsls	r3, r1
 8001bc8:	494f      	ldr	r1, [pc, #316]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	e06a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5da>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001be2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fab0 	bl	8001160 <HAL_GetTick>
 8001c00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff faab 	bl	8001160 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d902      	bls.n	8001c1c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f000 bc66 	b.w	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x580>
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x5a8>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_OscConfig+0x63c>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	2202      	movs	r2, #2
 8001c76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1af      	bne.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80da 	beq.w	8001e6a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d069      	beq.n	8001d94 <HAL_RCC_OscConfig+0x6c8>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x640>)
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fa39 	bl	8001160 <HAL_GetTick>
 8001cee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e00d      	b.n	8001d10 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fa34 	bl	8001160 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d905      	bls.n	8001d10 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e3ef      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	10908120 	.word	0x10908120
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d54:	4ba4      	ldr	r3, [pc, #656]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	6019      	str	r1, [r3, #0]
 8001d60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f1a3 	rbit	r1, r3
 8001d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d6e:	6019      	str	r1, [r3, #0]
  return result;
 8001d70:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0b0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x628>
 8001d92:	e06a      	b.n	8001e6a <HAL_RCC_OscConfig+0x79e>
 8001d94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001daa:	601a      	str	r2, [r3, #0]
  return result;
 8001dac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001db0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x920>)
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f9cb 	bl	8001160 <HAL_GetTick>
 8001dca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f9c6 	bl	8001160 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e381      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001de4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e00:	2202      	movs	r2, #2
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e34:	2102      	movs	r1, #2
 8001e36:	6019      	str	r1, [r3, #0]
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f1a3 	rbit	r1, r3
 8001e42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e46:	6019      	str	r1, [r3, #0]
  return result;
 8001e48:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1b2      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8157 	beq.w	8002128 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a55      	ldr	r2, [pc, #340]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	61d3      	str	r3, [r2, #28]
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_RCC_OscConfig+0x924>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11a      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_RCC_OscConfig+0x924>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_RCC_OscConfig+0x924>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff f949 	bl	8001160 <HAL_GetTick>
 8001ece:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	e009      	b.n	8001ee8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7ff f944 	bl	8001160 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e2ff      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_OscConfig+0x924>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ef      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x840>
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	e02f      	b.n	8001f6c <HAL_RCC_OscConfig+0x8a0>
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x864>
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0x8a0>
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x888>
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x8a0>
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06a      	beq.n	800204c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff f8f3 	bl	8001160 <HAL_GetTick>
 8001f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f8ee 	bl	8001160 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e2a7      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 8001f98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fc6:	601a      	str	r2, [r3, #0]
  return result;
 8001fc8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x928>
 8001fe2:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <HAL_RCC_OscConfig+0x91c>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	e013      	b.n	8002010 <HAL_RCC_OscConfig+0x944>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	10908120 	.word	0x10908120
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4bc0      	ldr	r3, [pc, #768]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002014:	2102      	movs	r1, #2
 8002016:	6011      	str	r1, [r2, #0]
 8002018:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	fa92 f1a2 	rbit	r1, r2
 8002022:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002026:	6011      	str	r1, [r2, #0]
  return result;
 8002028:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	fab2 f282 	clz	r2, r2
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	f002 021f 	and.w	r2, r2, #31
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f202 	lsl.w	r2, r1, r2
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d09a      	beq.n	8001f80 <HAL_RCC_OscConfig+0x8b4>
 800204a:	e063      	b.n	8002114 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff f888 	bl	8001160 <HAL_GetTick>
 8002050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	e00b      	b.n	800206e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff f883 	bl	8001160 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e23c      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 800206e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209c:	601a      	str	r2, [r3, #0]
  return result;
 800209e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d102      	bne.n	80020be <HAL_RCC_OscConfig+0x9f2>
 80020b8:	4b95      	ldr	r3, [pc, #596]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	e00d      	b.n	80020da <HAL_RCC_OscConfig+0xa0e>
 80020be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020c2:	2202      	movs	r2, #2
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020de:	2102      	movs	r1, #2
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fa92 f1a2 	rbit	r1, r2
 80020ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020f0:	6011      	str	r1, [r2, #0]
  return result;
 80020f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1a0      	bne.n	8002056 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002114:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a7b      	ldr	r2, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 81d9 	beq.w	80024e6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	f000 81a6 	beq.w	800248e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 811e 	bne.w	800238a <HAL_RCC_OscConfig+0xcbe>
 800214e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002152:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002166:	601a      	str	r2, [r3, #0]
  return result;
 8002168:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800216c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	461a      	mov	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe ffec 	bl	8001160 <HAL_GetTick>
 8002188:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe ffe7 	bl	8001160 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1a2      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 80021a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021ba:	601a      	str	r2, [r3, #0]
  return result;
 80021bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_OscConfig+0xb10>
 80021d6:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0xb48>
 80021dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002218:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800221c:	6011      	str	r1, [r2, #0]
 800221e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	fa92 f1a2 	rbit	r1, r2
 8002228:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800222c:	6011      	str	r1, [r2, #0]
  return result;
 800222e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f002 021f 	and.w	r2, r2, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d19e      	bne.n	800218e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f023 020f 	bic.w	r2, r3, #15
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	492c      	ldr	r1, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002260:	4313      	orrs	r3, r2
 8002262:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a19      	ldr	r1, [r3, #32]
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	430b      	orrs	r3, r1
 800227a:	4925      	ldr	r1, [pc, #148]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002298:	601a      	str	r2, [r3, #0]
  return result;
 800229a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800229e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe ff53 	bl	8001160 <HAL_GetTick>
 80022ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ff4e 	bl	8001160 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e109      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 80022d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022ec:	601a      	str	r2, [r3, #0]
  return result;
 80022ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0xc48>
 8002308:	4b01      	ldr	r3, [pc, #4]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e01e      	b.n	800234c <HAL_RCC_OscConfig+0xc80>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0xe28>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002364:	6011      	str	r1, [r2, #0]
  return result;
 8002366:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d09b      	beq.n	80022c0 <HAL_RCC_OscConfig+0xbf4>
 8002388:	e0ad      	b.n	80024e6 <HAL_RCC_OscConfig+0xe1a>
 800238a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023a2:	601a      	str	r2, [r3, #0]
  return result;
 80023a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fece 	bl	8001160 <HAL_GetTick>
 80023c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	e009      	b.n	80023de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe fec9 	bl	8001160 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e084      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f6:	601a      	str	r2, [r3, #0]
  return result;
 80023f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0xd4c>
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0xe28>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e01b      	b.n	8002450 <HAL_RCC_OscConfig+0xd84>
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_OscConfig+0xe28>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f107 0214 	add.w	r2, r7, #20
 8002454:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	f107 0214 	add.w	r2, r7, #20
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f107 0210 	add.w	r2, r7, #16
 8002468:	6011      	str	r1, [r2, #0]
  return result;
 800246a:	f107 0210 	add.w	r2, r7, #16
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d19e      	bne.n	80023ca <HAL_RCC_OscConfig+0xcfe>
 800248c:	e02b      	b.n	80024e6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e025      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCC_OscConfig+0xe28>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0xe28>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d111      	bne.n	80024e2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d108      	bne.n	80024e2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	; 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e162      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	498b      	ldr	r1, [pc, #556]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e14a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	497f      	ldr	r1, [pc, #508]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80dc 	beq.w	8002724 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d13c      	bne.n	80025ee <HAL_RCC_ClockConfig+0xf6>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_RCC_ClockConfig+0xa6>
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e00f      	b.n	80025be <HAL_RCC_ClockConfig+0xc6>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	667b      	str	r3, [r7, #100]	; 0x64
 80025ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b0:	663b      	str	r3, [r7, #96]	; 0x60
 80025b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ce:	fab2 f282 	clz	r2, r2
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f002 021f 	and.w	r2, r2, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d17b      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0f3      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d13c      	bne.n	8002670 <HAL_RCC_ClockConfig+0x178>
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_ClockConfig+0x128>
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e00f      	b.n	8002640 <HAL_RCC_ClockConfig+0x148>
 8002620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	647b      	str	r3, [r7, #68]	; 0x44
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002644:	63ba      	str	r2, [r7, #56]	; 0x38
 8002646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f042 0220 	orr.w	r2, r2, #32
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f002 021f 	and.w	r2, r2, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13a      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b2      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002670:	2302      	movs	r3, #2
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_RCC_ClockConfig+0x1a0>
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e00d      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1bc>
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	2302      	movs	r3, #2
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	61ba      	str	r2, [r7, #24]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	617a      	str	r2, [r7, #20]
  return result;
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e079      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	491a      	ldr	r1, [pc, #104]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fd34 	bl	8001160 <HAL_GetTick>
 80026f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fd30 	bl	8001160 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e061      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d214      	bcs.n	800275c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4906      	ldr	r1, [pc, #24]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e040      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4912      	ldr	r1, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800279a:	f000 f829 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800279e:	4601      	mov	r1, r0
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	22f0      	movs	r2, #240	; 0xf0
 80027aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	60fa      	str	r2, [r7, #12]
  return result;
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	40d3      	lsrs	r3, r2
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x2ec>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	fa21 f303 	lsr.w	r3, r1, r3
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x2f0>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCC_ClockConfig+0x2f4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fc82 	bl	80010d8 <HAL_InitTick>
  
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3778      	adds	r7, #120	; 0x78
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003524 	.word	0x08003524
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e03f      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e03f      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800282c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002830:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	607a      	str	r2, [r7, #4]
  return result;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	220f      	movs	r2, #15
 8002854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	60fa      	str	r2, [r7, #12]
  return result;
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	e007      	b.n	800289a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	623b      	str	r3, [r7, #32]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028a2:	623b      	str	r3, [r7, #32]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	6a3b      	ldr	r3, [r7, #32]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	372c      	adds	r7, #44	; 0x2c
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	0800353c 	.word	0x0800353c
 80028c0:	0800354c 	.word	0x0800354c

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028e2:	f7ff ffef 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	603a      	str	r2, [r7, #0]
  return result;
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_RCC_GetPCLK1Freq+0x40>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08003534 	.word	0x08003534

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002926:	f7ff ffcd 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 800292a:	4601      	mov	r1, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002934:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	603a      	str	r2, [r7, #0]
  return result;
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	fab2 f282 	clz	r2, r2
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	40d3      	lsrs	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x40>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	08003534 	.word	0x08003534

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b092      	sub	sp, #72	; 0x48
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80d4 	beq.w	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002988:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10e      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	61d3      	str	r3, [r2, #28]
 80029a0:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a41      	ldr	r2, [pc, #260]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fbc9 	bl	8001160 <HAL_GetTick>
 80029ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe fbc5 	bl	8001160 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1d6      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f0:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8084 	beq.w	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d07c      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2300      	movs	r3, #0
 8002a60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04b      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fb75 	bl	8001160 <HAL_GetTick>
 8002a76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fb71 	bl	8001160 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e180      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a90:	2302      	movs	r3, #2
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002abe:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	e00d      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	10908100 	.word	0x10908100
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	4ba0      	ldr	r3, [pc, #640]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	613a      	str	r2, [r7, #16]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	fa92 f2a2 	rbit	r2, r2
 8002aea:	60fa      	str	r2, [r7, #12]
  return result;
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0b7      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b0a:	4b95      	ldr	r3, [pc, #596]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4992      	ldr	r1, [pc, #584]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b8e      	ldr	r3, [pc, #568]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4a8d      	ldr	r2, [pc, #564]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f023 0203 	bic.w	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4985      	ldr	r1, [pc, #532]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	497e      	ldr	r1, [pc, #504]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	4976      	ldr	r1, [pc, #472]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b96:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f023 0210 	bic.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	496f      	ldr	r1, [pc, #444]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	4967      	ldr	r1, [pc, #412]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f023 0220 	bic.w	r2, r3, #32
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4960      	ldr	r1, [pc, #384]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	4958      	ldr	r1, [pc, #352]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4951      	ldr	r1, [pc, #324]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4949      	ldr	r1, [pc, #292]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c4a:	4b45      	ldr	r3, [pc, #276]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4942      	ldr	r1, [pc, #264]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c68:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	493a      	ldr	r1, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	4933      	ldr	r1, [pc, #204]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	492b      	ldr	r1, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4924      	ldr	r1, [pc, #144]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	491c      	ldr	r1, [pc, #112]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	4915      	ldr	r1, [pc, #84]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	490d      	ldr	r1, [pc, #52]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d46:	4906      	ldr	r1, [pc, #24]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d58:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6c:	490b      	ldr	r1, [pc, #44]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3748      	adds	r7, #72	; 0x48
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e040      	b.n	8002e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe f8ca 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f82c 	bl	8002e3c <UART_SetConfig>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e022      	b.n	8002e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9f4 	bl	80031e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa7b 	bl	8003328 <UART_CheckIdleState>
 8002e32:	4603      	mov	r3, r0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4baa      	ldr	r3, [pc, #680]	; (8003110 <UART_SetConfig+0x2d4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a98      	ldr	r2, [pc, #608]	; (8003114 <UART_SetConfig+0x2d8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d121      	bne.n	8002efc <UART_SetConfig+0xc0>
 8002eb8:	4b97      	ldr	r3, [pc, #604]	; (8003118 <UART_SetConfig+0x2dc>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d817      	bhi.n	8002ef4 <UART_SetConfig+0xb8>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0x90>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee9 	.word	0x08002ee9
 8002ed4:	08002eef 	.word	0x08002eef
 8002ed8:	08002ee3 	.word	0x08002ee3
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e0b2      	b.n	8003048 <UART_SetConfig+0x20c>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e0af      	b.n	8003048 <UART_SetConfig+0x20c>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e0ac      	b.n	8003048 <UART_SetConfig+0x20c>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e0a9      	b.n	8003048 <UART_SetConfig+0x20c>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	bf00      	nop
 8002efa:	e0a5      	b.n	8003048 <UART_SetConfig+0x20c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a86      	ldr	r2, [pc, #536]	; (800311c <UART_SetConfig+0x2e0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d123      	bne.n	8002f4e <UART_SetConfig+0x112>
 8002f06:	4b84      	ldr	r3, [pc, #528]	; (8003118 <UART_SetConfig+0x2dc>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d012      	beq.n	8002f3a <UART_SetConfig+0xfe>
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d802      	bhi.n	8002f20 <UART_SetConfig+0xe4>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <UART_SetConfig+0xf2>
 8002f1e:	e012      	b.n	8002f46 <UART_SetConfig+0x10a>
 8002f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f24:	d00c      	beq.n	8002f40 <UART_SetConfig+0x104>
 8002f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0xf8>
 8002f2c:	e00b      	b.n	8002f46 <UART_SetConfig+0x10a>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e089      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e086      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e083      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f40:	2308      	movs	r3, #8
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e080      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f46:	2310      	movs	r3, #16
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	bf00      	nop
 8002f4c:	e07c      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	; (8003120 <UART_SetConfig+0x2e4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d123      	bne.n	8002fa0 <UART_SetConfig+0x164>
 8002f58:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <UART_SetConfig+0x2dc>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f64:	d012      	beq.n	8002f8c <UART_SetConfig+0x150>
 8002f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f6a:	d802      	bhi.n	8002f72 <UART_SetConfig+0x136>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <UART_SetConfig+0x144>
 8002f70:	e012      	b.n	8002f98 <UART_SetConfig+0x15c>
 8002f72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f76:	d00c      	beq.n	8002f92 <UART_SetConfig+0x156>
 8002f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f7c:	d003      	beq.n	8002f86 <UART_SetConfig+0x14a>
 8002f7e:	e00b      	b.n	8002f98 <UART_SetConfig+0x15c>
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e060      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f86:	2302      	movs	r3, #2
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e05d      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e05a      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f92:	2308      	movs	r3, #8
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e057      	b.n	8003048 <UART_SetConfig+0x20c>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	bf00      	nop
 8002f9e:	e053      	b.n	8003048 <UART_SetConfig+0x20c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <UART_SetConfig+0x2e8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d123      	bne.n	8002ff2 <UART_SetConfig+0x1b6>
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <UART_SetConfig+0x2dc>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d012      	beq.n	8002fde <UART_SetConfig+0x1a2>
 8002fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbc:	d802      	bhi.n	8002fc4 <UART_SetConfig+0x188>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <UART_SetConfig+0x196>
 8002fc2:	e012      	b.n	8002fea <UART_SetConfig+0x1ae>
 8002fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc8:	d00c      	beq.n	8002fe4 <UART_SetConfig+0x1a8>
 8002fca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fce:	d003      	beq.n	8002fd8 <UART_SetConfig+0x19c>
 8002fd0:	e00b      	b.n	8002fea <UART_SetConfig+0x1ae>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e037      	b.n	8003048 <UART_SetConfig+0x20c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e034      	b.n	8003048 <UART_SetConfig+0x20c>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e031      	b.n	8003048 <UART_SetConfig+0x20c>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e02e      	b.n	8003048 <UART_SetConfig+0x20c>
 8002fea:	2310      	movs	r3, #16
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	bf00      	nop
 8002ff0:	e02a      	b.n	8003048 <UART_SetConfig+0x20c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <UART_SetConfig+0x2ec>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d123      	bne.n	8003044 <UART_SetConfig+0x208>
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <UART_SetConfig+0x2dc>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003008:	d012      	beq.n	8003030 <UART_SetConfig+0x1f4>
 800300a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300e:	d802      	bhi.n	8003016 <UART_SetConfig+0x1da>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <UART_SetConfig+0x1e8>
 8003014:	e012      	b.n	800303c <UART_SetConfig+0x200>
 8003016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800301a:	d00c      	beq.n	8003036 <UART_SetConfig+0x1fa>
 800301c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003020:	d003      	beq.n	800302a <UART_SetConfig+0x1ee>
 8003022:	e00b      	b.n	800303c <UART_SetConfig+0x200>
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e00e      	b.n	8003048 <UART_SetConfig+0x20c>
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e00b      	b.n	8003048 <UART_SetConfig+0x20c>
 8003030:	2304      	movs	r3, #4
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e008      	b.n	8003048 <UART_SetConfig+0x20c>
 8003036:	2308      	movs	r3, #8
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e005      	b.n	8003048 <UART_SetConfig+0x20c>
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	bf00      	nop
 8003042:	e001      	b.n	8003048 <UART_SetConfig+0x20c>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	d16e      	bne.n	8003130 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d828      	bhi.n	80030aa <UART_SetConfig+0x26e>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0x224>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003085 	.word	0x08003085
 8003064:	0800308d 	.word	0x0800308d
 8003068:	08003095 	.word	0x08003095
 800306c:	080030ab 	.word	0x080030ab
 8003070:	0800309b 	.word	0x0800309b
 8003074:	080030ab 	.word	0x080030ab
 8003078:	080030ab 	.word	0x080030ab
 800307c:	080030ab 	.word	0x080030ab
 8003080:	080030a3 	.word	0x080030a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7ff fc2a 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003088:	61b8      	str	r0, [r7, #24]
        break;
 800308a:	e013      	b.n	80030b4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800308c:	f7ff fc48 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003090:	61b8      	str	r0, [r7, #24]
        break;
 8003092:	e00f      	b.n	80030b4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <UART_SetConfig+0x2f0>)
 8003096:	61bb      	str	r3, [r7, #24]
        break;
 8003098:	e00c      	b.n	80030b4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309a:	f7ff fba9 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800309e:	61b8      	str	r0, [r7, #24]
        break;
 80030a0:	e008      	b.n	80030b4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e004      	b.n	80030b4 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	77bb      	strb	r3, [r7, #30]
        break;
 80030b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8086 	beq.w	80031c8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	005a      	lsls	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	d916      	bls.n	8003108 <UART_SetConfig+0x2cc>
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d212      	bcs.n	8003108 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f023 030f 	bic.w	r3, r3, #15
 80030ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	89fa      	ldrh	r2, [r7, #14]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e05f      	b.n	80031c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	77bb      	strb	r3, [r7, #30]
 800310c:	e05c      	b.n	80031c8 <UART_SetConfig+0x38c>
 800310e:	bf00      	nop
 8003110:	efff69f3 	.word	0xefff69f3
 8003114:	40013800 	.word	0x40013800
 8003118:	40021000 	.word	0x40021000
 800311c:	40004400 	.word	0x40004400
 8003120:	40004800 	.word	0x40004800
 8003124:	40004c00 	.word	0x40004c00
 8003128:	40005000 	.word	0x40005000
 800312c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003130:	7ffb      	ldrb	r3, [r7, #31]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d827      	bhi.n	8003186 <UART_SetConfig+0x34a>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0x300>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003161 	.word	0x08003161
 8003140:	08003169 	.word	0x08003169
 8003144:	08003171 	.word	0x08003171
 8003148:	08003187 	.word	0x08003187
 800314c:	08003177 	.word	0x08003177
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
 800315c:	0800317f 	.word	0x0800317f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff fbbc 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003164:	61b8      	str	r0, [r7, #24]
        break;
 8003166:	e013      	b.n	8003190 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff fbda 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <UART_SetConfig+0x3a4>)
 8003172:	61bb      	str	r3, [r7, #24]
        break;
 8003174:	e00c      	b.n	8003190 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003176:	f7ff fb3b 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800317a:	61b8      	str	r0, [r7, #24]
        break;
 800317c:	e008      	b.n	8003190 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	61bb      	str	r3, [r7, #24]
        break;
 8003184:	e004      	b.n	8003190 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	77bb      	strb	r3, [r7, #30]
        break;
 800318e:	bf00      	nop
    }

    if (pclk != 0U)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	085a      	lsrs	r2, r3, #1
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d908      	bls.n	80031c4 <UART_SetConfig+0x388>
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d204      	bcs.n	80031c4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e001      	b.n	80031c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e2:	d10a      	bne.n	80032fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003338:	f7fd ff12 	bl	8001160 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b08      	cmp	r3, #8
 800334a:	d10e      	bne.n	800336a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f82d 	bl	80033ba <UART_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e023      	b.n	80033b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d10e      	bne.n	8003396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f817 	bl	80033ba <UART_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e00d      	b.n	80033b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ca:	e05e      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d05a      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fd fec4 	bl	8001160 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <UART_WaitOnFlagUntilTimeout+0x30>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11b      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e043      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02c      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d124      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e00f      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d091      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4e0d      	ldr	r6, [pc, #52]	; (80034ec <__libc_init_array+0x38>)
 80034b8:	4c0d      	ldr	r4, [pc, #52]	; (80034f0 <__libc_init_array+0x3c>)
 80034ba:	1ba4      	subs	r4, r4, r6
 80034bc:	10a4      	asrs	r4, r4, #2
 80034be:	2500      	movs	r5, #0
 80034c0:	42a5      	cmp	r5, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	4e0b      	ldr	r6, [pc, #44]	; (80034f4 <__libc_init_array+0x40>)
 80034c6:	4c0c      	ldr	r4, [pc, #48]	; (80034f8 <__libc_init_array+0x44>)
 80034c8:	f000 f820 	bl	800350c <_init>
 80034cc:	1ba4      	subs	r4, r4, r6
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	2500      	movs	r5, #0
 80034d2:	42a5      	cmp	r5, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034dc:	4798      	blx	r3
 80034de:	3501      	adds	r5, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034e6:	4798      	blx	r3
 80034e8:	3501      	adds	r5, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	0800355c 	.word	0x0800355c
 80034f0:	0800355c 	.word	0x0800355c
 80034f4:	0800355c 	.word	0x0800355c
 80034f8:	08003560 	.word	0x08003560

080034fc <memset>:
 80034fc:	4402      	add	r2, r0
 80034fe:	4603      	mov	r3, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	d100      	bne.n	8003506 <memset+0xa>
 8003504:	4770      	bx	lr
 8003506:	f803 1b01 	strb.w	r1, [r3], #1
 800350a:	e7f9      	b.n	8003500 <memset+0x4>

0800350c <_init>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr

08003518 <_fini>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr
